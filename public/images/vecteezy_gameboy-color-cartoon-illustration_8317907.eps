%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Gameboy Color Cartoon Illustration.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: lenovo
%%CreationDate: 5/31/2022
%%BoundingBox: 0 0 2100 2100
%%HiResBoundingBox: 0 0 2100 2100
%%CropBox: 0 0 2100 2100
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreateDate>2022-05-31T03:04:26+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2022-05-31T03:04:27+07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-05-31T03:04:27+07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A6plz4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVK5ura1ge4upUgt4hylmlY&#xA;IiqO7M1ABizhCUyIxFk9Axyb8zvy/i+3rtodq/A/Pp/qBsnwHudnHsPWHlil8qQE/wCdH5aw1/3L&#xA;h2AqFSC4av0+nx/HD4UnIh7M66X+T/2Uf1oCf8+/y+irwlup6Up6cBFf+DKYfCk5EPZLWnmIj/O/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <pdf:Producer>Corel PDF Engine Version 17.0.0.491</pdf:Producer>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Gameboy Color Cartoon Illustration</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>Nintendo</rdf:li>
               <rdf:li>vintage</rdf:li>
               <rdf:li>retro</rdf:li>
               <rdf:li>classic</rdf:li>
               <rdf:li>analog</rdf:li>
               <rdf:li>gadget</rdf:li>
               <rdf:li>game console</rdf:li>
               <rdf:li>computer</rdf:li>
               <rdf:li>videogame</rdf:li>
               <rdf:li>controler</rdf:li>
               <rdf:li>games</rdf:li>
               <rdf:li>classic</rdf:li>
               <rdf:li>device</rdf:li>
               <rdf:li>control</rdf:li>
               <rdf:li>joystick</rdf:li>
               <rdf:li>retro</rdf:li>
               <rdf:li>controller</rdf:li>
               <rdf:li>console</rdf:li>
               <rdf:li>player</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>button</rdf:li>
               <rdf:li>icon</rdf:li>
               <rdf:li>nintendo</rdf:li>
               <rdf:li>game</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>play</rdf:li>
               <rdf:li>object</rdf:li>
               <rdf:li>fun</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>gaming</rdf:li>
               <rdf:li>digital</rdf:li>
               <rdf:li>gamer</rdf:li>
               <rdf:li>electronic</rdf:li>
               <rdf:li>video</rdf:li>
               <rdf:li>entertainment</rdf:li>
               <rdf:li>vintage</rdf:li>
               <rdf:li>gamepad</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>pad</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>electronics</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Gameboy Color Cartoon Illustration</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>@sebelastuff</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2100.000000</stDim:w>
            <stDim:h>2100.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:407249f7-303a-0142-b196-e7b0216ec7b0</stRef:instanceID>
            <stRef:documentID>xmp.did:407249f7-303a-0142-b196-e7b0216ec7b0</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:407249f7-303a-0142-b196-e7b0216ec7b0</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:ca3d8efc-d758-fb4a-903a-1b20e4af5135</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:ca3d8efc-d758-fb4a-903a-1b20e4af5135</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:407249f7-303a-0142-b196-e7b0216ec7b0</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:407249f7-303a-0142-b196-e7b0216ec7b0</stEvt:instanceID>
                  <stEvt:when>2022-05-31T03:03:42+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ca3d8efc-d758-fb4a-903a-1b20e4af5135</stEvt:instanceID>
                  <stEvt:when>2022-05-31T03:04:27+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2100 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2100 li
2100 2100 li
2100 0 li
cp
clp
0 2100 mo
2100 2100 li
2100 0 li
0 0 li
0 2100 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.239216 1 .784314 rgb
ef
325.058 527.824 mo
325.058 527.824 323.185 509.837 339.746 497.225 cv
458.966 395.626 li
567.691 388.066 674.936 380.382 780.622 373.014 cv
884.757 365.755 987.576 358.492 1088.82 351.177 cv
1104.43 350.05 1118.88 362.242 1120.93 378.364 cv
1138.29 514.599 1155.85 651.781 1173.38 789.451 cv
1191.02 928.049 1208.87 1067.27 1226.79 1207.4 cv
1229.92 1236.46 1227.62 1295.15 1159.38 1362.58 cv
1046.72 1469.9 li
1014.14 1496.77 975.468 1500.4 975.468 1500.4 cv
476.121 1571.76 li
458.911 1574.19 443.128 1562.05 441.116 1544.45 cv
421.411 1372.29 401.839 1201.08 382.425 1031.17 cv
363.135 862.349 343.985 694.483 325.058 527.824 cv
1 .239216 .431373 rgb
ef
1049.36 354.02 mo
1049.36 354.02 li
1069.25 352.589 li
1062.63 353.066 1056 353.543 1049.36 354.02 cv
.219608 .709804 .615686 rgb
f
469.297 486.123 mo
468.332 477.674 467.359 469.151 466.382 460.586 cv
471.243 460.239 li
473.541 460.075 476.639 459.854 480.537 459.576 cv
480.537 459.576 480.537 459.576 480.537 459.576 cv
506.65 457.713 li
500.864 406.718 li
500.864 406.718 li
500.864 406.718 500.339 402.084 499.286 392.813 cv
499.286 392.813 li
522.985 391.172 li
530.348 456.021 li
1056.58 418.478 li
1049.36 354.02 li
1056 353.543 1062.63 353.066 1069.25 352.589 cv
1073.05 352.316 li
1080.73 416.753 li
1125.42 413.565 li
1127.59 430.592 1128.68 439.105 1128.68 439.105 cv
908.88 454.78 689.083 470.449 469.297 486.123 cv
.74902 .176471 .368627 rgb
f
527.148 521.905 mo
621.605 515.282 715.162 508.796 807.562 502.355 cv
898.939 495.985 989.413 489.649 1078.92 483.321 cv
1084.55 482.923 1089.74 487.265 1090.47 492.901 cv
1096.48 539.652 1102.46 586.48 1108.5 633.373 cv
1114.55 680.328 1120.55 727.407 1126.62 774.593 cv
1131.32 811.116 1120.69 845.817 1099.79 872.218 cv
1078.8 898.732 1047.4 917.014 1010.6 920.584 cv
940.054 927.426 868.921 934.311 797.206 941.197 cv
724.902 948.141 651.828 955.227 578.285 962.225 cv
572.2 962.803 566.662 958.46 565.97 952.483 cv
557.819 882.122 549.661 811.905 541.54 741.971 cv
533.447 672.264 525.33 602.654 517.387 533.314 cv
516.716 527.453 521.133 522.327 527.148 521.905 cv
.34902 .219608 .25098 rgb
ef
624.255 573.272 mo
656.163 570.853 688.194 568.393 720.061 565.965 cv
752.087 563.526 784.035 561.117 815.852 558.704 cv
847.333 556.316 878.69 553.939 909.96 551.56 cv
941.395 549.169 972.746 546.706 1004.01 544.218 cv
1007.24 569.873 1010.45 595.573 1013.69 621.24 cv
1016.95 646.952 1020.25 672.774 1023.52 698.568 cv
1026.8 724.473 1030.13 750.426 1033.44 776.448 cv
1036.74 802.448 1040.13 828.627 1043.54 854.85 cv
1011.77 857.747 979.96 860.668 948.187 863.618 cv
916.537 866.558 884.76 869.512 852.853 872.448 cv
820.654 875.411 788.237 878.391 755.824 881.351 cv
723.533 884.297 691.071 887.274 658.609 890.168 cv
655.707 863.525 652.721 836.82 649.822 810.26 cv
646.925 783.707 643.991 757.124 641.134 730.654 cv
638.288 704.292 635.471 677.972 632.626 651.796 cv
629.777 625.593 626.933 599.394 624.255 573.272 cv
.752941 1 .258824 rgb
ef
691.885 1220.32 mo
665.306 1220.32 641.242 1209.54 623.825 1192.13 cv
606.408 1174.71 595.635 1150.65 595.635 1124.07 cv
595.635 1097.49 606.408 1073.42 623.825 1056.01 cv
641.242 1038.59 665.306 1027.82 691.885 1027.82 cv
718.463 1027.82 742.528 1038.59 759.945 1056.01 cv
777.361 1073.42 788.135 1097.49 788.135 1124.07 cv
788.135 1150.65 777.361 1174.71 759.945 1192.13 cv
742.528 1209.54 718.463 1220.32 691.885 1220.32 cv
.74902 .176471 .368627 rgb
f
759.945 1056.01 mo
742.528 1038.59 718.463 1027.82 691.885 1027.82 cv
665.306 1027.82 641.242 1038.59 623.825 1056.01 cv
606.408 1073.42 595.635 1097.49 595.635 1124.07 cv
595.635 1150.65 606.408 1174.71 623.825 1192.13 cv
641.242 1209.54 665.306 1220.32 691.885 1220.32 cv
718.463 1220.32 742.528 1209.54 759.945 1192.13 cv
777.361 1174.71 788.135 1150.65 788.135 1124.07 cv
788.135 1097.49 777.361 1073.42 759.945 1056.01 cv
691.885 1017.82 mo
721.224 1017.82 747.788 1029.71 767.015 1048.94 cv
786.242 1068.16 798.135 1094.73 798.135 1124.07 cv
798.135 1153.41 786.242 1179.97 767.015 1199.2 cv
747.788 1218.42 721.224 1230.32 691.885 1230.32 cv
662.546 1230.32 635.982 1218.42 616.755 1199.2 cv
597.528 1179.97 585.635 1153.41 585.635 1124.07 cv
585.635 1094.73 597.528 1068.16 616.755 1048.94 cv
635.982 1029.71 662.546 1017.82 691.885 1017.82 cv
.168627 .0352941 .219608 rgb
ef
665.041 1067.9 mo
671.885 1066.99 678.768 1066.06 685.611 1065.16 cv
692.452 1064.25 699.321 1063.35 706.158 1062.44 cv
709.154 1062.04 711.828 1064.16 712.106 1067.16 cv
712.983 1076.55 713.865 1085.97 714.762 1095.43 cv
724.182 1094.18 733.591 1092.92 742.991 1091.65 cv
745.979 1091.25 748.689 1093.39 748.994 1096.42 cv
749.692 1103.34 750.38 1110.31 751.075 1117.26 cv
751.771 1124.24 752.458 1131.25 753.172 1138.27 cv
753.485 1141.34 751.253 1144.18 748.214 1144.59 cv
738.725 1145.88 729.242 1147.16 719.734 1148.44 cv
720.638 1158.1 721.548 1167.8 722.466 1177.52 cv
722.759 1180.62 720.503 1183.52 717.443 1183.94 cv
710.459 1184.9 703.445 1185.83 696.457 1186.78 cv
689.468 1187.73 682.45 1188.69 675.458 1189.64 cv
672.396 1190.05 669.68 1187.85 669.416 1184.72 cv
668.588 1174.97 667.753 1165.25 666.938 1155.56 cv
657.414 1156.86 647.873 1158.14 638.331 1159.43 cv
635.283 1159.84 632.588 1157.65 632.343 1154.56 cv
631.785 1147.52 631.239 1140.45 630.689 1133.44 cv
630.141 1126.44 629.581 1119.43 629.046 1112.46 cv
628.812 1109.41 631.078 1106.6 634.096 1106.2 cv
643.552 1104.94 653.015 1103.68 662.452 1102.4 cv
661.642 1092.94 660.855 1083.49 660.056 1074.08 cv
659.802 1071.08 662.042 1068.29 665.041 1067.9 cv
cp
.34902 .219608 .25098 rgb
ef
707.146 1067.71 mo
707.126 1067.53 li
707.047 1067.43 li
706.91 1067.38 li
706.696 1067.39 li
693.028 1069.22 679.354 1071.02 665.686 1072.84 cv
665.516 1072.86 665.347 1072.97 665.216 1073.13 cv
665.09 1073.29 665.02 1073.48 665.035 1073.67 cv
665.832 1083.11 666.625 1092.55 667.432 1101.99 cv
667.419 1101.99 li
667.638 1104.62 665.759 1106.99 663.116 1107.34 cv
653.659 1108.62 644.2 1109.88 634.741 1111.14 cv
634.561 1111.16 634.379 1111.29 634.238 1111.46 cv
634.092 1111.64 634.009 1111.87 634.025 1112.09 cv
635.101 1126.12 636.212 1140.14 637.323 1154.17 cv
637.318 1154.17 li
637.331 1154.29 li
637.432 1154.44 li
637.469 1154.47 637.544 1154.49 637.637 1154.48 cv
637.637 1154.49 li
637.791 1154.47 li
641.62 1153.95 li
649.729 1152.86 657.839 1151.77 665.933 1150.67 cv
666.126 1150.63 666.325 1150.6 666.528 1150.58 cv
669.277 1150.36 671.692 1152.4 671.917 1155.15 cv
672.733 1164.87 673.567 1174.59 674.396 1184.31 cv
674.392 1184.31 li
674.404 1184.42 li
674.428 1184.52 674.475 1184.59 674.533 1184.64 cv
674.578 1184.68 674.665 1184.7 674.773 1184.69 cv
674.773 1184.69 li
674.911 1184.67 li
674.911 1184.68 li
688.868 1182.8 702.828 1180.92 716.779 1179 cv
716.963 1178.97 717.146 1178.85 717.283 1178.67 cv
717.44 1178.47 717.528 1178.22 717.505 1177.98 cv
716.598 1168.35 715.696 1158.73 714.794 1149.1 cv
714.428 1146.37 716.342 1143.86 719.07 1143.5 cv
747.55 1139.65 li
747.732 1139.63 747.902 1139.52 748.025 1139.36 cv
748.16 1139.19 748.233 1138.97 748.211 1138.75 cv
746.792 1124.78 745.421 1110.79 744.011 1096.82 cv
744.013 1096.82 li
743.911 1096.65 li
743.869 1096.62 743.811 1096.6 743.65 1096.6 cv
715.407 1100.37 li
715.231 1100.39 li
712.492 1100.65 710.06 1098.63 709.801 1095.9 cv
707.146 1067.71 li
cp
664.396 1062.96 mo
678.095 1061.13 691.797 1059.33 705.494 1057.5 cv
705.612 1057.48 li
705.611 1057.48 li
705.833 1057.45 li
706.009 1057.43 706.182 1057.42 706.356 1057.42 cv
708.941 1057.28 711.366 1058.12 713.257 1059.62 cv
715.253 1061.21 716.655 1063.55 717.022 1066.29 cv
717.034 1066.39 li
717.042 1066.39 li
717.067 1066.61 li
717.082 1066.74 717.089 1066.87 717.095 1067 cv
717.805 1074.61 718.52 1082.2 719.237 1089.81 cv
726.936 1088.78 734.632 1087.75 742.328 1086.71 cv
742.425 1086.7 li
742.425 1086.69 li
742.609 1086.67 li
742.759 1086.65 742.909 1086.64 743.058 1086.64 cv
745.671 1086.47 748.148 1087.31 750.084 1088.84 cv
752.111 1090.45 753.542 1092.81 753.912 1095.57 cv
753.921 1095.65 li
753.932 1095.64 li
753.954 1095.83 li
753.971 1095.97 753.981 1096.11 753.986 1096.25 cv
755.369 1110.09 756.728 1123.94 758.133 1137.78 cv
758.422 1140.63 757.536 1143.38 755.877 1145.49 cv
754.205 1147.63 751.734 1149.15 748.878 1149.53 cv
725.14 1152.74 li
725.899 1160.84 726.664 1168.94 727.427 1177.05 cv
727.696 1179.91 726.8 1182.68 725.135 1184.8 cv
723.456 1186.95 720.978 1188.48 718.106 1188.88 cv
704.118 1190.8 690.117 1192.69 676.122 1194.58 cv
676.004 1194.59 li
676.005 1194.6 li
675.73 1194.63 li
675.593 1194.64 li
675.593 1194.65 li
672.848 1194.88 670.254 1194.01 668.246 1192.38 cv
666.262 1190.76 664.875 1188.42 664.507 1185.67 cv
664.493 1185.55 li
664.487 1185.55 li
664.455 1185.27 li
664.442 1185.13 li
664.436 1185.13 li
662.4 1161.21 li
654.535 1162.28 646.394 1163.59 638.536 1164.42 cv
638.418 1164.43 li
638.419 1164.44 li
635.696 1164.66 633.13 1163.79 631.144 1162.17 cv
629.178 1160.58 627.801 1158.24 627.436 1155.51 cv
627.422 1155.39 li
627.416 1155.39 li
627.382 1155.09 li
627.371 1154.95 li
627.364 1154.95 li
626.264 1140.91 625.144 1126.87 624.066 1112.83 cv
623.85 1110 624.783 1107.3 626.466 1105.21 cv
628.152 1103.12 630.617 1101.63 633.451 1101.26 cv
657.071 1098.1 li
655.076 1074.49 li
654.837 1071.67 655.761 1068.97 657.444 1066.88 cv
659.117 1064.81 661.571 1063.33 664.396 1062.96 cv
cp
.168627 .0352941 .219608 rgb
ef
1042.55 1138.96 mo
1031.1 1138.96 1019.66 1134.66 1010.91 1126.05 cv
1010.91 1126.05 li
993.24 1108.64 993.018 1079.95 1010.42 1062.28 cv
1086.82 984.691 li
1095.61 975.766 1107.29 971.291 1118.96 971.291 cv
1130.4 971.291 1141.85 975.587 1150.59 984.201 cv
1150.6 984.203 li
1168.27 1001.6 1168.49 1030.3 1151.09 1047.97 cv
1074.68 1125.56 li
1065.89 1134.48 1054.22 1138.96 1042.55 1138.96 cv
.74902 .176471 .368627 rgb
f
1090.38 988.187 mo
1013.98 1065.77 li
1006.24 1073.63 1002.41 1083.95 1002.49 1094.24 cv
1002.57 1104.41 1006.47 1114.55 1014.17 1122.26 cv
1014.27 1122.34 1014.36 1122.42 1014.45 1122.51 cv
1014.45 1122.51 li
1014.44 1122.52 li
1022.29 1130.24 1032.6 1134.05 1042.88 1133.97 cv
1053.15 1133.9 1063.39 1129.92 1071.13 1122.06 cv
1147.27 1044.74 li
1147.36 1044.63 1147.45 1044.53 1147.55 1044.44 cv
1147.55 1044.44 li
1147.56 1044.45 li
1155.28 1036.59 1159.09 1026.28 1159.01 1016.01 cv
1158.94 1005.84 1155.04 995.7 1147.34 987.992 cv
1147.24 987.912 1147.15 987.828 1147.06 987.739 cv
1147.06 987.738 li
1147.06 987.736 li
1147.07 987.726 li
1139.21 980.005 1128.91 976.194 1118.63 976.272 cv
1108.36 976.35 1098.11 980.331 1090.38 988.187 cv
cp
1006.87 1058.78 mo
1083.27 981.195 li
1092.93 971.382 1105.74 966.411 1118.59 966.313 cv
1131.41 966.215 1144.28 970.987 1154.09 980.646 cv
1154.09 980.65 li
1154.12 980.675 li
1154.13 980.666 li
1154.13 980.668 li
1154.13 980.669 li
1154.22 980.755 1154.3 980.844 1154.38 980.936 cv
1164 990.566 1168.88 1003.25 1168.97 1015.97 cv
1169.07 1028.79 1164.3 1041.66 1154.64 1051.47 cv
1154.64 1051.47 li
1154.61 1051.5 li
1154.62 1051.51 li
1154.62 1051.51 li
1154.38 1051.73 li
1078.24 1129.05 li
1068.57 1138.87 1055.76 1143.84 1042.92 1143.93 cv
1030.1 1144.03 1017.23 1139.26 1007.42 1129.6 cv
1007.42 1129.6 li
1007.39 1129.57 li
1007.38 1129.58 li
1007.38 1129.58 li
1007.29 1129.49 1007.21 1129.41 1007.13 1129.31 cv
997.508 1119.68 992.632 1107 992.535 1094.28 cv
992.436 1081.46 997.206 1068.59 1006.87 1058.78 cv
cp
.168627 .0352941 .219608 rgb
ef
1021.56 1069.77 mo
1033.92 1057.22 1054.12 1057.07 1066.67 1069.43 cv
1079.22 1081.79 1079.38 1101.98 1067.01 1114.53 cv
1054.65 1127.08 1034.46 1127.24 1021.91 1114.88 cv
1009.36 1102.52 1009.2 1082.32 1021.56 1069.77 cv
cp
.752941 1 .258824 rgb
ef
1044.06 1065.24 mo
1037.19 1065.29 1030.33 1067.97 1025.12 1073.27 cv
1019.9 1078.57 1017.32 1085.48 1017.37 1092.38 cv
1017.43 1099.25 1020.11 1106.11 1025.41 1111.32 cv
1030.7 1116.54 1037.62 1119.12 1044.51 1119.07 cv
1051.38 1119.02 1058.25 1116.33 1063.46 1111.04 cv
1068.68 1105.74 1071.26 1098.82 1071.2 1091.93 cv
1071.15 1085.06 1068.47 1078.2 1063.17 1072.98 cv
1057.87 1067.76 1050.96 1065.19 1044.06 1065.24 cv
cp
1018.01 1066.28 mo
1025.15 1059.02 1034.57 1055.35 1044.02 1055.28 cv
1053.45 1055.21 1062.91 1058.73 1070.17 1065.87 cv
1077.42 1073.01 1081.09 1082.44 1081.16 1091.89 cv
1081.24 1101.32 1077.71 1110.78 1070.57 1118.03 cv
1063.43 1125.28 1054 1128.95 1044.55 1129.03 cv
1035.12 1129.1 1025.66 1125.57 1018.41 1118.43 cv
1011.16 1111.29 1007.49 1101.87 1007.42 1092.42 cv
1007.34 1082.99 1010.87 1073.53 1018.01 1066.28 cv
cp
.168627 .0352941 .219608 rgb
ef
1094.49 995.715 mo
1106.85 983.164 1127.05 983.009 1139.6 995.369 cv
1152.15 1007.73 1152.3 1027.92 1139.94 1040.47 cv
1127.58 1053.03 1107.39 1053.18 1094.84 1040.82 cv
1082.29 1028.46 1082.13 1008.27 1094.49 995.715 cv
cp
.752941 1 .258824 rgb
ef
1098.03 999.248 mo
1098.03 999.25 li
1098.03 999.251 li
1098.02 999.242 li
1092.82 1004.54 1090.25 1011.44 1090.3 1018.32 cv
1090.35 1025.08 1092.95 1031.84 1098.09 1037.02 cv
1098.19 1037.11 1098.28 1037.19 1098.37 1037.28 cv
1098.37 1037.29 li
1098.38 1037.29 li
1098.37 1037.3 li
1103.66 1042.5 1110.56 1045.06 1117.44 1045.01 cv
1124.21 1044.96 1130.96 1042.36 1136.14 1037.22 cv
1136.23 1037.13 1136.32 1037.03 1136.41 1036.94 cv
1136.41 1036.94 li
1136.41 1036.94 li
1136.42 1036.95 li
1141.62 1031.65 1144.18 1024.75 1144.13 1017.87 cv
1144.08 1011.1 1141.48 1004.34 1136.34 999.16 cv
1136.24 999.079 1136.15 998.996 1136.06 998.907 cv
1136.06 998.904 li
1136.06 998.902 li
1136.07 998.893 li
1130.77 993.695 1123.87 991.128 1116.99 991.18 cv
1110.23 991.231 1103.47 993.836 1098.28 998.975 cv
1098.2 999.068 1098.12 999.16 1098.03 999.248 cv
cp
1090.96 992.18 mo
1090.96 992.178 li
1091.05 992.092 1091.13 992.01 1091.22 991.932 cv
1098.33 984.871 1107.63 981.292 1116.95 981.221 cv
1126.38 981.149 1135.84 984.675 1143.09 991.813 cv
1143.1 991.818 li
1143.12 991.841 li
1143.13 991.832 li
1143.13 991.834 li
1143.13 991.836 li
1143.22 991.923 1143.3 992.01 1143.38 992.101 cv
1150.44 999.21 1154.02 1008.51 1154.09 1017.83 cv
1154.16 1027.26 1150.64 1036.72 1143.5 1043.97 cv
1143.5 1043.97 li
1143.47 1044 li
1143.48 1044.01 li
1143.48 1044.01 li
1143.48 1044.01 li
1143.39 1044.1 1143.3 1044.18 1143.21 1044.26 cv
1136.1 1051.32 1126.81 1054.9 1117.48 1054.97 cv
1108.05 1055.04 1098.6 1051.52 1091.34 1044.38 cv
1091.34 1044.37 li
1091.32 1044.35 li
1091.31 1044.36 li
1091.3 1044.36 li
1091.3 1044.35 li
1091.22 1044.27 1091.13 1044.18 1091.06 1044.09 cv
1083.99 1036.98 1080.42 1027.69 1080.34 1018.36 cv
1080.27 1008.93 1083.8 999.474 1090.94 992.22 cv
1090.94 992.217 li
1090.97 992.191 li
1090.96 992.182 li
1090.96 992.18 li
cp
.168627 .0352941 .219608 rgb
ef
883.211 1209.03 mo
883.213 1209.03 li
888.175 1214.27 887.946 1222.62 882.704 1227.58 cv
837.312 1270.55 li
832.069 1275.51 823.721 1275.28 818.758 1270.04 cv
818.758 1270.04 li
813.795 1264.8 814.024 1256.45 819.267 1251.49 cv
864.658 1208.52 li
869.901 1203.56 878.25 1203.79 883.211 1209.03 cv
cp
.752941 1 .258824 rgb
ef
815.063 1273.39 mo
813.771 1270.04 li
813.771 1271.24 814.2 1272.44 815.063 1273.39 cv
cp
881.805 1218.28 mo
881.862 1216.19 881.139 1214.09 879.621 1212.47 cv
879.599 1212.45 li
878.069 1210.83 876 1209.99 873.904 1209.93 cv
871.808 1209.87 869.695 1210.6 868.076 1212.13 cv
822.685 1255.1 li
821.068 1256.63 820.221 1258.7 820.165 1260.8 cv
820.11 1262.8 820.781 1264.82 822.19 1266.41 cv
822.324 1266.53 822.45 1266.67 822.569 1266.81 cv
824.088 1268.31 826.071 1269.09 828.067 1269.14 cv
830.163 1269.2 832.277 1268.47 833.894 1266.94 cv
879.025 1224.22 li
879.267 1223.97 li
880.896 1222.43 881.749 1220.36 881.805 1218.28 cv
cp
886.403 1205.18 mo
886.711 1205.44 886.988 1205.73 887.226 1206.05 cv
890.38 1209.61 891.886 1214.11 891.764 1218.55 cv
891.638 1223.19 889.751 1227.78 886.141 1231.2 cv
886.05 1231.28 885.957 1231.37 885.861 1231.44 cv
840.73 1274.16 li
837.107 1277.59 832.421 1279.23 827.793 1279.1 cv
823.155 1278.98 818.563 1277.09 815.145 1273.48 cv
815.063 1273.39 li
811.69 1269.78 810.081 1265.12 810.206 1260.52 cv
810.332 1255.89 812.224 1251.3 815.849 1247.87 cv
861.24 1204.91 li
864.863 1201.48 869.55 1199.84 874.178 1199.97 cv
878.618 1200.09 883.024 1201.84 886.403 1205.18 cv
cp
.168627 .0352941 .219608 rgb
ef
991.609 1192.31 mo
991.61 1192.31 li
996.572 1197.56 996.342 1205.91 991.101 1210.87 cv
945.709 1253.83 li
940.466 1258.8 932.118 1258.57 927.155 1253.32 cv
927.155 1253.32 li
922.192 1248.08 922.421 1239.73 927.664 1234.77 cv
973.055 1191.8 li
978.297 1186.84 986.646 1187.07 991.609 1192.31 cv
cp
.752941 1 .258824 rgb
ef
923.46 1256.67 mo
922.168 1253.32 li
922.168 1254.52 922.597 1255.72 923.46 1256.67 cv
cp
990.202 1201.56 mo
990.259 1199.47 989.536 1197.37 988.018 1195.75 cv
987.996 1195.73 li
986.466 1194.11 984.396 1193.27 982.3 1193.21 cv
980.205 1193.15 978.092 1193.88 976.473 1195.42 cv
931.082 1238.38 li
929.465 1239.91 928.618 1241.98 928.561 1244.08 cv
928.507 1246.08 929.178 1248.1 930.587 1249.69 cv
930.72 1249.82 930.847 1249.95 930.966 1250.09 cv
932.485 1251.59 934.468 1252.37 936.464 1252.43 cv
938.56 1252.48 940.674 1251.75 942.291 1250.22 cv
987.422 1207.5 li
987.664 1207.25 li
989.294 1205.71 990.146 1203.64 990.202 1201.56 cv
cp
994.8 1188.47 mo
995.108 1188.72 995.385 1189.01 995.624 1189.33 cv
998.777 1192.89 1000.28 1197.39 1000.16 1201.83 cv
1000.03 1206.47 998.148 1211.06 994.538 1214.48 cv
994.447 1214.57 994.354 1214.65 994.258 1214.73 cv
949.126 1257.45 li
945.504 1260.87 940.818 1262.51 936.19 1262.38 cv
931.552 1262.26 926.96 1260.37 923.542 1256.76 cv
923.46 1256.67 li
920.087 1253.06 918.477 1248.41 918.603 1243.8 cv
918.729 1239.18 920.621 1234.59 924.246 1231.16 cv
969.637 1188.19 li
973.26 1184.76 977.947 1183.13 982.575 1183.25 cv
987.016 1183.37 991.421 1185.12 994.8 1188.47 cv
cp
.168627 .0352941 .219608 rgb
ef
821.526 1385.46 mo
814.824 1385.46 808.914 1380.52 807.918 1373.7 cv
807.918 1373.7 li
806.824 1366.22 812.05 1359.2 819.534 1358.11 cv
928.379 1342.2 li
929.046 1342.1 929.709 1342.06 930.364 1342.06 cv
937.066 1342.06 942.976 1347 943.972 1353.82 cv
943.972 1353.82 li
945.066 1361.3 939.839 1368.32 932.356 1369.41 cv
823.511 1385.32 li
822.845 1385.42 822.181 1385.46 821.526 1385.46 cv
.74902 .176471 .368627 rgb
f
812.89 1373.18 mo
812.917 1373.7 li
812.917 1373.53 812.907 1373.35 812.89 1373.18 cv
cp
939 1354.34 mo
938.973 1353.82 li
938.973 1353.99 938.983 1354.17 939 1354.34 cv
cp
929.103 1347.14 mo
820.257 1363.05 li
817.872 1363.4 815.849 1364.69 814.513 1366.48 cv
813.209 1368.23 812.549 1370.46 812.831 1372.77 cv
812.857 1372.91 812.876 1373.05 812.89 1373.18 cv
813.281 1375.48 814.547 1377.42 816.287 1378.72 cv
818.089 1380.07 820.403 1380.73 822.788 1380.38 cv
931.633 1364.47 li
934.019 1364.12 936.042 1362.84 937.377 1361.04 cv
938.681 1359.29 939.341 1357.06 939.059 1354.75 cv
939.033 1354.61 939.014 1354.47 939 1354.34 cv
938.609 1352.04 937.343 1350.1 935.604 1348.8 cv
933.801 1347.46 931.487 1346.79 929.103 1347.14 cv
cp
818.811 1353.17 mo
927.657 1337.26 li
932.754 1336.52 937.694 1337.92 941.539 1340.79 cv
945.398 1343.67 948.169 1348 948.913 1353.1 cv
948.916 1353.11 li
949.654 1358.21 948.247 1363.14 945.385 1366.98 cv
942.51 1370.84 938.175 1373.61 933.079 1374.35 cv
824.233 1390.26 li
819.136 1391 814.196 1389.6 810.351 1386.73 cv
806.492 1383.86 803.721 1379.52 802.977 1374.42 cv
802.975 1374.41 li
802.237 1369.32 803.644 1364.38 806.505 1360.54 cv
809.38 1356.68 813.714 1353.91 818.811 1353.17 cv
cp
.168627 .0352941 .219608 rgb
ef
1047.11 1249.69 mo
1047.11 1249.69 li
1049.94 1246.53 1054.83 1246.26 1057.98 1249.08 cv
1117 1301.8 li
1120.15 1304.62 1120.43 1309.51 1117.61 1312.67 cv
1117.61 1312.67 li
1114.79 1315.83 1109.9 1316.1 1106.74 1313.28 cv
1047.73 1260.55 li
1044.57 1257.73 1044.29 1252.84 1047.11 1249.69 cv
ef
1065.46 1229.15 mo
1065.46 1229.15 li
1068.28 1225.99 1073.17 1225.72 1076.33 1228.54 cv
1135.35 1281.27 li
1138.5 1284.09 1138.78 1288.97 1135.96 1292.13 cv
1135.96 1292.13 li
1133.14 1295.29 1128.25 1295.56 1125.09 1292.75 cv
1066.08 1240.02 li
1062.92 1237.2 1062.64 1232.31 1065.46 1229.15 cv
ef
1083.81 1208.61 mo
1083.81 1208.61 li
1086.63 1205.46 1091.52 1205.18 1094.68 1208 cv
1153.7 1260.73 li
1156.85 1263.55 1157.13 1268.44 1154.31 1271.59 cv
1154.31 1271.59 li
1151.49 1274.75 1146.6 1275.03 1143.44 1272.21 cv
1084.42 1219.48 li
1081.27 1216.66 1080.99 1211.77 1083.81 1208.61 cv
ef
1102.16 1188.07 mo
1102.16 1188.07 li
1104.98 1184.92 1109.87 1184.64 1113.03 1187.46 cv
1172.04 1240.19 li
1175.2 1243.01 1175.48 1247.9 1172.66 1251.06 cv
1172.65 1251.06 li
1169.84 1254.21 1164.95 1254.49 1161.79 1251.67 cv
1102.77 1198.94 li
1099.62 1196.12 1099.34 1191.23 1102.16 1188.07 cv
ef
1120.51 1167.54 mo
1120.52 1167.53 li
1123.34 1164.38 1128.23 1164.1 1131.38 1166.92 cv
1190.4 1219.65 li
1193.55 1222.47 1193.83 1227.36 1191.01 1230.52 cv
1191.01 1230.52 li
1188.19 1233.67 1183.3 1233.95 1180.14 1231.13 cv
1121.13 1178.4 li
1117.97 1175.58 1117.69 1170.69 1120.51 1167.54 cv
ef
585.624 704.539 mo
593.628 704.539 600.155 698.013 600.155 690.008 cv
600.155 682.004 593.628 675.476 585.624 675.476 cv
577.619 675.476 571.091 682.004 571.091 690.008 cv
571.091 698.013 577.619 704.539 585.624 704.539 cv
cp
1 .14902 .14902 rgb
ef
592.373 683.258 mo
590.648 681.54 588.262 680.477 585.623 680.477 cv
582.981 680.477 580.597 681.54 578.873 683.258 cv
577.154 684.982 576.091 687.368 576.091 690.008 cv
576.091 692.648 577.154 695.034 578.873 696.758 cv
580.597 698.477 582.981 699.54 585.623 699.54 cv
588.262 699.54 590.648 698.477 592.373 696.758 cv
594.091 695.034 595.154 692.648 595.154 690.008 cv
595.154 687.368 594.091 684.982 592.373 683.258 cv
cp
585.623 670.478 mo
591 670.478 595.878 672.665 599.413 676.197 cv
599.433 676.218 li
602.966 679.753 605.153 684.628 605.153 690.008 cv
605.153 695.386 602.966 700.264 599.433 703.799 cv
599.413 703.819 li
595.878 707.352 591 709.539 585.623 709.539 cv
580.243 709.539 575.367 707.352 571.832 703.819 cv
571.812 703.799 li
568.279 700.264 566.092 695.386 566.092 690.008 cv
566.092 684.628 568.279 679.753 571.812 676.218 cv
571.832 676.197 li
575.367 672.665 580.243 670.478 585.623 670.478 cv
cp
.168627 .0352941 .219608 rgb
ef
559.363 437.948 mo
552.247 437.948 546.182 432.41 545.653 425.206 cv
545.653 425.205 li
545.098 417.664 550.814 411.04 558.357 410.485 cv
668.062 402.42 li
668.4 402.395 668.737 402.383 669.071 402.383 cv
676.187 402.383 682.253 407.921 682.782 415.126 cv
682.782 415.127 li
683.338 422.668 677.62 429.291 670.078 429.847 cv
560.373 437.911 li
560.034 437.936 559.697 437.948 559.363 437.948 cv
.666667 .156863 .345098 rgb
f
540.673 425.557 mo
540.673 425.553 li
540.673 425.557 li
cp
687.762 414.775 mo
687.762 414.78 li
687.762 414.775 li
cp
668.414 407.4 mo
558.709 415.464 li
556.314 415.641 554.204 416.786 552.737 418.486 cv
551.323 420.124 550.51 422.294 550.618 424.617 cv
550.636 424.768 550.647 424.922 550.651 425.078 cv
550.879 427.379 552.007 429.405 553.654 430.826 cv
555.347 432.289 557.609 433.109 560.021 432.932 cv
669.726 424.868 li
672.121 424.691 674.231 423.546 675.698 421.846 cv
677.112 420.208 677.925 418.039 677.817 415.715 cv
677.799 415.564 677.788 415.411 677.784 415.254 cv
677.556 412.953 676.428 410.927 674.782 409.506 cv
673.088 408.044 670.826 407.223 668.414 407.4 cv
cp
558.004 405.505 mo
667.71 397.441 li
672.839 397.064 677.665 398.826 681.304 401.968 cv
684.938 405.105 687.385 409.626 687.762 414.774 cv
687.762 414.78 li
688.138 419.904 686.376 424.729 683.236 428.368 cv
680.101 432 675.578 434.448 670.43 434.826 cv
560.725 442.891 li
555.596 443.268 550.769 441.505 547.132 438.364 cv
543.497 435.227 541.05 430.706 540.673 425.558 cv
540.673 425.553 li
540.297 420.428 542.059 415.602 545.199 411.964 cv
548.334 408.332 552.857 405.883 558.004 405.505 cv
cp
.168627 .0352941 .219608 rgb
ef
1323.72 636.246 mo
1310.68 1121.8 li
1333.29 1141.74 li
1770.6 1144.84 li
1779.97 669.057 li
1752.24 641.517 li
1720.79 641.517 li
1702.63 622.964 li
1323.72 636.246 li
.278431 .4 1 rgb
ef
1526.54 799.776 mo
1376.42 802.677 li
1373.59 933.885 li
1370.77 1065.08 li
1520.96 1065.17 li
1675.05 1065.26 li
1677.51 930.774 li
1679.95 796.811 li
1526.54 799.776 li
1371.52 792.809 mo
1526.38 789.818 li
1684.94 786.752 li
1687.69 786.71 1689.96 788.904 1690 791.654 cv
1690 791.81 li
1687.46 930.93 li
1684.92 1070.32 li
1684.88 1073.05 1682.66 1075.23 1679.94 1075.23 cv
1627.09 1075.23 1573.93 1075.16 1520.96 1075.13 cv
1365.68 1075.03 li
1362.93 1075.03 1360.7 1072.8 1360.7 1070.05 cv
1360.71 1069.96 li
1360.7 1069.96 li
1363.64 933.689 li
1366.56 797.692 li
1366.61 794.982 1368.82 792.821 1371.52 792.809 cv
.168627 .0352941 .219608 rgb
ef
1514.11 1105.6 mo
1529.5 1094.18 li
1544.89 1082.75 li
1514.11 1082.75 li
1483.33 1082.75 li
1498.72 1094.18 li
1514.11 1105.6 li
cp
ef
1407.9 747.153 mo
1387.2 747.153 1369.94 730.572 1369.26 709.733 cv
1369.26 709.732 li
1368.57 688.473 1385.4 670.518 1406.66 669.829 cv
1644.82 662.115 li
1645.24 662.101 1645.66 662.095 1646.08 662.095 cv
1666.78 662.095 1684.05 678.675 1684.72 699.515 cv
1684.72 699.516 li
1685.41 720.775 1668.58 738.73 1647.32 739.419 cv
1409.16 747.132 li
1408.74 747.146 1408.32 747.153 1407.9 747.153 cv
.247059 .290196 .764706 rgb
f
471.737 1572.07 mo
456.307 1572.07 442.956 1560.54 441.116 1544.45 cv
403.429 1215.19 365.743 885.914 328.329 556.614 cv
346.19 713.811 364.245 872.066 382.425 1031.17 cv
401.839 1201.08 421.411 1372.29 441.116 1544.45 cv
442.956 1560.54 456.307 1572.07 471.737 1572.07 cv
473.182 1572.07 474.647 1571.97 476.121 1571.76 cv
975.468 1500.4 li
975.468 1500.4 1014.14 1496.77 1046.72 1469.9 cv
1159.38 1362.58 li
1159.38 1362.58 li
1046.72 1469.9 li
1014.14 1496.77 975.468 1500.4 975.468 1500.4 cv
476.121 1571.76 li
474.647 1571.97 473.182 1572.07 471.737 1572.07 cv
.219608 .709804 .615686 rgb
f
471.737 1572.07 mo
456.307 1572.07 442.956 1560.54 441.116 1544.45 cv
421.411 1372.29 401.839 1201.08 382.425 1031.17 cv
364.245 872.066 346.19 713.811 328.329 556.614 cv
327.238 547.017 326.148 537.422 325.058 527.824 cv
325.058 527.824 li
325.058 527.824 324.995 527.218 324.995 526.15 cv
324.992 521.401 326.226 507.522 339.746 497.225 cv
458.966 395.626 li
460.42 408.367 461.864 421.014 463.291 433.516 cv
464.157 441.332 465.156 450.358 466.29 460.592 cv
330.38 574.425 li
333.249 599.897 li
469.171 486.132 li
469.211 486.129 469.257 486.126 469.297 486.123 cv
534.586 1058.04 569.635 1365.06 574.449 1407.23 cv
574.449 1407.23 574.45 1407.24 574.451 1407.24 cv
574.523 1407.87 574.588 1408.45 574.646 1408.96 cv
574.648 1408.97 574.649 1408.98 574.651 1409 cv
574.658 1409.06 574.666 1409.13 574.673 1409.19 cv
574.679 1409.24 574.684 1409.29 574.69 1409.34 cv
574.73 1409.69 574.766 1410.01 574.799 1410.29 cv
574.799 1410.29 574.799 1410.3 574.799 1410.3 cv
574.815 1410.44 574.83 1410.57 574.844 1410.69 cv
574.845 1410.7 574.846 1410.71 574.848 1410.72 cv
574.867 1410.89 574.885 1411.04 574.901 1411.19 cv
574.904 1411.22 574.908 1411.25 574.911 1411.28 cv
574.912 1411.29 574.913 1411.29 574.914 1411.3 cv
574.921 1411.36 574.927 1411.41 574.933 1411.46 cv
574.933 1411.47 574.934 1411.47 574.934 1411.48 cv
574.937 1411.5 574.939 1411.52 574.942 1411.55 cv
574.948 1411.6 574.954 1411.65 574.959 1411.7 cv
574.96 1411.7 574.96 1411.7 574.96 1411.71 cv
574.961 1411.71 574.961 1411.72 574.962 1411.72 cv
574.963 1411.73 574.964 1411.74 574.965 1411.75 cv
574.966 1411.76 574.968 1411.77 574.969 1411.79 cv
574.97 1411.79 574.971 1411.8 574.972 1411.81 cv
574.974 1411.82 574.976 1411.84 574.978 1411.86 cv
574.978 1411.86 574.979 1411.87 574.98 1411.88 cv
574.984 1411.91 574.988 1411.95 574.991 1411.98 cv
574.992 1411.98 574.992 1411.98 574.992 1411.99 cv
574.994 1412.01 574.996 1412.02 574.998 1412.04 cv
574.999 1412.04 574.999 1412.05 574.999 1412.05 cv
575.004 1412.09 575.007 1412.12 575.011 1412.15 cv
575.011 1412.15 li
575.011 1412.15 575.011 1412.15 575.011 1412.15 cv
575.012 1412.16 575.012 1412.16 575.013 1412.17 cv
575.014 1412.17 575.014 1412.18 575.015 1412.19 cv
575.016 1412.19 575.017 1412.2 575.018 1412.21 cv
575.018 1412.21 575.018 1412.21 575.018 1412.21 cv
575.018 1412.21 575.018 1412.21 575.018 1412.22 cv
575.019 1412.22 575.019 1412.22 575.019 1412.22 cv
575.019 1412.22 575.02 1412.23 575.02 1412.23 cv
575.02 1412.23 575.02 1412.23 575.02 1412.23 cv
575.022 1412.25 575.023 1412.26 575.023 1412.26 cv
578.806 1430.49 589.694 1439.61 607.684 1439.61 cv
608.454 1439.61 609.234 1439.6 610.029 1439.56 cv
610.029 1439.56 li
610.151 1439.55 610.292 1439.53 610.413 1439.51 cv
610.516 1439.49 610.626 1439.48 610.729 1439.46 cv
794.426 1413.21 927.349 1394.21 1009.54 1382.47 cv
1009.54 1382.47 1009.54 1382.47 1009.54 1382.47 cv
1009.54 1382.47 1041.33 1377.92 1104.89 1368.84 cv
1104.93 1368.83 1104.97 1368.83 1105.01 1368.82 cv
1105.63 1368.73 1106.27 1368.64 1106.9 1368.55 cv
1106.9 1368.55 1106.91 1368.55 1106.92 1368.55 cv
1107 1368.54 1107.09 1368.53 1107.17 1368.51 cv
1107.17 1368.51 1107.17 1368.51 1107.18 1368.51 cv
1107.19 1368.51 1107.21 1368.51 1107.23 1368.51 cv
1107.24 1368.5 1107.25 1368.5 1107.26 1368.5 cv
1107.26 1368.5 1107.27 1368.5 1107.28 1368.5 cv
1107.29 1368.5 1107.31 1368.49 1107.33 1368.49 cv
1107.33 1368.49 1107.33 1368.49 1107.34 1368.49 cv
1107.35 1368.49 1107.37 1368.49 1107.39 1368.48 cv
1107.39 1368.48 1107.4 1368.48 1107.4 1368.48 cv
1107.41 1368.48 1107.42 1368.48 1107.44 1368.48 cv
1107.47 1368.47 1107.51 1368.47 1107.54 1368.46 cv
1107.54 1368.46 li
1107.79 1368.43 1108.03 1368.39 1108.27 1368.36 cv
1108.28 1368.36 1108.28 1368.36 1108.28 1368.36 cv
1108.47 1368.33 1108.66 1368.3 1108.85 1368.27 cv
1108.86 1368.27 1108.86 1368.27 1108.86 1368.27 cv
1108.87 1368.27 1108.87 1368.27 1108.88 1368.27 cv
1108.88 1368.27 1108.89 1368.27 1108.9 1368.27 cv
1108.9 1368.27 1108.91 1368.27 1108.91 1368.27 cv
1108.91 1368.27 1108.92 1368.26 1108.92 1368.26 cv
1108.98 1368.26 1109.04 1368.25 1109.09 1368.24 cv
1109.1 1368.24 1109.1 1368.24 1109.11 1368.24 cv
1109.12 1368.24 1109.13 1368.23 1109.14 1368.23 cv
1109.14 1368.23 1109.15 1368.23 1109.15 1368.23 cv
1109.15 1368.23 1109.16 1368.23 1109.16 1368.23 cv
1109.16 1368.23 1109.17 1368.23 1109.17 1368.23 cv
1109.17 1368.23 1109.18 1368.23 1109.18 1368.23 cv
1109.18 1368.23 1109.19 1368.23 1109.19 1368.23 cv
1109.2 1368.22 1109.21 1368.22 1109.22 1368.22 cv
1109.22 1368.22 1109.22 1368.22 1109.22 1368.22 cv
1109.23 1368.22 1109.24 1368.22 1109.25 1368.22 cv
1109.25 1368.22 1109.25 1368.22 1109.26 1368.22 cv
1109.26 1368.21 1109.27 1368.21 1109.28 1368.21 cv
1109.28 1368.21 li
1109.3 1368.21 1109.32 1368.21 1109.34 1368.2 cv
1109.34 1368.2 li
1109.35 1368.2 1109.37 1368.2 1109.37 1368.2 cv
1109.37 1368.2 li
1142.71 1364.45 1159.38 1362.58 1159.38 1362.58 cv
1046.72 1469.9 li
1014.14 1496.77 975.468 1500.4 975.468 1500.4 cv
476.121 1571.76 li
474.647 1571.97 473.182 1572.07 471.737 1572.07 cv
466.29 460.592 mo
466.29 460.592 466.32 460.59 466.382 460.586 cv
466.382 460.586 li
466.29 460.592 li
.74902 .176471 .368627 rgb
f
333.249 599.897 mo
330.38 574.425 li
466.29 460.592 li
466.29 460.592 li
466.29 460.592 li
466.382 460.586 li
467.359 469.151 468.332 477.674 469.297 486.123 cv
469.257 486.126 469.211 486.129 469.171 486.132 cv
333.249 599.897 li
.572549 .133333 .32549 rgb
f
1195.57 1319.44 mo
1208 1300.97 1215.84 1283.68 1220.65 1268.08 cv
1215.38 1288.02 1207.02 1305.13 1195.57 1319.44 cv
.219608 .709804 .615686 rgb
f
1009.54 1382.47 mo
1037.03 1349.28 1061.79 1319.39 1083.82 1292.8 cv
1106.74 1313.28 li
1108.2 1314.59 1110.03 1315.23 1111.86 1315.23 cv
1113.98 1315.23 1116.09 1314.37 1117.61 1312.67 cv
1117.61 1312.67 li
1120.43 1309.51 1120.15 1304.62 1117 1301.8 cv
1093.64 1280.94 li
1096.27 1277.76 1098.85 1274.65 1101.4 1271.58 cv
1125.09 1292.75 li
1126.55 1294.05 1128.38 1294.69 1130.21 1294.69 cv
1132.33 1294.69 1134.44 1293.83 1135.96 1292.13 cv
1135.96 1292.13 li
1138.78 1288.97 1138.5 1284.09 1135.35 1281.27 cv
1111.22 1259.71 li
1113.86 1256.53 1116.44 1253.42 1118.98 1250.35 cv
1143.44 1272.21 li
1144.9 1273.51 1146.73 1274.15 1148.56 1274.15 cv
1150.68 1274.15 1152.79 1273.29 1154.31 1271.59 cv
1154.31 1271.59 li
1157.13 1268.44 1156.85 1263.55 1153.7 1260.73 cv
1128.8 1238.49 li
1131.45 1235.3 1134.03 1232.18 1136.56 1229.13 cv
1161.79 1251.67 li
1163.25 1252.97 1165.08 1253.62 1166.91 1253.62 cv
1169.03 1253.62 1171.14 1252.75 1172.65 1251.06 cv
1172.66 1251.06 li
1175.48 1247.9 1175.2 1243.01 1172.04 1240.19 cv
1146.39 1217.26 li
1149.05 1214.05 1151.63 1210.93 1154.14 1207.9 cv
1180.14 1231.13 li
1181.6 1232.43 1183.43 1233.08 1185.26 1233.08 cv
1187.38 1233.08 1189.49 1232.21 1191.01 1230.52 cv
1191.01 1230.52 li
1193.83 1227.36 1193.55 1222.47 1190.4 1219.65 cv
1163.97 1196.04 li
1182.18 1174.05 1195.72 1157.71 1204.57 1147.02 cv
1207.81 1172.36 1211.05 1197.69 1214.29 1223.03 cv
1216.59 1244.37 1215.96 1281.68 1188.45 1326.69 cv
1192.37 1322.52 1196.04 1318.11 1199.45 1313.48 cv
1209.65 1297.25 1216.35 1281.98 1220.65 1268.07 cv
1220.65 1268.07 li
1220.65 1268.07 1220.65 1268.07 1220.65 1268.06 cv
1220.65 1268.07 1220.65 1268.07 1220.65 1268.08 cv
1215.84 1283.68 1208 1300.97 1195.57 1319.44 cv
1175.93 1343.98 1147.2 1360.24 1109.37 1368.2 cv
1109.37 1368.2 li
1109.37 1368.2 1109.36 1368.2 1109.34 1368.2 cv
1109.34 1368.2 1109.35 1368.2 1109.34 1368.2 cv
1109.33 1368.21 1109.31 1368.21 1109.28 1368.21 cv
1109.28 1368.21 li
1109.27 1368.21 1109.27 1368.21 1109.26 1368.22 cv
1109.25 1368.22 li
1109.24 1368.22 1109.23 1368.22 1109.22 1368.22 cv
1109.22 1368.22 1109.22 1368.22 1109.22 1368.22 cv
1109.21 1368.22 1109.2 1368.22 1109.19 1368.23 cv
1109.18 1368.23 1109.18 1368.23 1109.18 1368.23 cv
1109.18 1368.23 1109.17 1368.23 1109.17 1368.23 cv
1109.16 1368.23 1109.17 1368.23 1109.16 1368.23 cv
1109.16 1368.23 1109.15 1368.23 1109.15 1368.23 cv
1109.14 1368.23 li
1109.13 1368.23 1109.12 1368.24 1109.11 1368.24 cv
1109.1 1368.24 1109.1 1368.24 1109.09 1368.24 cv
1109.04 1368.25 1108.99 1368.25 1108.92 1368.26 cv
1108.92 1368.26 1108.91 1368.27 1108.91 1368.27 cv
1108.91 1368.27 1108.9 1368.27 1108.9 1368.27 cv
1108.89 1368.27 1108.89 1368.27 1108.88 1368.27 cv
1108.87 1368.27 1108.87 1368.27 1108.86 1368.27 cv
1108.86 1368.27 1108.86 1368.27 1108.85 1368.27 cv
1108.7 1368.3 1108.51 1368.32 1108.28 1368.36 cv
1108.28 1368.36 1108.28 1368.36 1108.27 1368.36 cv
1108.06 1368.39 1107.82 1368.42 1107.54 1368.46 cv
1107.54 1368.46 li
1107.51 1368.47 1107.47 1368.47 1107.44 1368.48 cv
1107.42 1368.48 1107.41 1368.48 1107.4 1368.48 cv
1107.4 1368.48 1107.39 1368.48 1107.39 1368.48 cv
1107.37 1368.49 1107.35 1368.49 1107.34 1368.49 cv
1107.33 1368.49 1107.33 1368.49 1107.33 1368.49 cv
1107.31 1368.49 1107.29 1368.5 1107.28 1368.5 cv
1107.27 1368.5 1107.26 1368.5 1107.26 1368.5 cv
1107.25 1368.5 1107.23 1368.51 1107.23 1368.51 cv
1107.21 1368.51 1107.19 1368.51 1107.18 1368.51 cv
1107.17 1368.51 1107.17 1368.51 1107.17 1368.51 cv
1107.09 1368.53 1107.01 1368.54 1106.92 1368.55 cv
1106.91 1368.55 1106.91 1368.55 1106.9 1368.55 cv
1106.36 1368.63 1105.73 1368.72 1105.01 1368.82 cv
1104.97 1368.83 1104.93 1368.83 1104.89 1368.84 cv
1093.77 1370.43 1061.99 1374.97 1009.54 1382.47 cv
.74902 .176471 .368627 rgb
f
1111.86 1315.23 mo
1110.03 1315.23 1108.2 1314.59 1106.74 1313.28 cv
1083.82 1292.8 li
1087.15 1288.77 1090.43 1284.81 1093.64 1280.94 cv
1117 1301.8 li
1120.15 1304.62 1120.43 1309.51 1117.61 1312.67 cv
1117.61 1312.67 li
1116.09 1314.37 1113.98 1315.23 1111.86 1315.23 cv
.168627 .0352941 .219608 rgb
f
1130.21 1294.69 mo
1128.38 1294.69 1126.55 1294.05 1125.09 1292.75 cv
1101.4 1271.58 li
1104.74 1267.54 1108.03 1263.57 1111.22 1259.71 cv
1135.35 1281.27 li
1138.5 1284.09 1138.78 1288.97 1135.96 1292.13 cv
1135.96 1292.13 li
1134.44 1293.83 1132.33 1294.69 1130.21 1294.69 cv
f
1148.56 1274.15 mo
1146.73 1274.15 1144.9 1273.51 1143.44 1272.21 cv
1118.98 1250.35 li
1122.34 1246.29 1125.61 1242.34 1128.8 1238.49 cv
1153.7 1260.73 li
1156.85 1263.55 1157.13 1268.44 1154.31 1271.59 cv
1154.31 1271.59 li
1152.79 1273.29 1150.68 1274.15 1148.56 1274.15 cv
f
1166.91 1253.62 mo
1165.08 1253.62 1163.25 1252.97 1161.79 1251.67 cv
1136.56 1229.13 li
1139.94 1225.05 1143.22 1221.09 1146.39 1217.26 cv
1172.04 1240.19 li
1175.2 1243.01 1175.48 1247.9 1172.66 1251.06 cv
1172.65 1251.06 li
1171.14 1252.75 1169.03 1253.62 1166.91 1253.62 cv
f
1185.26 1233.08 mo
1183.43 1233.08 1181.6 1232.43 1180.14 1231.13 cv
1154.14 1207.9 li
1157.56 1203.78 1160.83 1199.82 1163.97 1196.04 cv
1190.4 1219.65 li
1193.55 1222.47 1193.83 1227.36 1191.01 1230.52 cv
1191.01 1230.52 li
1189.49 1232.21 1187.38 1233.08 1185.26 1233.08 cv
f
1009.54 1382.47 mo
1009.54 1382.47 li
1061.99 1374.97 1093.77 1370.43 1104.89 1368.84 cv
1041.33 1377.92 1009.54 1382.47 1009.54 1382.47 cv
1105.01 1368.82 mo
1105.73 1368.72 1106.36 1368.63 1106.9 1368.55 cv
1106.27 1368.64 1105.63 1368.73 1105.01 1368.82 cv
1106.92 1368.55 mo
1107.01 1368.54 1107.09 1368.53 1107.17 1368.51 cv
1107.09 1368.53 1107 1368.54 1106.92 1368.55 cv
1107.18 1368.51 mo
1107.19 1368.51 1107.21 1368.51 1107.23 1368.51 cv
1107.21 1368.51 1107.19 1368.51 1107.18 1368.51 cv
1107.26 1368.5 mo
1107.26 1368.5 1107.27 1368.5 1107.28 1368.5 cv
1107.27 1368.5 1107.26 1368.5 1107.26 1368.5 cv
1107.33 1368.49 mo
1107.33 1368.49 1107.33 1368.49 1107.34 1368.49 cv
1107.33 1368.49 1107.33 1368.49 1107.33 1368.49 cv
1107.39 1368.48 mo
1107.39 1368.48 1107.4 1368.48 1107.4 1368.48 cv
1107.4 1368.48 1107.39 1368.48 1107.39 1368.48 cv
1107.44 1368.48 mo
1107.47 1368.47 1107.51 1368.47 1107.54 1368.46 cv
1107.51 1368.47 1107.47 1368.47 1107.44 1368.48 cv
1107.54 1368.46 mo
1107.82 1368.42 1108.06 1368.39 1108.27 1368.36 cv
1108.03 1368.39 1107.79 1368.43 1107.54 1368.46 cv
1108.28 1368.36 mo
1108.51 1368.32 1108.7 1368.3 1108.85 1368.27 cv
1108.66 1368.3 1108.47 1368.33 1108.28 1368.36 cv
1108.86 1368.27 mo
1108.87 1368.27 1108.87 1368.27 1108.88 1368.27 cv
1108.87 1368.27 1108.87 1368.27 1108.86 1368.27 cv
1108.9 1368.27 mo
1108.9 1368.27 1108.91 1368.27 1108.91 1368.27 cv
1108.91 1368.27 1108.9 1368.27 1108.9 1368.27 cv
1108.92 1368.26 mo
1108.99 1368.25 1109.04 1368.25 1109.09 1368.24 cv
1109.04 1368.25 1108.98 1368.26 1108.92 1368.26 cv
1109.11 1368.24 mo
1109.12 1368.24 1109.13 1368.23 1109.14 1368.23 cv
1109.13 1368.23 1109.12 1368.24 1109.11 1368.24 cv
1109.15 1368.23 mo
1109.15 1368.23 1109.16 1368.23 1109.16 1368.23 cv
1109.16 1368.23 1109.15 1368.23 1109.15 1368.23 cv
1109.17 1368.23 mo
1109.17 1368.23 1109.18 1368.23 1109.18 1368.23 cv
1109.18 1368.23 1109.17 1368.23 1109.17 1368.23 cv
1109.19 1368.23 mo
1109.2 1368.22 1109.21 1368.22 1109.22 1368.22 cv
1109.21 1368.22 1109.2 1368.22 1109.19 1368.23 cv
1109.22 1368.22 mo
1109.23 1368.22 1109.24 1368.22 1109.25 1368.22 cv
1109.24 1368.22 1109.23 1368.22 1109.22 1368.22 cv
1109.26 1368.22 mo
1109.27 1368.21 1109.27 1368.21 1109.28 1368.21 cv
1109.27 1368.21 1109.26 1368.21 1109.26 1368.22 cv
1109.28 1368.21 mo
1109.31 1368.21 1109.33 1368.21 1109.34 1368.2 cv
1109.32 1368.21 1109.3 1368.21 1109.28 1368.21 cv
1109.34 1368.2 mo
1109.36 1368.2 1109.37 1368.2 1109.37 1368.2 cv
1109.37 1368.2 li
1109.37 1368.2 li
1109.37 1368.2 1109.35 1368.2 1109.34 1368.2 cv
.572549 .133333 .32549 rgb
f
1220.67 1268 mo
1224.84 1252.2 1227.07 1234.63 1227.36 1215.3 cv
1227.07 1234.62 1224.84 1252.18 1220.68 1267.98 cv
1220.67 1267.99 1220.67 1268 1220.67 1268 cv
1227.36 1215.29 mo
1227.36 1215.22 1227.36 1215.14 1227.37 1215.07 cv
1227.36 1215.15 1227.36 1215.21 1227.36 1215.29 cv
1227.37 1215.04 mo
1227.37 1214.97 1227.37 1214.91 1227.37 1214.84 cv
1227.37 1214.9 1227.37 1214.97 1227.37 1215.04 cv
1227.37 1214.78 mo
1227.37 1214.72 1227.37 1214.67 1227.37 1214.61 cv
1227.37 1214.67 1227.37 1214.72 1227.37 1214.78 cv
.74902 .176471 .368627 rgb
f
1227.37 1214.37 mo
1227.37 1214.37 li
1227.37 1214.35 1227.37 1214.35 1227.37 1214.35 cv
1227.37 1214.3 mo
1227.36 1214.27 li
1227.36 1214.28 1227.36 1214.29 1227.37 1214.3 cv
1227.36 1214.26 mo
1227.36 1214.26 li
1227.36 1214.26 1227.36 1214.26 1227.36 1214.26 cv
f
1217.39 1133.92 mo
1217.3 1133.23 1217.21 1132.54 1217.13 1131.86 cv
1217.13 1131.86 1217.13 1131.85 1217.13 1131.85 cv
1217.22 1132.55 1217.3 1133.23 1217.39 1133.92 cv
.219608 .709804 .615686 rgb
f
1227.36 1214.25 mo
1223.95 1186.8 1220.53 1159.36 1217.09 1131.91 cv
1217.11 1131.89 1217.12 1131.87 1217.13 1131.86 cv
1217.21 1132.54 1217.3 1133.23 1217.39 1133.92 cv
1223.79 1185.47 1227.11 1212.25 1227.36 1214.25 cv
.74902 .176471 .368627 rgb
f
607.684 1439.61 mo
589.694 1439.61 578.806 1430.49 575.023 1412.26 cv
575.023 1412.26 575.022 1412.25 575.02 1412.23 cv
575.02 1412.23 575.02 1412.23 575.02 1412.23 cv
575.02 1412.23 575.019 1412.22 575.019 1412.22 cv
575.019 1412.22 575.019 1412.22 575.018 1412.22 cv
575.018 1412.21 575.018 1412.21 575.018 1412.21 cv
575.018 1412.21 575.018 1412.21 575.018 1412.21 cv
575.017 1412.2 575.016 1412.19 575.015 1412.19 cv
575.014 1412.18 575.014 1412.17 575.013 1412.17 cv
575.012 1412.16 575.012 1412.16 575.011 1412.15 cv
575.011 1412.15 575.011 1412.15 575.011 1412.15 cv
575.011 1412.15 li
575.007 1412.12 575.004 1412.09 574.999 1412.05 cv
574.999 1412.05 574.999 1412.04 574.998 1412.04 cv
574.996 1412.02 574.994 1412.01 574.992 1411.99 cv
574.992 1411.98 574.992 1411.98 574.991 1411.98 cv
574.988 1411.95 574.984 1411.91 574.98 1411.88 cv
574.979 1411.87 574.978 1411.87 574.978 1411.86 cv
574.976 1411.84 574.974 1411.83 574.972 1411.81 cv
574.971 1411.8 574.97 1411.79 574.969 1411.79 cv
574.968 1411.77 574.966 1411.76 574.965 1411.75 cv
574.964 1411.74 574.963 1411.73 574.962 1411.72 cv
574.961 1411.71 574.961 1411.71 574.96 1411.71 cv
574.96 1411.7 574.96 1411.7 574.959 1411.7 cv
574.954 1411.65 574.948 1411.6 574.942 1411.55 cv
574.939 1411.52 574.937 1411.5 574.934 1411.48 cv
574.934 1411.47 574.933 1411.47 574.933 1411.46 cv
574.927 1411.41 574.921 1411.36 574.914 1411.3 cv
574.913 1411.3 574.912 1411.29 574.911 1411.28 cv
574.908 1411.25 574.904 1411.22 574.901 1411.19 cv
574.885 1411.04 574.867 1410.89 574.848 1410.72 cv
574.846 1410.71 574.846 1410.7 574.844 1410.69 cv
574.83 1410.57 574.815 1410.43 574.799 1410.3 cv
574.799 1410.3 574.799 1410.29 574.799 1410.29 cv
574.766 1410.01 574.73 1409.69 574.69 1409.34 cv
574.684 1409.29 574.679 1409.24 574.673 1409.19 cv
574.666 1409.13 574.658 1409.06 574.651 1409 cv
574.649 1408.98 574.648 1408.97 574.646 1408.96 cv
574.588 1408.45 574.523 1407.87 574.451 1407.24 cv
574.45 1407.24 574.449 1407.23 574.449 1407.23 cv
572.672 1391.66 566.771 1339.97 556.748 1252.17 cv
574.822 1348.43 658.903 1417.34 755.672 1417.34 cv
759.842 1417.34 764.051 1417.21 768.264 1416.95 cv
768.264 1416.95 715.755 1424.45 610.729 1439.46 cv
610.627 1439.48 610.515 1439.49 610.413 1439.51 cv
610.285 1439.53 610.158 1439.54 610.029 1439.56 cv
610.029 1439.56 li
609.234 1439.6 608.454 1439.61 607.684 1439.61 cv
f
607.684 1439.61 mo
589.694 1439.61 578.806 1430.49 575.023 1412.26 cv
575.023 1412.26 575.022 1412.25 575.02 1412.23 cv
575.022 1412.25 575.023 1412.26 575.023 1412.26 cv
578.806 1430.49 589.694 1439.61 607.684 1439.61 cv
608.454 1439.61 609.234 1439.6 610.029 1439.56 cv
610.029 1439.56 li
610.029 1439.56 li
609.234 1439.6 608.454 1439.61 607.684 1439.61 cv
610.413 1439.51 mo
610.515 1439.49 610.627 1439.48 610.729 1439.46 cv
610.626 1439.48 610.516 1439.49 610.413 1439.51 cv
575.02 1412.23 mo
575.02 1412.23 575.019 1412.22 575.019 1412.22 cv
575.019 1412.22 575.02 1412.23 575.02 1412.23 cv
575.018 1412.22 mo
575.018 1412.21 575.018 1412.21 575.018 1412.21 cv
575.018 1412.21 575.018 1412.21 575.018 1412.22 cv
575.018 1412.21 mo
575.017 1412.2 575.016 1412.19 575.015 1412.19 cv
575.016 1412.19 575.017 1412.2 575.018 1412.21 cv
575.013 1412.17 mo
575.012 1412.16 575.012 1412.16 575.011 1412.15 cv
575.012 1412.16 575.012 1412.16 575.013 1412.17 cv
575.011 1412.15 mo
575.011 1412.15 li
575.011 1412.15 li
574.999 1412.05 mo
574.999 1412.05 574.999 1412.04 574.998 1412.04 cv
574.999 1412.04 574.999 1412.05 574.999 1412.05 cv
574.992 1411.99 mo
574.992 1411.98 574.992 1411.98 574.991 1411.98 cv
574.992 1411.98 574.992 1411.98 574.992 1411.99 cv
574.98 1411.88 mo
574.979 1411.87 574.978 1411.86 574.978 1411.86 cv
574.978 1411.87 574.979 1411.87 574.98 1411.88 cv
574.972 1411.81 mo
574.971 1411.8 574.97 1411.79 574.969 1411.79 cv
574.97 1411.79 574.971 1411.8 574.972 1411.81 cv
574.965 1411.75 mo
574.964 1411.74 574.963 1411.73 574.962 1411.72 cv
574.963 1411.73 574.964 1411.74 574.965 1411.75 cv
574.96 1411.71 mo
574.96 1411.7 574.96 1411.7 574.959 1411.7 cv
574.96 1411.7 574.96 1411.7 574.96 1411.71 cv
574.942 1411.55 mo
574.939 1411.52 574.937 1411.5 574.934 1411.48 cv
574.937 1411.5 574.939 1411.52 574.942 1411.55 cv
574.933 1411.46 mo
574.927 1411.41 574.921 1411.36 574.914 1411.3 cv
574.921 1411.36 574.927 1411.41 574.933 1411.46 cv
574.911 1411.28 mo
574.908 1411.25 574.904 1411.22 574.901 1411.19 cv
574.904 1411.22 574.908 1411.25 574.911 1411.28 cv
574.848 1410.72 mo
574.846 1410.71 574.845 1410.7 574.844 1410.69 cv
574.846 1410.7 574.846 1410.71 574.848 1410.72 cv
574.799 1410.3 mo
574.799 1410.3 574.799 1410.29 574.799 1410.29 cv
574.799 1410.29 574.799 1410.3 574.799 1410.3 cv
574.69 1409.34 mo
574.684 1409.29 574.679 1409.24 574.673 1409.19 cv
574.679 1409.24 574.684 1409.29 574.69 1409.34 cv
574.651 1409 mo
574.649 1408.98 574.648 1408.97 574.646 1408.96 cv
574.648 1408.97 574.649 1408.98 574.651 1409 cv
574.451 1407.24 mo
574.45 1407.24 574.449 1407.23 574.449 1407.23 cv
574.449 1407.23 574.45 1407.24 574.451 1407.24 cv
.572549 .133333 .32549 rgb
f
581.083 978.587 mo
569.289 978.587 562.475 972.663 561.501 959.044 cv
564.514 964.299 568.749 968.648 579.942 968.648 cv
581.475 968.648 583.14 968.566 584.949 968.394 cv
658.492 961.401 731.565 954.31 803.87 947.366 cv
875.584 940.48 946.717 933.595 1017.26 926.753 cv
1054.07 923.183 1085.46 904.9 1106.45 878.387 cv
1123.09 857.373 1132.34 831.395 1133.41 803.131 cv
1134.62 835.173 1125.04 864.916 1106.45 888.388 cv
1085.46 914.902 1054.07 933.183 1017.26 936.754 cv
946.717 943.596 875.584 950.48 803.87 957.366 cv
731.565 964.31 658.492 971.399 584.949 978.395 cv
583.606 978.522 582.318 978.587 581.083 978.587 cv
1 .545098 .658823 rgb
f
1094.87 878.064 mo
1094.88 878.063 1094.88 878.061 1094.88 878.059 cv
1095.21 877.688 1095.54 877.318 1095.86 876.943 cv
1095.54 877.319 1095.21 877.693 1094.87 878.064 cv
1095.87 876.93 mo
1095.91 876.886 1095.95 876.841 1095.99 876.797 cv
1095.95 876.842 1095.91 876.886 1095.87 876.93 cv
1097.68 874.812 mo
1097.68 874.81 1097.68 874.809 1097.68 874.808 cv
1097.68 874.809 1097.68 874.81 1097.68 874.812 cv
1097.82 874.647 mo
1097.84 874.626 1097.85 874.606 1097.87 874.586 cv
1097.85 874.606 1097.84 874.626 1097.82 874.647 cv
1097.95 874.491 mo
1097.97 874.459 1098 874.428 1098.03 874.396 cv
1098 874.428 1097.97 874.459 1097.95 874.491 cv
1098.07 874.342 mo
1098.65 873.64 1099.23 872.932 1099.79 872.218 cv
1117.39 849.994 1127.7 821.888 1127.72 791.765 cv
1127.7 821.888 1117.39 849.994 1099.79 872.218 cv
1099.22 872.932 1098.65 873.64 1098.07 874.342 cv
517.378 531.043 mo
517.789 527.276 520.294 524.08 523.831 522.662 cv
520.294 524.081 517.79 527.277 517.379 531.043 cv
517.379 531.043 517.379 531.043 517.378 531.043 cv
523.835 522.66 mo
523.853 522.653 523.871 522.646 523.89 522.638 cv
523.872 522.646 523.853 522.653 523.835 522.66 cv
523.898 522.635 mo
523.916 522.628 523.934 522.621 523.953 522.614 cv
523.935 522.621 523.916 522.628 523.898 522.635 cv
523.958 522.612 mo
524.018 522.588 524.079 522.566 524.14 522.543 cv
524.079 522.565 524.018 522.589 523.958 522.612 cv
524.153 522.539 mo
524.169 522.533 524.184 522.527 524.2 522.522 cv
524.184 522.527 524.169 522.533 524.153 522.539 cv
524.218 522.515 mo
524.231 522.51 524.245 522.506 524.258 522.501 cv
524.245 522.506 524.231 522.51 524.218 522.515 cv
524.28 522.493 mo
524.293 522.489 524.305 522.484 524.317 522.48 cv
524.305 522.484 524.293 522.489 524.28 522.493 cv
524.342 522.472 mo
524.354 522.468 524.365 522.464 524.376 522.46 cv
524.365 522.464 524.354 522.468 524.342 522.472 cv
524.402 522.451 mo
524.415 522.447 524.428 522.443 524.441 522.438 cv
524.428 522.443 524.415 522.447 524.402 522.451 cv
524.462 522.431 mo
524.481 522.425 524.5 522.419 524.519 522.413 cv
524.5 522.419 524.48 522.425 524.462 522.431 cv
524.551 522.402 mo
524.56 522.4 524.569 522.397 524.577 522.394 cv
524.568 522.397 524.56 522.4 524.551 522.402 cv
524.611 522.383 mo
524.619 522.381 524.629 522.378 524.637 522.375 cv
524.628 522.378 524.62 522.381 524.611 522.383 cv
524.671 522.365 mo
524.68 522.362 524.688 522.359 524.697 522.357 cv
524.688 522.359 524.68 522.362 524.671 522.365 cv
524.731 522.346 mo
524.739 522.344 524.747 522.342 524.755 522.339 cv
524.747 522.342 524.739 522.344 524.731 522.346 cv
524.793 522.328 mo
524.799 522.326 524.805 522.325 524.81 522.323 cv
524.804 522.325 524.799 522.326 524.793 522.328 cv
524.853 522.311 mo
524.855 522.31 524.857 522.309 524.86 522.309 cv
524.857 522.309 524.855 522.31 524.853 522.311 cv
525.013 522.266 mo
525.017 522.264 525.021 522.263 525.025 522.262 cv
525.021 522.263 525.017 522.264 525.013 522.266 cv
525.07 522.25 mo
525.075 522.249 525.08 522.248 525.085 522.246 cv
525.08 522.248 525.075 522.249 525.07 522.25 cv
525.13 522.234 mo
525.135 522.233 525.139 522.232 525.143 522.231 cv
525.139 522.232 525.134 522.233 525.13 522.234 cv
525.19 522.219 mo
525.193 522.218 525.197 522.217 525.2 522.216 cv
525.197 522.217 525.194 522.218 525.19 522.219 cv
525.479 522.15 mo
525.48 522.15 525.481 522.149 525.481 522.149 cv
525.48 522.149 525.48 522.149 525.479 522.15 cv
525.534 522.138 mo
525.537 522.137 525.539 522.136 525.542 522.136 cv
525.54 522.136 525.536 522.137 525.534 522.138 cv
525.594 522.125 mo
525.596 522.124 525.598 522.124 525.601 522.123 cv
525.598 522.124 525.596 522.124 525.594 522.125 cv
525.654 522.112 mo
525.655 522.112 525.655 522.112 525.656 522.111 cv
525.655 522.112 525.655 522.112 525.654 522.112 cv
525.944 522.055 mo
525.946 522.055 525.947 522.055 525.949 522.055 cv
525.948 522.055 525.945 522.055 525.944 522.055 cv
526 522.045 mo
526.004 522.045 526.008 522.044 526.012 522.043 cv
526.008 522.044 526.004 522.045 526 522.045 cv
526.062 522.035 mo
526.065 522.034 526.068 522.034 526.07 522.033 cv
526.068 522.034 526.065 522.034 526.062 522.035 cv
526.355 521.989 mo
526.358 521.989 526.362 521.988 526.365 521.988 cv
526.361 521.988 526.359 521.989 526.355 521.989 cv
526.414 521.981 mo
526.418 521.98 526.423 521.98 526.428 521.979 cv
526.423 521.98 526.419 521.98 526.414 521.981 cv
526.474 521.973 mo
526.48 521.972 526.486 521.971 526.492 521.971 cv
526.486 521.971 526.48 521.972 526.474 521.973 cv
526.537 521.965 mo
526.543 521.964 526.548 521.964 526.554 521.963 cv
526.548 521.964 526.543 521.964 526.537 521.965 cv
526.6 521.957 mo
526.604 521.957 526.608 521.956 526.612 521.956 cv
526.608 521.956 526.604 521.957 526.6 521.957 cv
526.768 521.938 mo
526.774 521.938 526.78 521.937 526.786 521.937 cv
526.78 521.937 526.774 521.938 526.768 521.938 cv
526.826 521.933 mo
526.835 521.932 526.844 521.931 526.853 521.93 cv
526.844 521.931 526.835 521.932 526.826 521.933 cv
526.889 521.927 mo
526.898 521.926 526.908 521.925 526.918 521.924 cv
526.908 521.925 526.898 521.926 526.889 521.927 cv
526.953 521.921 mo
526.964 521.92 526.975 521.919 526.986 521.918 cv
526.975 521.919 526.964 521.92 526.953 521.921 cv
527.018 521.915 mo
527.03 521.914 527.043 521.913 527.055 521.912 cv
527.042 521.913 527.03 521.914 527.018 521.915 cv
527.083 521.91 mo
527.105 521.908 527.127 521.907 527.148 521.905 cv
527.127 521.907 527.105 521.908 527.083 521.91 cv
1078.92 483.321 mo
1079.16 483.304 1079.39 483.296 1079.63 483.296 cv
1079.39 483.296 1079.16 483.304 1078.92 483.321 cv
1079.65 483.296 mo
1079.65 483.296 1079.64 483.296 1079.63 483.296 cv
1079.63 483.296 li
1079.64 483.296 1079.65 483.296 1079.65 483.296 cv
f
1094.88 878.059 mo
1114.37 852.021 1124.12 818.454 1119.59 783.186 cv
1113.52 736 1107.52 688.922 1101.47 641.967 cv
1095.43 595.073 1089.45 548.246 1083.44 501.495 cv
1082.74 496.099 1077.95 491.89 1072.6 491.89 cv
1072.36 491.89 1072.12 491.898 1071.88 491.915 cv
982.381 498.242 891.907 504.579 800.53 510.948 cv
708.13 517.39 614.572 523.876 520.116 530.499 cv
519.158 530.567 518.24 530.753 517.379 531.043 cv
517.79 527.277 520.294 524.081 523.831 522.662 cv
523.832 522.661 523.834 522.661 523.835 522.66 cv
523.853 522.653 523.872 522.646 523.89 522.638 cv
523.892 522.637 523.895 522.636 523.898 522.635 cv
523.916 522.628 523.935 522.621 523.953 522.614 cv
523.954 522.613 523.956 522.612 523.958 522.612 cv
524.018 522.589 524.079 522.565 524.14 522.543 cv
524.144 522.542 524.149 522.54 524.153 522.539 cv
524.169 522.533 524.184 522.527 524.2 522.522 cv
524.206 522.52 524.212 522.517 524.218 522.515 cv
524.231 522.51 524.245 522.506 524.258 522.501 cv
524.266 522.498 524.273 522.496 524.28 522.493 cv
524.293 522.489 524.305 522.484 524.317 522.48 cv
524.326 522.477 524.334 522.475 524.342 522.472 cv
524.354 522.468 524.365 522.464 524.376 522.46 cv
524.385 522.457 524.393 522.454 524.402 522.451 cv
524.415 522.447 524.428 522.443 524.441 522.438 cv
524.448 522.436 524.455 522.434 524.462 522.431 cv
524.48 522.425 524.5 522.419 524.519 522.413 cv
524.529 522.409 524.54 522.406 524.551 522.402 cv
524.56 522.4 524.568 522.397 524.577 522.394 cv
524.589 522.39 524.599 522.387 524.611 522.383 cv
524.62 522.381 524.628 522.378 524.637 522.375 cv
524.649 522.372 524.66 522.368 524.671 522.365 cv
524.68 522.362 524.688 522.359 524.697 522.357 cv
524.708 522.353 524.72 522.35 524.731 522.346 cv
524.739 522.344 524.747 522.342 524.755 522.339 cv
524.767 522.336 524.78 522.332 524.793 522.328 cv
524.799 522.326 524.804 522.325 524.81 522.323 cv
524.824 522.319 524.838 522.315 524.853 522.311 cv
524.855 522.31 524.857 522.309 524.86 522.309 cv
524.911 522.294 524.962 522.279 525.013 522.266 cv
525.017 522.264 525.021 522.263 525.025 522.262 cv
525.04 522.258 525.055 522.254 525.07 522.25 cv
525.075 522.249 525.08 522.248 525.085 522.246 cv
525.1 522.242 525.115 522.238 525.13 522.234 cv
525.134 522.233 525.139 522.232 525.143 522.231 cv
525.159 522.227 525.174 522.223 525.19 522.219 cv
525.194 522.218 525.197 522.217 525.2 522.216 cv
525.293 522.193 525.385 522.171 525.479 522.15 cv
525.48 522.149 525.48 522.149 525.481 522.149 cv
525.499 522.145 525.516 522.141 525.534 522.138 cv
525.536 522.137 525.54 522.136 525.542 522.136 cv
525.56 522.132 525.576 522.128 525.594 522.125 cv
525.596 522.124 525.598 522.124 525.601 522.123 cv
525.619 522.119 525.636 522.115 525.654 522.112 cv
525.655 522.112 525.655 522.112 525.656 522.111 cv
525.751 522.092 525.847 522.073 525.944 522.055 cv
525.945 522.055 525.948 522.055 525.949 522.055 cv
525.966 522.051 525.983 522.048 526 522.045 cv
526.004 522.045 526.008 522.044 526.012 522.043 cv
526.029 522.04 526.045 522.038 526.062 522.035 cv
526.065 522.034 526.068 522.034 526.07 522.033 cv
526.165 522.017 526.26 522.003 526.355 521.989 cv
526.359 521.989 526.361 521.988 526.365 521.988 cv
526.381 521.986 526.397 521.983 526.414 521.981 cv
526.419 521.98 526.423 521.98 526.428 521.979 cv
526.444 521.977 526.458 521.975 526.474 521.973 cv
526.48 521.972 526.486 521.971 526.492 521.971 cv
526.507 521.969 526.522 521.967 526.537 521.965 cv
526.543 521.964 526.548 521.964 526.554 521.963 cv
526.569 521.961 526.585 521.959 526.6 521.957 cv
526.604 521.957 526.608 521.956 526.612 521.956 cv
526.664 521.95 526.716 521.944 526.768 521.938 cv
526.774 521.938 526.78 521.937 526.786 521.937 cv
526.799 521.935 526.812 521.934 526.826 521.933 cv
526.835 521.932 526.844 521.931 526.853 521.93 cv
526.865 521.929 526.877 521.928 526.889 521.927 cv
526.898 521.926 526.908 521.925 526.918 521.924 cv
526.93 521.923 526.942 521.922 526.953 521.921 cv
526.964 521.92 526.975 521.919 526.986 521.918 cv
526.996 521.917 527.007 521.916 527.018 521.915 cv
527.03 521.914 527.042 521.913 527.055 521.912 cv
527.064 521.912 527.074 521.911 527.083 521.91 cv
527.105 521.908 527.127 521.907 527.148 521.905 cv
527.148 521.905 li
621.605 515.282 715.162 508.796 807.562 502.355 cv
898.939 495.985 989.413 489.649 1078.92 483.321 cv
1078.92 483.321 li
1079.16 483.304 1079.39 483.296 1079.63 483.296 cv
1079.63 483.296 1079.63 483.296 1079.63 483.296 cv
1079.64 483.296 1079.65 483.296 1079.65 483.296 cv
1084.99 483.307 1089.78 487.512 1090.47 492.901 cv
1096.48 539.652 1102.46 586.48 1108.5 633.373 cv
1114.55 680.328 1120.55 727.407 1126.62 774.593 cv
1127.36 780.371 1127.72 786.104 1127.72 791.765 cv
1127.7 821.888 1117.39 849.994 1099.79 872.218 cv
1099.23 872.932 1098.65 873.64 1098.07 874.342 cv
1098.06 874.36 1098.04 874.378 1098.03 874.396 cv
1098 874.428 1097.97 874.459 1097.95 874.491 cv
1097.92 874.523 1097.9 874.554 1097.87 874.586 cv
1097.85 874.606 1097.84 874.626 1097.82 874.647 cv
1097.77 874.7 1097.73 874.754 1097.68 874.808 cv
1097.68 874.809 1097.68 874.81 1097.68 874.812 cv
1097.12 875.479 1096.56 876.141 1095.99 876.797 cv
1095.95 876.841 1095.91 876.886 1095.87 876.93 cv
1095.87 876.934 1095.87 876.939 1095.86 876.943 cv
1095.54 877.318 1095.21 877.688 1094.88 878.059 cv
.607843 .533333 .54902 rgb
f
1227.63 1223.73 mo
1227.63 1223.72 li
1227.63 1223.73 1227.63 1223.73 1227.63 1223.73 cv
1227.63 1223.65 mo
1227.63 1223.63 1227.63 1223.63 1227.63 1223.61 cv
1227.63 1223.62 1227.63 1223.63 1227.63 1223.65 cv
1227.63 1223.51 mo
1227.63 1223.49 1227.63 1223.47 1227.63 1223.45 cv
1227.63 1223.47 1227.63 1223.49 1227.63 1223.51 cv
1227.63 1223.43 mo
1227.63 1223.41 1227.63 1223.38 1227.63 1223.35 cv
1227.63 1223.38 1227.63 1223.41 1227.63 1223.43 cv
1227.63 1223.32 mo
1227.63 1223.29 1227.63 1223.26 1227.63 1223.23 cv
1227.63 1223.26 1227.63 1223.29 1227.63 1223.32 cv
1227.63 1223.22 mo
1227.63 1223.19 1227.63 1223.15 1227.63 1223.12 cv
1227.63 1223.15 1227.63 1223.19 1227.63 1223.22 cv
1227.63 1223.11 mo
1227.63 1220.77 1227.58 1218.54 1227.48 1216.41 cv
1227.48 1216.4 1227.48 1216.38 1227.48 1216.37 cv
1227.48 1216.36 1227.48 1216.35 1227.48 1216.34 cv
1227.45 1215.67 1227.41 1215.02 1227.37 1214.37 cv
1227.54 1217.1 1227.63 1220.02 1227.63 1223.11 cv
.545098 1 .870588 rgb
f
1220.65 1268.06 mo
1220.66 1268.04 1220.67 1268 1220.68 1267.98 cv
1227.01 1247.42 1228.09 1229.82 1227.48 1216.41 cv
1227.58 1218.54 1227.63 1220.77 1227.63 1223.11 cv
1227.63 1223.12 1227.63 1223.12 1227.63 1223.12 cv
1227.63 1223.15 1227.63 1223.19 1227.63 1223.22 cv
1227.63 1223.22 1227.63 1223.23 1227.63 1223.23 cv
1227.63 1223.26 1227.63 1223.29 1227.63 1223.32 cv
1227.63 1223.33 1227.63 1223.34 1227.63 1223.35 cv
1227.63 1223.38 1227.63 1223.41 1227.63 1223.43 cv
1227.63 1223.44 1227.63 1223.44 1227.63 1223.45 cv
1227.63 1223.47 1227.63 1223.49 1227.63 1223.51 cv
1227.63 1223.54 1227.63 1223.58 1227.63 1223.61 cv
1227.63 1223.63 1227.63 1223.63 1227.63 1223.65 cv
1227.63 1223.67 1227.63 1223.7 1227.63 1223.72 cv
1227.63 1223.73 li
1227.56 1236.01 1225.91 1251.02 1220.65 1268.06 cv
1227.48 1216.37 mo
1227.48 1216.36 1227.48 1216.35 1227.48 1216.34 cv
1227.48 1216.35 1227.48 1216.36 1227.48 1216.37 cv
1227.36 1215.3 mo
1227.36 1215.29 1227.36 1215.29 1227.36 1215.29 cv
1227.36 1215.29 1227.36 1215.29 1227.36 1215.3 cv
1227.37 1215.07 mo
1227.37 1215.06 1227.37 1215.05 1227.37 1215.04 cv
1227.37 1215.05 1227.37 1215.06 1227.37 1215.07 cv
1227.37 1214.84 mo
1227.37 1214.82 1227.37 1214.8 1227.37 1214.78 cv
1227.37 1214.8 1227.37 1214.82 1227.37 1214.84 cv
1 .545098 .658823 rgb
f
1227.37 1214.38 mo
1227.37 1214.38 li
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 li
1227.37 1214.37 1227.37 1214.37 1227.37 1214.38 cv
.545098 1 .870588 rgb
f
1227.37 1214.61 mo
1227.37 1214.53 1227.37 1214.45 1227.37 1214.37 cv
1227.37 1214.38 1227.37 1214.38 1227.37 1214.38 cv
1227.37 1214.45 1227.37 1214.53 1227.37 1214.61 cv
1 .545098 .658823 rgb
f
1227.37 1214.37 mo
1227.37 1214.37 li
1227.37 1214.37 li
1227.37 1214.37 li
1227.37 1214.37 li
1227.37 1214.37 mo
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 li
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
.545098 1 .870588 rgb
f
1227.37 1214.37 mo
1227.37 1214.37 1227.37 1214.36 1227.37 1214.35 cv
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.35 mo
1227.37 1214.34 1227.37 1214.32 1227.37 1214.3 cv
1227.37 1214.33 1227.37 1214.34 1227.37 1214.37 cv
1227.36 1214.27 mo
1227.36 1214.27 1227.36 1214.26 1227.36 1214.26 cv
1227.36 1214.27 li
1227.36 1214.26 mo
1227.36 1214.25 1227.36 1214.25 1227.36 1214.25 cv
1227.36 1214.27 1227.36 1214.24 1227.36 1214.26 cv
1 .545098 .658823 rgb
f
1214.75 1113.3 mo
1200.88 1004.89 1187.07 896.978 1173.38 789.451 cv
1160.86 691.164 1148.33 593.131 1135.87 495.509 cv
1162.18 701.427 1188.88 907.324 1214.75 1113.3 cv
.545098 1 .870588 rgb
f
1204.57 1147.02 mo
1174.65 913.062 1144.77 679.072 1114.95 445.089 cv
1129.03 444.085 li
1129.12 444.078 1129.22 444.07 1129.31 444.058 cv
1131.49 461.201 1133.68 478.367 1135.87 495.509 cv
1148.33 593.131 1160.86 691.164 1173.38 789.451 cv
1187.07 896.978 1200.88 1004.89 1214.75 1113.3 cv
1215.53 1119.49 1216.31 1125.72 1217.09 1131.91 cv
1216.61 1132.49 1212.44 1137.52 1204.57 1147.02 cv
1 .545098 .658823 rgb
f
1227.37 1214.38 mo
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 li
1227.37 1214.37 li
.533333 .827451 .768627 rgb
f
1188.45 1326.69 mo
1215.96 1281.68 1216.59 1244.37 1214.29 1223.03 cv
1211.05 1197.69 1207.81 1172.36 1204.57 1147.02 cv
1212.44 1137.52 1216.61 1132.49 1217.09 1131.91 cv
1220.53 1159.36 1223.95 1186.8 1227.36 1214.25 cv
1227.36 1214.25 1227.36 1214.25 1227.36 1214.26 cv
1227.36 1214.26 li
1227.36 1214.26 1227.36 1214.27 1227.36 1214.27 cv
1227.37 1214.3 li
1227.37 1214.32 1227.37 1214.34 1227.37 1214.35 cv
1227.37 1214.37 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.36 1227.37 1214.37 1227.37 1214.37 cv
1227.37 1214.37 1227.37 1214.37 1227.37 1214.38 cv
1227.37 1214.45 1227.37 1214.53 1227.37 1214.61 cv
1227.37 1214.67 1227.37 1214.72 1227.37 1214.78 cv
1227.37 1214.8 1227.37 1214.82 1227.37 1214.84 cv
1227.37 1214.91 1227.37 1214.97 1227.37 1215.04 cv
1227.37 1215.05 1227.37 1215.06 1227.37 1215.07 cv
1227.36 1215.14 1227.36 1215.22 1227.36 1215.29 cv
1227.36 1215.29 1227.36 1215.29 1227.36 1215.3 cv
1227.07 1234.63 1224.84 1252.2 1220.67 1268 cv
1220.67 1268 1220.67 1267.99 1220.68 1267.98 cv
1220.67 1268 1220.66 1268.04 1220.65 1268.06 cv
1220.65 1268.07 1220.65 1268.07 1220.65 1268.07 cv
1220.67 1268 li
1220.65 1268.07 li
1220.65 1268.07 li
1216.35 1281.98 1209.65 1297.25 1199.45 1313.48 cv
1196.04 1318.11 1192.37 1322.52 1188.45 1326.69 cv
1220.65 1268.07 mo
1220.65 1268.07 li
1220.65 1268.07 li
.85098 .505882 .619608 rgb
f
1078.04 351.956 mo
1078.04 351.955 li
1081.63 351.697 1085.23 351.437 1088.82 351.177 cv
1085.23 351.437 1081.63 351.697 1078.04 351.956 cv
.545098 1 .870588 rgb
f
1110.43 409.63 mo
1109.76 404.416 1109.1 399.202 1108.43 393.989 cv
1105.99 374.806 1099.37 366.607 1081.42 366.607 cv
1080.89 366.607 1080.34 366.614 1079.79 366.629 cv
1078.04 351.956 li
1081.63 351.697 1085.23 351.437 1088.82 351.177 cv
1088.82 351.177 li
1089.49 351.129 1090.16 351.105 1090.83 351.105 cv
1105.65 351.105 1118.97 362.933 1120.93 378.364 cv
1120.93 378.364 li
1120.93 378.364 li
1121.3 381.227 1121.66 384.09 1122.03 386.953 cv
1122.36 389.55 1122.69 392.148 1123.02 394.746 cv
1123.17 395.895 1123.31 397.043 1123.46 398.193 cv
1123.9 401.663 1124.34 405.133 1124.79 408.606 cv
1124.79 408.606 li
1110.43 409.63 li
1124.79 408.606 mo
1124.79 408.606 li
1124.79 408.606 li
1124.79 408.606 mo
1124.79 408.606 li
1124.34 405.135 1123.9 401.663 1123.46 398.193 cv
1123.46 398.193 li
1123.9 401.663 1124.34 405.135 1124.79 408.606 cv
1124.79 408.606 li
1123.46 398.193 mo
1123.31 397.043 1123.17 395.895 1123.02 394.746 cv
1123.09 395.309 1123.16 395.873 1123.24 396.436 cv
1123.31 397.021 1123.39 397.607 1123.46 398.193 cv
1123.02 394.746 mo
1123.02 394.746 li
1122.69 392.148 1122.36 389.55 1122.03 386.953 cv
1122.03 386.953 li
1122.36 389.55 1122.69 392.148 1123.02 394.746 cv
1 .545098 .658823 rgb
f
1121.44 382.307 mo
1121.27 380.993 1121.1 379.677 1120.93 378.364 cv
1121.1 379.678 1121.27 380.993 1121.44 382.307 cv
.545098 1 .870588 rgb
f
1122.03 386.953 mo
1121.66 384.09 1121.3 381.227 1120.93 378.364 cv
1120.93 378.364 li
1121.1 379.677 1121.27 380.993 1121.44 382.307 cv
1121.63 383.856 1121.83 385.404 1122.03 386.953 cv
1 .545098 .658823 rgb
f
1019.43 356.166 mo
1027.75 355.568 1036.06 354.971 1044.38 354.372 cv
1044.38 354.378 li
1036.07 354.974 1027.75 355.57 1019.43 356.166 cv
.545098 1 .870588 rgb
f
529.63 405.461 mo
527.968 390.825 li
691.791 379.414 855.632 367.927 1019.43 356.166 cv
1027.75 355.57 1036.07 354.974 1044.38 354.378 cv
1044.41 354.677 li
1046.01 368.987 li
873.908 381.374 701.766 393.465 529.63 405.461 cv
1 .545098 .658823 rgb
f
461.673 395.438 mo
481.075 394.084 492.969 393.254 497.36 392.948 cv
485.48 393.779 473.589 394.609 461.673 395.438 cv
.545098 1 .870588 rgb
f
466.382 460.586 mo
465.358 451.621 464.329 442.607 463.291 433.516 cv
460.493 408.25 459.095 395.618 459.095 395.618 cv
459.968 395.557 460.828 395.497 461.673 395.438 cv
473.589 394.609 485.48 393.779 497.36 392.948 cv
498.644 392.858 499.286 392.813 499.286 392.813 cv
499.286 392.813 li
500.864 406.718 li
474.751 408.859 li
478.646 443.007 480.527 459.484 480.537 459.576 cv
471.243 460.239 li
468.391 460.442 466.77 460.558 466.382 460.586 cv
1 .545098 .658823 rgb
f
471.243 460.239 mo
480.537 459.576 li
480.537 459.576 480.537 459.576 480.537 459.576 cv
476.639 459.854 473.541 460.075 471.243 460.239 cv
500.864 406.718 mo
499.286 392.813 li
500.339 402.084 500.864 406.718 500.864 406.718 cv
500.864 406.718 li
.85098 .505882 .619608 rgb
f
466.29 460.592 mo
465.156 450.358 464.157 441.332 463.291 433.516 cv
464.329 442.607 465.358 451.621 466.382 460.586 cv
466.32 460.59 466.29 460.592 466.29 460.592 cv
466.29 460.592 li
f
656.344 900.913 mo
652.517 900.913 649.101 898.393 648.007 894.666 cv
645.345 870.334 642.626 845.966 639.98 821.717 cv
637.083 795.164 634.149 768.58 631.292 742.11 cv
622.783 663.253 li
619.935 637.05 617.09 610.851 614.413 584.729 cv
614.212 582.51 614.224 580.809 614.972 577.981 cv
615.719 575.152 617.039 573.378 618.142 571.351 cv
620.678 595.92 624.739 633.541 627.396 658.18 cv
635.905 737.038 li
638.763 763.507 641.696 790.091 644.594 816.644 cv
647.355 841.943 650.195 867.374 652.967 892.758 cv
653.701 894.796 655.637 896.154 657.803 896.154 cv
657.812 896.154 657.822 896.154 657.832 896.154 cv
657.832 896.155 li
688.81 893.387 719.78 890.546 750.595 887.734 cv
847.624 878.832 li
942.958 870.003 li
1046.85 860.434 li
1042.21 865.626 1035.85 866.117 1033.7 866.307 cv
938.345 875.075 li
843.011 883.905 li
745.982 892.807 li
716.431 895.504 686.738 898.225 657.032 900.885 cv
656.801 900.904 656.572 900.913 656.344 900.913 cv
.607843 .533333 .54902 rgb
f
699.319 1117.83 mo
697.22 1115.73 694.318 1114.43 691.115 1114.43 cv
688.005 1114.43 685.192 1115.64 683.124 1117.61 cv
682.911 1117.83 li
680.812 1119.93 679.513 1122.83 679.513 1126.04 cv
679.513 1129.25 680.805 1132.16 682.891 1134.24 cv
682.911 1134.26 li
684.997 1136.35 687.897 1137.64 691.115 1137.64 cv
694.318 1137.64 697.22 1136.34 699.319 1134.24 cv
699.33 1134.25 li
699.339 1134.24 li
701.425 1132.16 702.717 1129.25 702.717 1126.04 cv
702.717 1122.83 701.418 1119.93 699.319 1117.83 cv
cp
691.115 1104.44 mo
697.078 1104.44 702.481 1106.85 706.389 1110.76 cv
710.297 1114.67 712.716 1120.07 712.716 1126.04 cv
712.716 1131.99 710.292 1137.38 706.378 1141.3 cv
706.389 1141.31 li
702.481 1145.22 697.078 1147.64 691.115 1147.64 cv
685.172 1147.64 679.777 1145.22 675.861 1141.31 cv
675.852 1141.3 li
675.841 1141.29 li
675.834 1141.28 li
671.929 1137.37 669.514 1131.98 669.514 1126.04 cv
669.514 1120.07 671.933 1114.67 675.841 1110.76 cv
675.944 1110.66 676.051 1110.56 676.161 1110.47 cv
680.052 1106.73 685.322 1104.44 691.115 1104.44 cv
cp
.168627 .0352941 .219608 rgb
ef
577.198 962.277 mo
577.187 962.277 577.176 962.277 577.165 962.277 cv
577.176 962.277 577.187 962.277 577.198 962.277 cv
577.198 962.277 li
577.2 962.277 mo
577.559 962.277 577.921 962.26 578.285 962.225 cv
618.589 958.39 658.75 954.528 698.723 950.678 cv
698.727 950.678 698.727 950.678 698.731 950.678 cv
658.756 954.528 618.592 958.39 578.285 962.225 cv
577.921 962.26 577.56 962.277 577.2 962.277 cv
565.97 952.483 mo
565.97 952.483 li
562.26 920.461 558.549 888.469 554.84 856.52 cv
554.84 856.52 li
558.55 888.471 562.261 920.463 565.97 952.483 cv
565.97 952.483 li
.74902 .176471 .368627 rgb
f
577.198 962.277 mo
577.187 962.277 577.176 962.277 577.165 962.277 cv
571.535 962.26 566.619 958.091 565.97 952.483 cv
565.97 952.483 li
562.261 920.463 558.55 888.471 554.842 856.524 cv
577.504 914.053 632.902 950.782 693.198 950.781 cv
695.034 950.781 696.879 950.747 698.723 950.678 cv
658.75 954.528 618.589 958.39 578.285 962.225 cv
577.921 962.26 577.559 962.277 577.2 962.277 cv
577.2 962.277 577.199 962.277 577.198 962.277 cv
.294118 .164706 .243137 rgb
f
948.187 863.618 mo
948.187 863.618 li
972.144 861.394 996.123 859.186 1020.09 856.992 cv
996.123 859.186 972.144 861.394 948.187 863.618 cv
948.187 863.618 li
.607843 .533333 .54902 rgb
f
933.214 865.009 mo
717.626 566.151 li
720.061 565.965 li
752.087 563.526 784.035 561.117 815.852 558.704 cv
819.924 558.396 li
1034.38 855.686 li
1029.62 856.121 1024.85 856.556 1020.09 856.992 cv
996.123 859.186 972.144 861.394 948.187 863.618 cv
948.187 863.618 li
933.214 865.009 li
.85098 1 .556863 rgb
f
1026.79 724.334 mo
1025.72 715.947 1024.66 707.568 1023.59 699.191 cv
1023.6 699.192 li
1024.66 707.567 1025.72 715.948 1026.79 724.334 cv
872.89 554.376 mo
872.89 554.376 li
909.96 551.56 li
897.618 552.499 885.262 553.437 872.89 554.377 cv
909.96 551.56 mo
913.204 551.313 li
912.122 551.395 911.042 551.477 909.96 551.56 cv
.607843 .533333 .54902 rgb
f
1033.51 777.041 mo
872.89 554.376 li
885.262 553.437 897.618 552.499 909.96 551.56 cv
909.96 551.56 li
911.042 551.477 912.122 551.395 913.204 551.313 cv
916.726 551.044 li
1023.6 699.192 li
1024.66 707.568 1025.72 715.947 1026.79 724.334 cv
1029.01 741.679 1031.23 759.048 1033.44 776.448 cv
1033.51 777.041 li
.85098 1 .556863 rgb
f
752.931 881.615 mo
753.895 881.527 754.86 881.438 755.824 881.351 cv
756.323 881.305 756.824 881.259 757.322 881.214 cv
757.323 881.214 li
755.824 881.351 li
752.931 881.615 li
648.022 793.796 mo
648.022 793.796 li
647.959 793.219 647.896 792.64 647.832 792.062 cv
647.896 792.639 647.959 793.219 648.022 793.796 cv
642.202 740.524 mo
642.199 740.492 642.196 740.461 642.192 740.429 cv
642.195 740.46 642.199 740.494 642.202 740.524 cv
642.014 738.783 mo
641.998 738.636 641.982 738.489 641.966 738.343 cv
641.982 738.489 641.998 738.637 642.014 738.783 cv
641.797 736.781 mo
641.773 736.56 641.749 736.339 641.725 736.119 cv
641.749 736.34 641.773 736.559 641.797 736.781 cv
641.607 735.025 mo
641.585 734.824 641.563 734.626 641.542 734.424 cv
641.563 734.625 641.585 734.825 641.607 735.025 cv
641.376 732.888 mo
641.356 732.702 641.336 732.517 641.315 732.331 cv
641.336 732.516 641.356 732.702 641.376 732.888 cv
.607843 .533333 .54902 rgb
f
713.939 885.172 mo
648.022 793.796 li
647.959 793.219 647.896 792.639 647.832 792.062 cv
645.95 774.869 644.063 757.677 642.202 740.524 cv
642.199 740.494 642.195 740.46 642.192 740.429 cv
642.133 739.88 642.073 739.332 642.014 738.783 cv
641.998 738.637 641.982 738.489 641.966 738.343 cv
641.91 737.822 641.853 737.302 641.797 736.781 cv
641.773 736.559 641.749 736.34 641.725 736.119 cv
641.686 735.755 641.646 735.389 641.607 735.025 cv
641.585 734.825 641.563 734.625 641.542 734.424 cv
641.486 733.913 641.431 733.399 641.376 732.888 cv
641.356 732.702 641.336 732.516 641.315 732.331 cv
641.255 731.772 641.195 731.213 641.134 730.654 cv
641.134 730.654 li
641.134 730.654 li
639.802 718.3 li
757.323 881.214 li
756.824 881.259 756.323 881.305 755.824 881.351 cv
754.86 881.438 753.895 881.527 752.931 881.615 cv
713.939 885.172 li
.85098 1 .556863 rgb
f
1136.57 1033.33 mo
1140.53 1022.6 1136.97 1010.55 1127.82 1003.69 cv
1118.67 996.843 1106.1 996.82 1096.92 1003.64 cv
1102.19 996.458 1110.91 992.66 1119.75 993.689 cv
1128.6 994.72 1136.21 1000.42 1139.69 1008.62 cv
1143.17 1016.81 1141.98 1026.25 1136.57 1033.33 cv
cp
1 1 1 rgb
ef
1063.92 1107.15 mo
1067.88 1096.43 1064.32 1084.38 1055.16 1077.52 cv
1046.01 1070.67 1033.44 1070.65 1024.27 1077.47 cv
1029.54 1070.29 1038.25 1066.49 1047.1 1067.52 cv
1055.94 1068.55 1063.56 1074.25 1067.03 1082.45 cv
1070.51 1090.64 1069.32 1100.08 1063.92 1107.15 cv
cp
ef
798.004 1145.04 mo
804.795 1107.09 791.058 1068.37 761.865 1043.19 cv
741.758 1025.84 716.37 1016.69 690.577 1016.69 cv
678.922 1016.69 667.188 1018.56 655.815 1022.38 cv
668.916 1016.87 682.729 1014.18 696.446 1014.18 cv
721.152 1014.18 745.549 1022.91 764.932 1039.63 cv
795.078 1065.64 807.891 1106.47 798.004 1145.04 cv
1 .545098 .658823 rgb
f
1171.52 1014.57 mo
1170.71 996.677 1160.86 980.426 1145.38 971.424 cv
1137.21 966.671 1128.06 964.281 1118.9 964.281 cv
1110.7 964.281 1102.49 966.193 1094.96 970.035 cv
1103.04 965.043 1112.19 962.541 1121.35 962.541 cv
1130.06 962.541 1138.78 964.807 1146.59 969.348 cv
1162.61 978.665 1172.19 996.047 1171.52 1014.57 cv
f
640.649 1152.08 mo
639.285 1152.25 638.038 1151.28 637.865 1149.92 cv
637.692 1148.56 638.659 1147.31 640.023 1147.14 cv
665.218 1143.91 li
666.582 1143.74 667.83 1144.71 668.002 1146.07 cv
668.175 1147.44 667.208 1148.68 665.844 1148.86 cv
640.649 1152.08 li
cp
.168627 .0352941 .219608 rgb
ef
719.848 1141.97 mo
718.483 1142.14 717.236 1141.17 717.064 1139.81 cv
716.891 1138.44 717.857 1137.2 719.222 1137.02 cv
744.417 1133.8 li
745.781 1133.63 747.028 1134.6 747.201 1135.96 cv
747.374 1137.32 746.407 1138.57 745.043 1138.74 cv
719.848 1141.97 li
cp
ef
677.962 1182.44 mo
676.598 1182.62 675.346 1181.66 675.169 1180.3 cv
674.992 1178.93 675.953 1177.68 677.317 1177.5 cv
713.277 1172.83 li
714.641 1172.65 715.894 1173.61 716.07 1174.97 cv
716.248 1176.34 715.286 1177.59 713.922 1177.77 cv
677.962 1182.44 li
cp
ef
668.72 1078.84 mo
667.356 1079.02 666.104 1078.05 665.927 1076.69 cv
665.75 1075.33 666.711 1074.07 668.075 1073.9 cv
704.035 1069.22 li
705.399 1069.04 706.651 1070.01 706.828 1071.37 cv
707.005 1072.73 706.044 1073.99 704.68 1074.16 cv
668.72 1078.84 li
cp
1 1 1 rgb
ef
716.432 1106.9 mo
715.068 1107.08 713.82 1106.11 713.648 1104.75 cv
713.476 1103.38 714.442 1102.13 715.806 1101.96 cv
741.001 1098.74 li
742.365 1098.57 743.612 1099.53 743.785 1100.9 cv
743.958 1102.26 742.991 1103.51 741.627 1103.68 cv
716.432 1106.9 li
cp
ef
637.866 1117.75 mo
636.502 1117.92 635.254 1116.96 635.082 1115.59 cv
634.91 1114.23 635.876 1112.98 637.24 1112.81 cv
662.436 1109.58 li
663.8 1109.41 665.047 1110.38 665.219 1111.74 cv
665.392 1113.11 664.425 1114.35 663.061 1114.53 cv
637.866 1117.75 li
cp
ef
1770.6 1144.84 mo
1333.29 1141.74 li
1310.68 1121.8 li
1310.68 1121.8 li
1746.44 1121 li
1762.6 1136.94 li
1762.6 1136.94 1762.6 1136.94 1762.6 1136.94 cv
1762.76 1137.1 1762.92 1137.26 1763.08 1137.42 cv
1770.6 1144.84 li
1770.6 1144.84 li
.247059 .290196 .764706 rgb
f
1310.68 1121.8 mo
1310.68 1121.8 1311.63 1086.2 1313.55 1014.99 cv
1313.55 1015 1313.55 1015 1313.55 1015 cv
1310.68 1121.8 li
.219608 .709804 .615686 rgb
f
1310.68 1121.8 mo
1310.68 1121.8 li
1310.68 1121.8 li
1313.55 1015 li
1322.99 1071.34 1368.41 1114.74 1425.13 1121.59 cv
1425.13 1121.59 1386.98 1121.66 1310.68 1121.8 cv
1310.68 1121.8 li
.247059 .290196 .764706 rgb
f
1779.97 669.057 mo
1757.89 647.132 li
1757.89 647.132 1757.89 647.132 1757.89 647.132 cv
1779.97 669.057 li
.545098 1 .870588 rgb
f
1770.6 1144.84 mo
1770.6 1144.84 li
1770.6 1144.84 1768.09 1142.36 1763.08 1137.42 cv
1762.6 1136.94 li
1762.6 1136.79 1765.6 982.486 1771.61 674.025 cv
1771.61 674.025 1765.42 668.551 1753.05 657.606 cv
1754.63 654.09 1756.25 650.601 1757.89 647.132 cv
1779.97 669.057 li
1770.6 1144.84 li
.568627 .639216 1 rgb
f
1770.6 1144.84 mo
1770.6 1144.84 li
1770.6 1144.84 li
1763.08 1137.42 mo
1762.92 1137.26 1762.76 1137.1 1762.6 1136.94 cv
1762.6 1136.94 1762.6 1136.94 1762.6 1136.94 cv
1763.08 1137.42 li
.54902 .572549 .858823 rgb
f
1686.6 1072.62 mo
1692.1 790.619 li
1692.1 790.619 li
1692.1 790.606 li
1692.11 790.017 li
1692.07 788.757 1691.55 787.548 1690.67 786.631 cv
1689.7 785.635 1688.38 785.07 1687.01 785.058 cv
1686.94 785.058 li
1686.8 785.06 li
1686.73 785.062 li
1369 790.78 li
1375.12 787.445 1381.94 785.616 1388.9 785.442 cv
1389.6 785.428 li
1389.6 785.428 li
1689.95 780.024 li
1693.85 780.342 1696.92 783.49 1697.15 787.401 cv
1691.94 1054.36 li
1691.43 1063.09 1689.65 1069.18 1686.6 1072.62 cv
.568627 .639216 1 rgb
f
1323.47 645.615 mo
1323.72 636.246 li
1323.47 645.615 li
1323.47 645.615 li
1323.72 636.246 mo
1702.48 622.969 li
1702.48 622.969 1702.48 622.969 1702.48 622.969 cv
1323.72 636.246 li
.545098 1 .870588 rgb
f
1323.47 645.615 mo
1323.72 636.246 li
1702.48 622.969 li
1702.6 626.05 1702.65 629.145 1702.61 632.248 cv
1323.47 645.615 li
.568627 .639216 1 rgb
f
1494.44 1065.15 mo
1370.77 1065.08 li
1373.34 945.6 li
1391.5 1003.02 1436.93 1047.78 1494.44 1065.15 cv
.247059 .290196 .764706 rgb
f
1515.33 1070.14 mo
1365.68 1070.05 li
1366.66 1024.61 1367.64 979.173 1368.61 933.787 cv
1368.74 928.051 li
1369.99 934.017 1371.53 939.872 1373.34 945.6 cv
1370.77 1065.08 li
1494.44 1065.15 li
1501.24 1067.21 1508.21 1068.88 1515.33 1070.14 cv
.168627 .0352941 .219608 rgb
f
1382.52 675.032 mo
1388.79 668.836 1397.3 664.882 1406.74 664.576 cv
1644.9 656.863 li
1645.29 656.85 1645.68 656.844 1646.07 656.844 cv
1655.9 656.844 1664.9 660.842 1671.47 667.329 cv
1664.45 661.797 1655.61 658.508 1646.08 658.508 cv
1645.64 658.508 1645.19 658.515 1644.74 658.53 cv
1406.58 666.243 li
1397.5 666.537 1389.18 669.787 1382.52 675.032 cv
.568627 .639216 1 rgb
f
1050 1758.88 mo
766.954 1758.88 537.501 1744.19 537.501 1726.06 cv
537.501 1707.93 766.954 1693.23 1050 1693.23 cv
1333.04 1693.23 1562.5 1707.93 1562.5 1726.06 cv
1562.5 1744.19 1333.04 1758.88 1050 1758.88 cv
.219608 .709804 .615686 rgb
f
1043.99 859.811 mo
1043.86 859.822 li
1043.99 859.811 li
cp
629.74 577.864 mo
640.306 680.202 651.866 782.497 663.038 884.774 cv
788.03 873.595 912.964 861.757 1037.94 850.359 cv
1024.91 750.133 1012.23 649.856 999.648 549.575 cv
876.389 559.364 753.038 568.516 629.74 577.864 cv
cp
623.884 568.292 mo
750.458 558.71 877.088 549.296 1003.62 539.238 cv
1006.3 539.029 1008.65 540.971 1008.97 543.612 cv
1008.97 543.612 li
1021.97 647.161 1035.02 750.717 1048.48 854.205 cv
1048.84 856.933 1046.92 859.435 1044.19 859.791 cv
1043.86 859.822 li
915.582 871.511 787.343 883.692 659.039 895.129 cv
656.332 895.364 653.942 893.385 653.658 890.694 cv
653.648 890.695 li
642.147 785.083 630.121 679.456 619.294 573.78 cv
619.015 571.041 621.008 568.591 623.747 568.311 cv
623.884 568.299 li
623.884 568.292 li
cp
.168627 .0352941 .219608 rgb
ef
527.615 526.875 mo
527.5 526.885 li
527.22 526.912 li
525.711 527.083 524.417 527.797 523.54 528.822 cv
522.693 529.812 522.226 531.118 522.324 532.525 cv
522.317 532.525 li
522.347 532.747 li
538.353 672.488 554.746 812.196 570.931 951.917 cv
571.118 953.535 571.967 954.938 573.181 955.898 cv
574.439 956.894 576.089 957.428 577.817 957.265 cv
686.51 946.924 795.194 936.412 903.872 925.914 cv
939.436 922.478 974.857 919.043 1010.13 915.624 cv
1027.45 913.945 1043.54 908.858 1057.84 901.106 cv
1072.72 893.038 1085.62 882.102 1095.88 869.132 cv
1106.13 856.197 1113.8 841.19 1118.27 824.941 cv
1122.57 809.286 1123.9 792.461 1121.68 775.218 cv
1109.61 681.324 1097.61 587.42 1085.53 493.526 cv
1085.33 492.019 1084.51 490.656 1083.34 489.686 cv
1082.19 488.737 1080.74 488.197 1079.27 488.301 cv
895.393 501.295 711.497 513.986 527.615 526.875 cv
cp
526.89 516.921 mo
710.779 504.028 894.682 491.336 1078.56 478.342 cv
1082.71 478.05 1086.67 479.473 1089.71 481.993 cv
1092.73 484.502 1094.88 488.139 1095.41 492.276 cv
1107.49 586.17 1119.49 680.074 1131.56 773.968 cv
1133.95 792.544 1132.52 810.675 1127.88 827.558 cv
1123.05 845.119 1114.76 861.333 1103.7 875.304 cv
1092.56 889.375 1078.63 901.205 1062.6 909.894 cv
1047.2 918.245 1029.82 923.727 1011.06 925.545 cv
866.973 939.514 722.871 953.476 578.754 967.186 cv
574.388 967.601 570.21 966.242 567.008 963.71 cv
563.772 961.15 561.514 957.398 561.01 953.05 cv
544.825 813.33 528.431 673.622 512.426 533.881 cv
512.408 533.731 512.399 533.581 512.396 533.432 cv
512.383 533.305 li
512.375 533.188 li
512.365 533.189 li
512.079 529.089 513.461 525.261 515.962 522.338 cv
518.432 519.45 521.99 517.458 526.087 516.991 cv
526.304 516.966 526.541 516.944 526.796 516.926 cv
526.89 516.921 li
cp
ef
448.156 797.351 mo
440.6 791.407 435.744 782.681 434.675 773.127 cv
433.605 763.575 436.415 753.992 442.472 746.526 cv
446.262 780.409 448.156 797.351 448.156 797.351 cv
cp
ef
450.771 716.118 mo
427.125 726.235 li
438.806 823.945 li
462.453 813.828 li
450.771 716.118 li
cp
1079.22 361.882 mo
1085.13 411.435 li
1114.83 409.316 li
1114.35 405.516 li
1112.7 392.564 li
1111.05 379.613 li
1110.36 374.146 1107.53 369.314 1103.53 365.93 cv
1099.63 362.629 1094.65 360.769 1089.53 361.138 cv
1079.85 361.836 li
1079.22 361.882 li
cp
529.095 400.751 mo
534.767 450.702 li
1051.04 413.868 li
1045.49 364.312 li
892.414 375.322 739.317 386.088 586.218 396.77 cv
585.578 396.814 li
577.508 397.376 li
576.539 397.445 li
569.439 397.939 li
566.858 398.12 li
561.371 398.501 li
557.179 398.794 li
553.302 399.065 li
547.499 399.469 li
545.232 399.627 li
537.82 400.145 li
537.164 400.189 li
529.095 400.751 li
cp
393.149 516.223 mo
387.825 469.357 li
346.422 504.64 li
346.224 504.818 346.017 504.99 345.801 505.155 cv
334.948 513.419 334.851 524.29 334.953 526.516 cv
334.979 526.73 li
339.006 562.178 li
350.385 552.55 371.512 534.608 393.149 516.223 cv
cp
395.955 540.905 mo
394.331 526.625 li
372.695 544.524 351.788 561.811 340.062 571.48 cv
341.745 586.278 li
395.955 540.905 li
cp
1191.61 1307.2 mo
1192.12 1306.39 1192.62 1305.57 1193.11 1304.76 cv
1193.14 1304.71 li
1200.81 1291.96 1206.22 1279.9 1209.96 1268.72 cv
1209.96 1268.71 li
1210.35 1267.53 li
1210.36 1267.52 li
1210.36 1267.5 li
1210.61 1266.73 1210.85 1265.97 1211.09 1265.21 cv
1211.1 1265.18 li
1211.32 1264.45 1211.54 1263.72 1211.75 1263 cv
1211.79 1262.88 li
1211.86 1262.63 li
1212.11 1261.77 li
1212.12 1261.73 li
1212.35 1260.92 li
1212.44 1260.6 li
1212.58 1260.07 li
1212.74 1259.47 li
1212.81 1259.23 li
1213.03 1258.39 li
1213.04 1258.35 li
1213.24 1257.55 li
1213.32 1257.23 li
1213.45 1256.72 li
1213.6 1256.13 li
1213.65 1255.9 li
1213.85 1255.07 li
1213.86 1255.03 li
1214.04 1254.25 li
1214.05 1254.22 li
1214.21 1253.47 li
1214.22 1253.44 li
1214.35 1252.85 li
1214.4 1252.63 li
1214.57 1251.82 li
1214.74 1251.02 1214.91 1250.22 1215.06 1249.43 cv
1215.21 1248.64 li
1215.22 1248.58 li
1215.36 1247.85 li
1215.63 1246.3 li
1215.76 1245.53 li
1215.89 1244.76 li
1215.94 1244.43 li
1216.01 1244 li
1216.03 1243.89 li
1216.12 1243.24 li
1216.23 1242.48 li
1216.33 1241.78 li
1216.34 1241.71 li
1216.54 1240.25 li
1216.63 1239.51 li
1216.64 1239.42 li
1216.72 1238.78 li
1216.88 1237.33 li
1216.95 1236.61 li
1216.96 1236.51 li
1217.02 1235.9 li
1217.09 1235.19 li
1217.14 1234.62 li
1217.15 1234.49 li
1217.21 1233.79 li
1217.22 1233.68 li
1217.26 1233.09 li
1217.37 1231.71 1217.45 1230.35 1217.51 1229.02 cv
1217.54 1228.36 li
1217.54 1228.24 li
1217.56 1227.71 li
1217.58 1227.37 li
1217.58 1227.06 li
1217.6 1226.5 li
1217.6 1226.41 li
1217.62 1225.77 li
1217.62 1225.64 li
1217.63 1225.13 li
1217.63 1224.79 li
1217.64 1224.5 li
1217.64 1223.95 li
1217.64 1223.87 li
1217.65 1223.25 li
1217.65 1223.12 li
1217.65 1222.63 li
1217.65 1222.29 li
1217.65 1222.02 li
1217.64 1221.48 li
1217.64 1221.42 li
1217.63 1220.82 li
1217.63 1220.68 li
1217.62 1220.22 li
1217.62 1219.88 li
1217.61 1219.63 li
1217.59 1219.09 li
1217.59 1219.04 li
1217.58 1218.46 li
1217.57 1218.32 li
1217.55 1217.89 li
1217.54 1217.55 li
1217.53 1217.32 li
1217.51 1216.79 li
1217.51 1216.75 li
1217.48 1216.19 li
1217.47 1216.05 li
1217.45 1215.64 li
1217.43 1215.31 li
1217.42 1215.09 li
1217.39 1214.58 li
1217.39 1214.55 li
1217.35 1214.01 li
1217.34 1213.86 li
1217.32 1213.48 li
1217.29 1213.15 li
1217.28 1212.95 li
1217.24 1212.45 li
1217.24 1212.43 li
1217.2 1211.91 li
1217.18 1211.76 li
1217.16 1211.4 li
1217.13 1211.08 li
1217.11 1210.9 li
1217.07 1210.41 li
1217.07 1210.4 li
1217.02 1209.9 li
1217 1209.75 li
1216.94 1209.1 li
1216.92 1208.93 li
1216.87 1208.46 li
1216.88 1208.46 li
1184.82 957.881 1152.81 707.297 1120.88 456.708 cv
1119.35 444.775 li
479.78 490.381 li
514.688 797.314 549.821 1104.22 584.945 1411.13 cv
585.016 1411.75 li
585.797 1417.29 588.579 1421.98 592.504 1425.2 cv
592.66 1425.3 592.813 1425.42 592.964 1425.53 cv
597.11 1428.75 602.459 1430.39 608.064 1429.75 cv
608.067 1429.77 li
608.216 1429.75 li
608.362 1429.73 608.511 1429.7 608.661 1429.68 cv
712.661 1414.99 820.354 1399.54 928.045 1384.09 cv
988.016 1375.49 1047.99 1366.88 1107.97 1358.32 cv
1124.85 1355.91 1140.48 1350.12 1154.32 1341.71 cv
1168.67 1332.99 1181.18 1321.41 1191.23 1307.81 cv
1191.24 1307.8 li
1191.46 1307.45 li
1191.61 1307.2 li
cp
478.651 480.451 mo
1118.09 434.856 li
1117.65 431.418 li
1116.1 419.236 li
1081.08 421.732 li
1078.41 421.92 1076.08 419.972 1075.78 417.339 cv
1075.77 417.339 li
1069.25 362.601 li
1060.49 363.231 li
1055.45 363.594 li
1061.54 417.931 li
1061.84 420.669 1059.86 423.137 1057.13 423.438 cv
1056.93 423.456 li
1056.93 423.457 li
530.7 461.001 li
527.984 461.192 525.623 459.175 525.376 456.477 cv
519.129 401.446 li
518.46 401.492 li
508.78 402.167 li
505.396 402.402 li
511.61 457.166 li
511.911 459.905 509.935 462.372 507.196 462.673 cv
507.001 462.691 li
507.001 462.692 li
476.877 464.84 li
478.651 480.451 li
cp
475.748 454.912 mo
501.104 453.104 li
495.43 403.096 li
495.43 403.095 li
489.42 403.514 li
479.741 404.188 li
470.061 404.861 li
475.748 454.912 li
cp
456.503 462.362 mo
451.165 415.379 li
396.984 461.551 li
402.31 508.438 li
424.619 489.476 446.079 471.228 456.503 462.362 cv
cp
459.396 487.805 mo
457.834 474.073 li
445.431 484.343 424.695 501.505 403.514 519.03 cv
405.127 533.226 li
459.396 487.805 li
cp
416.793 723.973 mo
416.761 723.706 li
416.747 723.568 li
413.172 692.185 li
397.282 699.41 li
418.786 886.439 li
434.509 879.291 li
428.621 827.706 422.717 775.947 416.793 723.973 cv
cp
425.923 715.898 mo
452.987 704.318 li
455.521 703.24 458.452 704.42 459.53 706.955 cv
459.72 707.402 459.841 707.864 459.896 708.324 cv
459.901 708.322 li
472.815 816.356 li
473.093 818.711 471.686 820.876 469.546 821.645 cv
439.452 834.52 li
463.917 1048.95 488.459 1263.37 512.999 1477.79 cv
513.089 1478.53 li
514.088 1485.61 517.748 1491.58 522.892 1495.58 cv
528.038 1499.57 534.682 1501.6 541.646 1500.81 cv
541.935 1500.78 li
542.342 1500.73 li
542.341 1500.72 li
1080.57 1423.88 li
1134.37 1372.63 li
1126.77 1375.08 1118.9 1376.92 1110.78 1378.08 cv
1050.8 1386.64 990.829 1395.25 930.859 1403.85 cv
825.626 1418.95 720.389 1434.05 611.396 1449.45 cv
611.177 1449.48 610.958 1449.5 610.741 1449.51 cv
610.447 1449.55 li
610.328 1449.57 li
610.33 1449.59 li
599.333 1450.85 588.839 1447.63 580.7 1441.31 cv
580.483 1441.15 580.277 1440.97 580.08 1440.79 cv
572.291 1434.48 566.777 1425.29 565.251 1414.48 cv
565.102 1413.39 li
530.246 1108.83 495.388 804.275 460.747 499.691 cv
406.48 545.113 li
412.851 601.135 419.238 657.151 425.611 713.167 cv
425.923 715.898 li
cp
396.13 1063.35 mo
450.351 1017.96 li
435.699 889.715 li
416.659 898.371 li
414.146 899.503 411.189 898.383 410.058 895.871 cv
409.84 895.388 409.706 894.888 409.649 894.388 cv
409.647 894.388 li
386.946 696.938 li
386.688 694.683 387.977 692.608 389.968 691.769 cv
411.984 681.76 li
407.106 638.933 402.214 595.951 397.306 552.791 cv
343.096 598.165 li
360.723 753.23 378.412 908.289 396.13 1063.35 cv
cp
400.942 1105.45 mo
455.161 1060.07 li
451.708 1029.85 li
397.488 1075.23 li
400.942 1105.45 li
cp
406.042 1150.05 mo
460.26 1104.67 li
456.52 1071.95 li
402.3 1117.33 li
406.042 1150.05 li
cp
411.307 1196.1 mo
465.527 1150.72 li
461.62 1116.55 li
407.4 1161.93 li
411.307 1196.1 li
cp
416.238 1239.2 mo
470.456 1193.82 li
466.885 1162.6 li
412.667 1207.98 li
416.238 1239.2 li
cp
420.891 1279.87 mo
475.106 1234.49 li
471.814 1205.7 li
417.596 1251.08 li
420.891 1279.87 li
cp
481.841 1293.34 mo
427.625 1338.72 li
430.895 1367.3 li
485.112 1321.92 li
481.841 1293.34 li
cp
426.266 1326.84 mo
480.482 1281.46 li
476.466 1246.37 li
422.25 1291.75 li
426.266 1326.84 li
cp
491.493 1377.69 mo
437.276 1423.07 li
451.037 1543.32 li
451.108 1543.95 li
451.89 1549.48 454.671 1554.18 458.597 1557.39 cv
458.752 1557.5 458.905 1557.61 459.057 1557.73 cv
463.203 1560.95 468.552 1562.58 474.157 1561.95 cv
474.16 1561.97 li
474.211 1561.96 li
474.378 1561.93 474.546 1561.9 474.714 1561.88 cv
974.061 1490.51 li
974.062 1490.52 li
974.452 1490.48 li
974.555 1490.46 1009.89 1487.15 1040.02 1462.51 cv
1068.12 1435.74 li
543.746 1510.6 li
543.746 1510.59 li
543.668 1510.6 li
543.202 1510.66 li
543.064 1510.69 542.922 1510.71 542.779 1510.73 cv
533.143 1511.83 523.94 1509.01 516.8 1503.47 cv
509.661 1497.92 504.586 1489.66 503.208 1479.9 cv
503.078 1478.92 li
491.493 1377.69 li
cp
435.917 1411.19 mo
490.134 1365.81 li
486.471 1333.8 li
432.254 1379.18 li
435.917 1411.19 li
cp
458.302 385.667 mo
468.143 384.981 li
468.144 384.981 li
477.984 384.297 li
477.985 384.297 li
487.826 383.612 li
487.827 383.612 li
497.667 382.928 li
497.668 382.928 li
507.508 382.243 li
507.51 382.243 li
517.35 381.558 li
517.351 381.558 li
527.191 380.873 li
527.193 380.873 li
537.032 380.186 li
537.034 380.186 li
586.239 376.755 li
586.243 376.755 li
727.303 366.911 868.365 356.992 1009.4 346.882 cv
1009.4 346.88 li
1038.92 344.763 li
1038.92 344.761 li
1048.76 344.055 li
1048.76 344.054 li
1058.6 343.346 li
1058.6 343.345 li
1068.44 342.637 li
1068.44 342.637 li
1078.28 341.928 li
1078.28 341.927 li
1088.12 341.217 li
1098.62 340.46 1108.68 344.14 1116.42 350.696 cv
1124.05 357.155 1129.46 366.475 1130.82 377.114 cv
1132.47 390.068 li
1132.47 390.068 li
1134.12 403.023 li
1135.77 415.977 li
1135.77 415.977 li
1168.79 675.058 1201.9 934.13 1235.02 1193.2 cv
1235.02 1193.2 li
1236.67 1206.15 li
1236.7 1206.35 li
1236.71 1206.35 li
1236.77 1206.89 li
1236.79 1207.08 li
1236.83 1207.45 li
1236.87 1207.83 li
1236.88 1208.01 li
1236.94 1208.57 li
1236.94 1208.58 li
1236.99 1209.15 li
1237.01 1209.35 li
1237.04 1209.73 li
1237.07 1210.13 li
1237.09 1210.31 li
1237.14 1210.9 li
1237.14 1210.92 li
1237.18 1211.5 li
1237.2 1211.72 li
1237.23 1212.11 li
1237.26 1212.53 li
1237.27 1212.71 li
1237.31 1213.33 li
1237.31 1213.35 li
1237.35 1213.95 li
1237.36 1214.18 li
1237.38 1214.58 li
1237.4 1215.03 li
1237.41 1215.22 li
1237.44 1215.86 li
1237.45 1215.88 li
1237.47 1216.5 li
1237.48 1216.75 li
1237.51 1217.5 li
1237.52 1217.63 li
1237.52 1217.82 li
1237.54 1218.48 li
1237.54 1218.52 li
1237.56 1219.15 li
1237.57 1219.42 li
1237.58 1219.83 li
1237.59 1220.32 li
1237.59 1220.51 li
1237.6 1221.2 li
1237.6 1221.24 li
1237.61 1221.89 li
1237.61 1222.17 li
1237.61 1222.59 li
1237.61 1223.11 li
1237.61 1223.3 li
1237.61 1224.01 li
1237.61 1224.06 li
1237.6 1224.72 li
1237.6 1225.02 li
1237.59 1225.45 li
1237.58 1225.99 li
1237.58 1226.17 li
1237.56 1226.91 li
1237.56 1226.97 li
1237.54 1227.65 li
1237.53 1227.96 li
1237.51 1228.39 li
1237.49 1228.96 li
1237.49 1229.14 li
1237.45 1229.9 li
1237.42 1230.57 li
1237.42 1230.66 li
1237.4 1231 li
1237.38 1231.43 li
1237.34 1232.02 li
1237.33 1232.2 li
1237.29 1232.97 li
1237.18 1234.54 1237.06 1236.13 1236.9 1237.75 cv
1236.84 1238.4 li
1236.82 1238.57 li
1236.71 1239.65 1236.59 1240.76 1236.45 1241.88 cv
1236.35 1242.71 li
1235.15 1252.15 1232.97 1262.53 1229.34 1273.69 cv
1220.21 1301.71 1201.82 1334.66 1166.37 1369.68 cv
1166.25 1369.8 li
1166.25 1369.8 li
1053.6 1477.13 li
1053.28 1477.43 1052.95 1477.7 1052.61 1477.95 cv
1019.68 1504.87 981.113 1509.81 976.875 1510.28 cv
976.875 1510.28 li
477.528 1581.64 li
477.266 1581.68 477.004 1581.71 476.744 1581.72 cv
476.539 1581.75 li
476.42 1581.76 li
476.422 1581.79 li
465.425 1583.05 454.931 1579.83 446.792 1573.51 cv
446.576 1573.34 446.369 1573.17 446.172 1572.99 cv
438.384 1566.68 432.869 1557.49 431.343 1546.68 cv
431.195 1545.59 li
392.412 1206.71 353.62 867.831 315.137 528.918 cv
315.096 528.541 315.077 528.168 315.077 527.797 cv
314.883 523.326 315.149 503.564 333.493 489.451 cv
452.193 388.294 li
453.708 386.895 455.666 385.949 457.872 385.706 cv
458.302 385.668 li
458.302 385.667 li
cp
ef
1775.58 1144.75 mo
1775.61 1146.04 1775.13 1147.34 1774.15 1148.34 cv
1773.11 1149.39 1771.72 1149.89 1770.34 1149.82 cv
1333.65 1146.72 li
1332.36 1146.81 1331.04 1146.41 1329.99 1145.49 cv
1307.38 1125.55 li
1307.39 1125.54 li
1307.34 1125.5 li
1307.33 1125.49 li
1307.29 1125.45 li
1307.24 1125.41 li
1307.24 1125.41 li
1307.19 1125.36 li
1307.16 1125.33 li
1307.15 1125.31 li
1307.1 1125.26 li
1307.08 1125.24 li
1307.05 1125.22 li
1307.01 1125.17 li
1306.99 1125.15 li
1306.96 1125.12 li
1306.92 1125.07 li
1306.92 1125.06 li
1306.88 1125.02 li
1306.84 1124.97 li
1306.83 1124.97 li
1306.79 1124.92 li
1306.76 1124.88 li
1306.75 1124.86 li
1306.71 1124.81 li
1306.69 1124.78 li
1306.67 1124.76 li
1306.63 1124.7 li
1306.62 1124.69 li
1306.59 1124.65 li
1306.55 1124.59 li
1306.55 1124.59 li
1306.52 1124.54 li
1306.48 1124.49 li
1306.48 1124.48 li
1306.45 1124.42 li
1306.42 1124.39 li
1306.41 1124.37 li
1306.38 1124.31 li
1306.36 1124.28 li
1306.34 1124.25 li
1306.31 1124.19 li
1306.3 1124.18 li
1306.28 1124.14 li
1306.25 1124.08 li
1306.25 1124.07 li
1306.16 1123.89 li
1306.14 1123.85 li
1306.13 1123.83 li
1306.1 1123.77 li
1306.09 1123.74 li
1306.08 1123.71 li
1306.05 1123.65 li
1306.04 1123.63 li
1306.03 1123.58 li
1306 1123.52 li
1306 1123.52 li
1305.98 1123.46 li
1305.96 1123.4 li
1305.96 1123.39 li
1305.94 1123.33 li
1305.92 1123.29 li
1305.92 1123.26 li
1305.9 1123.2 li
1305.89 1123.17 li
1305.88 1123.13 li
1305.86 1123.07 li
1305.86 1123.05 li
1305.84 1123 li
1305.83 1122.93 li
1305.83 1122.93 li
1305.81 1122.87 li
1305.8 1122.81 li
1305.8 1122.8 li
1305.79 1122.73 li
1305.78 1122.69 li
1305.77 1122.66 li
1305.76 1122.6 li
1305.76 1122.57 li
1305.75 1122.53 li
1305.74 1122.46 li
1305.74 1122.44 li
1305.73 1122.39 li
1305.72 1122.32 li
1305.72 1122.32 li
1305.72 1122.25 li
1305.71 1122.19 li
1305.71 1122.18 li
1305.71 1122.11 li
1305.71 1122.07 li
1305.7 1122.04 li
1305.7 1121.97 li
1305.7 1121.94 li
1305.7 1121.9 li
1305.7 1121.83 li
1305.7 1121.81 li
1305.7 1121.76 li
1305.7 1121.68 li
1318.74 636.187 li
1318.77 633.534 1320.89 631.349 1323.56 631.266 cv
1702.29 617.99 li
1703.69 617.896 1705.12 618.39 1706.18 619.468 cv
1722.87 636.518 li
1752.07 636.518 li
1752.24 636.518 li
1752.24 636.533 li
1753.51 636.533 1754.78 637.016 1755.75 637.982 cv
1783.49 665.521 li
1783.48 665.525 li
1784.41 666.451 1784.98 667.74 1784.95 669.155 cv
1775.58 1144.75 li
cp
1323.85 1126.76 mo
1744.4 1125.99 li
1758.37 1139.77 li
1335.21 1136.77 li
1323.85 1126.76 li
cp
1751.45 1118.94 mo
1765.85 1133.15 li
1774.95 671.095 li
1758.08 654.341 li
1751.45 1118.94 li
cp
1708.95 636.547 mo
1707.59 635.159 li
1707.59 636.548 li
1708.95 636.547 li
cp
1644.9 664.605 mo
1654.84 664.283 1664.01 668.06 1670.78 674.401 cv
1677.53 680.729 1681.89 689.609 1682.23 699.515 cv
1682.22 699.515 li
1682.22 699.516 li
1682.22 699.611 1682.23 699.704 1682.24 699.796 cv
1682.5 709.657 1678.74 718.753 1672.44 725.472 cv
1666.09 732.242 1657.18 736.607 1647.24 736.929 cv
1409.09 744.643 li
1399.15 744.965 1389.97 741.188 1383.21 734.846 cv
1376.46 728.518 1372.09 719.639 1371.75 709.732 cv
1371.76 709.732 li
1371.76 709.731 li
1371.76 709.637 1371.76 709.544 1371.75 709.452 cv
1371.48 699.59 1375.25 690.495 1381.55 683.775 cv
1387.89 677.005 1396.8 672.64 1406.74 672.319 cv
1644.9 664.605 li
cp
1372.47 729.361 mo
1374.47 732.743 1376.94 735.813 1379.79 738.479 cv
1380.76 739.387 1381.77 740.248 1382.82 741.059 cv
1325.84 742.814 li
1326.16 730.97 li
1372.47 729.361 li
cp
1367.02 713.166 mo
1326.6 714.569 li
1326.29 725.98 li
1369.99 724.462 li
1368.49 720.925 1367.47 717.132 1367.02 713.166 cv
cp
1368.45 696.817 mo
1327.04 698.254 li
1326.73 709.579 li
1366.75 708.19 li
1366.78 704.254 1367.37 700.438 1368.45 696.817 cv
cp
1377.52 680.78 mo
1327.48 681.904 li
1327.17 693.266 li
1370.32 691.767 li
1372.13 687.726 1374.57 684.019 1377.52 680.78 cv
cp
1747.97 664.791 mo
1668.96 666.603 li
1662.05 661.947 1653.67 659.337 1644.74 659.625 cv
1406.58 667.339 li
1397.77 667.624 1389.67 670.696 1383.11 675.673 cv
1327.61 676.919 li
1328.57 641.061 li
1697.64 628.125 li
1697.62 641.532 li
1697.62 644.282 1699.85 646.512 1702.6 646.512 cv
1720.35 646.496 li
1720.49 646.51 1720.64 646.517 1720.79 646.517 cv
1748.23 646.517 li
1747.97 664.791 li
cp
1747.75 679.957 mo
1747.9 669.774 li
1674.9 671.448 li
1677.99 674.485 1680.61 678.006 1682.63 681.892 cv
1747.75 679.957 li
cp
1747.53 695.331 mo
1747.68 684.942 li
1684.79 686.811 li
1685.96 690.025 1686.73 693.426 1687.06 696.961 cv
1747.53 695.331 li
cp
1747.31 710.641 mo
1747.46 700.314 li
1687.22 701.939 li
1687.11 705.633 1686.51 709.217 1685.48 712.622 cv
1747.31 710.641 li
cp
1747.09 726.104 mo
1747.24 715.629 li
1683.58 717.667 li
1681.7 721.813 1679.15 725.602 1676.07 728.89 cv
1676.05 728.911 li
1747.09 726.104 li
cp
1315.79 1116.81 mo
1741.53 1116.03 li
1747.02 731.094 li
1670.12 734.132 li
1663.7 738.781 1655.88 741.633 1647.4 741.908 cv
1409.24 749.622 li
1402.6 749.837 1396.26 748.447 1390.6 745.804 cv
1325.71 747.802 li
1315.79 1116.81 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%For: (lenovo) ()
%%Title: (Gameboy Color Cartoon Illustration.eps)
%%CreationDate: 5/31/2022 3:04 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6=*LrAOtM'`H`d8X+HI)togT]MLFgMNXFu6?VQ-[Lp2<1c7-"`sI$/5f9s9tuH>:"uK!aJ]1,:^KS*CF:eOKEjebRfh.-CA4
%.&NK&&`S;ff73d0G':K;;X=@Y@AZs@[VG3G;6Notp&!uKZd\6DK[P@7g7eJn,Q1LI?.PIhcL7H+ZW)4D504iB51aK!Eh-O;1^H*]
%NIg4TG<YCm0,ah_)=HAMZj9X0%0j0T)B6q6:UX/b;\G>p=h$Yp4Z<.h?>7dMZu71&RbVmnkX)CUOrnAAQ&nc@/C9HO9W_V>2?u!M
%B\\J/%O*&)&Ifb(!U4YYLF1IF+&2\YhfNc>#l]\Fq#>??O.Ypp#ali/juGKF?k,OB3*OD/l"<A+cp(2(a9""-(bF6Ah.C@t@u;/4
%&[t+^q9S,gTJ=hZ88DG'Qt(Cbg\*tFAZ=S-UojUHW;XFCg9-^@[@X+#Z8X0grZk)R\u,#4e.3qEB!$:2D@?eR%`<Z[s*gkLCXV@b
%"6>ms-KrD)ptr)?Z.+-%%>YTXbos=+'(SMu*"6'IdN:@9R\;&gm+0n0c5A8mAlsd_)qHk_s3^>`28,+7>61.6h'JFQ6,-fD%"r&@
%$!\:R3?fe4lnoh'm?M(9mep1i;&s_TCP4hG(N1Pd:&N<JrhidiHQNZ2m/S6>EM)*[i,L?_?bibrFuA)iJIHsS9bDTYM=I(+8+l3C
%$i`[`%(g6r%(JOc:kqLZ"97s7#P+@.J(,IdO'B<CYe/AeGQ.E!Kk.SiY(b/9PsM<<KWTt=bKof,&mA]=$Pe#b$B7@/7r@7^7Q9n_
%J@*X//L8)/?iCuApF#o23(Zo)#7tRWrEHDWktVX<m=$hM;7"b)og8SoBY]#U2u9@=GT%*LL:+k:O2`G7kn70E'Q3M[r%As^r:H2P
%nr<?u+W+8F%=[d<?9k`,F3$DHdu2iW<Vp[P_Fn`BH$V]PK)V*,4Xpo48E\UYec#g^no]n"?sR/)fm10YCc3>]V=%9W&k_hOrMNJs
%dqOh3s5`q%9U!6]:[%V<8IL$Tb+3.>h\o3F#rs4%1b-aRiK*u2p+u,hf_=*TD8FQ=?)Rtr2aHY+qY[2?s*JAtp%iJOqXK'a/;4F@
%k-I))r\U'6Jc>u#&eI'-D348d6:$%QVXSqhPX3#\r^K_8k'EdsDF19UC^b&gg$H)WE$n#,Vc("DOqY2RN/+e/aeDL5XB=fo[S2W(
%Y=39YB]F]VIF@kN[%bGZbng-Ca3^0qAsrW],dmF;kN,5_Xqh/Hr+7th%9r^p18G,h=s8>>5KD^^-`7FRS+u18?b\8/_,VKQdB&H8
%Zb4oXr8-RSTbUbV[IV"L,GF4O;QCR:U,I]0H*ObS,;""nInb7C(F;=Ak[/>%r&C8&Xgm[WSn$+P8,$j6++2\G4BH[<8>8c85[XG?
%DnGZ+R:*cC.RO$+lWYr?r?qP7"7n'D>)`4ZX8i)fBURG/&%jV``l,="a3RV^8^:U92KDdr.k?)kdkDOirWMrO#<PEjqHn!MT$aWh
%NDOm=oF5e(DH`M,(\pDLj@?JN)!_,/i&')5kc\SpM[mUg9PHas0mgYT!5L\kg8G!7V;<:$E3Z$"TMX\c5HfeWrmbblWBlJ"@]rWM
%%Vk(?/90]\Y?1S0%eDX(1=<8qe7_m0[C0hHId+WGqEKG^$bqrTS0("-OQIt<)"#@`A,NCP56[OFD#V1bUJ.5DhgVrU;;7psj4\sr
%ZG24lYGf4a0>U+Ck)$6*>/U6J5N/P1WSFRpdcYNhmcVdjT>>CED%us;?[oiDW7:e_iVTV*G^T?"^Q"]]Rq2Ej7Wn4mUP5\5s"9l6
%1[b0bXbV?SG6W[p.po=f,X(q3WO_J_9Y^T(hk@)S[6^caWq>`sCV$P$Y92/+U:#*XhQKou_cCH@ot?n5Lg3>22"L)pf,7JC<!qTE
%HF83=&=Tio\ug[P:MQ^Q])&-!)F[4FV*5'oNB\`.5FtAf0srrG%Yo])E:@-\h$Pb&d#("m@(t->*$U#]eEJ0EjrTP"S+`eEO#1(O
%;sI@M'g@;t6]\q7#cY7@);_P9)kgT?Wg_Aq;\TG9Pm#_K2/'h&5qQ&*ZAl3#gtJ,4Per6"^KVm[<rScF)q@d"nRq6eb:PZ.5ApAc
%C1#\cb"IN:r[@#dV,)ehe@F(F"G3HTY^X%pn5MXlR_G[bDQrYG[h4,)Q<(!b&hnqOn3XT`XcD'm\J%RF#FuH2e3<<@%s:NN@`j.p
%2/JR*Gi`.=r[#]_i*H@o]D'BTCpUM@I]J0[[=8WFm8GJnRZ5-*6#4O5bgDLQ:T$kQhb*jaGg#NBe.b=&8&EngeAQgrZ[u#ae1A!X
%[8.Pnfr#c?WUj>rf1!(@JZeHf<18e!m1I(j^PK'7ECLbC'#TOkEG\$h]Hh]A_e(^Wb#tjua'%>npF?`#Vksj0k&tH(h.aX3hG0ro
%5EE?aoQq11*sVUqbpQRg/D`eWIR"VBAtqXjMY9+b,<IY@YVX\<6ud7'`1kc]e^eEEUVN:H>0d,JgZ]0OmUVrSBRd3DhAD)7V:2Kr
%Wh54b>!D-YhYmGG!;et]pA^_Dr[5M\:OrD9!;et]p4!/1rrh!Smg%K`,%B@6;'`Ku.odMo]1VIj$B`(3MPV,USD^ap]f:]?(_sfR
%9+PTp$@dIZl1U=o-=a6&B,j9l)Jorr3dj2RrfI`'E'7(c&t1eU$o#CXB";K1Z'mNkDSlGL-Bg1;+1jYXjFWOKqHYioPDK_+KYsn;
%3YmH]C7aau#:G<a<M*VnAtY212U\-S"b(BOprcfrFFRg^^UM0<fP@jp+6i^3hp4&1h#3#7Id$]0=$A:=p%D%lQf9+Cg=JJ).B!+_
%G:HK54A(e7"HS?E\HoY#B\"Npp>tijg.bUoST8EeeV7H*qdJ^SHnd.<@\OcnAk2VX5tC*Z.S@InH6#-!la2gQ&I*[]o@<gaIZ5<?
%=-FDHN>BTZ5&$H5oYZ$!qcUAqCP$/5rB[2aH7.!f%6#XJbI,&pn,6"n1M1R.ZqQcWFo?i?R$+'Kj=_kX1.,Fdp5c'>Y:jsKiJr\i
%aXkn"PQ%lJ?R&+He,=j7:^X]lOU:u;7(lgeUgj8%(W]Dke;@&><k2LN1e35'^RGXcgCkI7^P7RZ4&\A4M^eC<Z<qFi&;A-hDl6ka
%dn,odl;4\r@*nglU/mT`mS3QJCOUZOq`eX_@tGlY^IeFnbppK&(dte&7$t'(.Wj7&\phpQ?Y^oejn$NG3r2LXI>=?06)3;8omVF^
%$2+$.1LI/eGP([0RJoAfqTBaTc!%5ADW/c`L0mRS2kF!k^DPX5%!3uS5&fS?:Lp@jW+$i2eO!8Y=er69og?JYe_6^Gkr2G6e.0<5
%N(E<.]LU%2W78kKWmief)kD,i6f`;r@/>(SqRmdAO3TH/D,OFjA2TI4B#-65d)Qdp[M09m^X.YW\eLlq7g$,42k`MB"''*0#(+:b
%:pVGGrkM)uWS8_.Mo"bTI#o,VdjA[?4LW:_ainK`6M?LAh5QGOeED[Bm2)#^`II:@#&I?)27c"o4ThZ,*VNu`^JT)[C45Xgc>."H
%q"XC;h`F&sI=iBt`rhA3eQ5(@(f22Ol@!12Feq4Y61o`SP_D(slM[M1DSr.0pBOCp-gmI4%;AIo3"eCK(FJ&nS25TZI8:,C<obc:
%lH2\#A)sPV?\Vp[)2?JSdpMP>(GWiIrCaCX23ks24UO/5`kE(VV\'oE<H)pJ-9-6sAqZ@A\:R;^K&`6]qf@"Rk0(+*n[TdO4a_aV
%p\+(m;?!7E!QEC2_qm:$]SRm\O!1?j"9H\d=XfS]_\bTe1Vajbm-cOO5@<&eR>0$)la]rSQQ(QX#tjZ=+oS?*\rWt[GT#eA;m46b
%PD\g-kE+H-+Hdi#J&\@(LF8W7=NIZkRQK'RaO#F5VCK8oHnZFTs)KZJP/$SH0i5X5D1:`l8Y\ni+0aA[7S;ef[ErVR(;E1!7RX,Q
%=mF#!^=tu"_QETBAg78J0kc$$Yi'\Q'OlQGP%H@R@6\sdEepot"cd*O/G4_e^;4o^oZL12pZFKA[lW&IJY/o^N5TG@DtofagjAr3
%_3f,)ngib#nWtJD]=n!/K`A6F9r?ffc&cJK)Ckb!b4HUe_57.$OOS7o'Dj*$3tk<MqSoEG9>`UujLgc/:D&/d>g2g<c8lpc"qfHg
%CFnN:c?C7-ATtEO/NF^EDs%$FO*><aNNo,7khi&2pFSra"ST<s/'6r+iVU$;K)\f!j$.siWs@PIZq_.ro$TJ%'T^t;\./#*Q3",A
%hrM6&DZ@sB^Y@6@Y!/Jm5A1C*eU$VdF/<QL+thDSAAS9r8bk$*e#br>2?1O>\t_+.k6X^72Pk#&`+RscI/8[8r!Qd,XYd[:ggp"0
%,]-F&Id/R_)hk)k=I*-INW#/&dVOm309kPl3dn([hTGIl/LT3N(E%!X,]+G@i$<b8($em_W-%?%khQ'0BtZZc=.A#P]efAO5K?^+
%g?ZMmkGJedCXOPZ0iG",mX.GdDH%^d/*"`8,"3D!+1hK;p#)-S]u@a*JG-27UcSCsN_t`6Yff%[hk(g>g6ZQ@)L&dCiHHmM?Q"'*
%;>D\(VA;_>QehpQT+R&d#&YE9(>gqpfBhg;eR0&I[a3u<C>/OrJ:*pnUo'3F`@;t+^)q:F*_UbEi%#8bVt^K?;nre>PH@et-_#:$
%hf3*p>lU)?LM0EY;kKnWC%Q$)[p&AB\a'dLr@\m&akJeEqcuR0o@dPtoX$$[_MRbRU3r\LqXOOu*b)*s)1GG`g&SE;+aK[eBid]E
%U=lGY(S^Enad!1W<b_O&njQ2KC_ODD1T@50@.VG7Zdhq?1=#QV6-IVCXmKXCJA^r]nc7CI@ees',kO%snPpdNi?k1n<'FnL^.?\"
%QSnOHV;iDqfaR/\^[p+:-'\[AO`YWnD[,OXE26Ctn4icJr(f<G'Vmj?D2ZarfZRgk?S.uOdcaTu2`_[ub:pQ!13/\Elk4+p:L'&^
%'CB<o'%YFLf/ep1s/Ir;C;"q11sC!?&^W"18FPniG)#3\jnnDNiG^b<oT+/opYj;T%5Y><\F$K^9!c5(<2%#jSMsU\_Vs@^(7qk@
%:D,15M1OR*mGIj+*F95JEcYI\m[o".)%K.X1?%`^r)>YgYWG:kH?MK!puhGPBUZ/fkT0-UoO4VPYJm;aqq.\TZcD^A.;p`%W,9Y6
%k+9r8:7U.S7d.bf4FbU><-EHTFd9_=9Q,%e?OruQnZ&mHY8.&*oT%0KI9;lRi+kpQkdaH\,4##-UhR:"j2iVDZA;O[-X3o1#:=k&
%3^EFU]$W/`j!ue5cGWLfIJON(q:Al_epGBf;gaR9+#[FAn=`8Mo'M\3<:99Xfo8dCF6qJf5qZHX?2rBaEk5'"E`&=KX_!7/\=)5Z
%1fMT&UL`o&5F]in((J.T_JQ_DZZ;V9cYq-Ap4h]M@u^"mddTq]BQ?03A7Tl-I3UOh]qRZ[kpLu[3S0hd,ogR,n`UZsQWHX7*(qkJ
%[5O`[9rL/Q_h84#:[<mkM_A-5SG76(8(a6$!j8<m$q,;kn'Y8"p[/=ddKgaeXaifpp[lYSa`tWS1JR/EYj%Q7#B>/BFa8+m4K35D
%V6\:n(9_BprqLdUc"t%oBBM;lMd*/"k99N(;I)o-?8b[p*&Sf2&H%9F-W!X1H[/>o3fh26>&NNMEV:kpl,NSn8i4/Pf+Y?W'fVT+
%k7/JQAm"m#cfLML]l8('cuTqfg:JlW_G[,!DELtiP^qN"fna9UrCo4t<R7KS.gOBRbBro\jgM>bds(-2?essb+(i^MdP/4U3F+"Y
%5"AO+s7eX];r*k>iDRogdnDXdfs9orpZlFs=4tur0E*O+Aa4N,k0A16Kjja*R`ZQAXeag372+q]EmflbV_[qtNL<B*mr,idXJ4pN
%bfkQkV^$L=4AD+k4B:3d%Ylk'(,9_\*=d#U%^=A17Bjkmm8Q&cE:FiQ>k&VufnI#e6qQja/\XsB(-8&\VfNnp7MGaAUPGIN@.Nel
%G\ZYi,s8l*3=*qJd;jK_,q5Ei5K&b'iV=4*/%i+>]FIH;Khcl4D`&Sr*`&WL94rH]iRglu3?0]m,2qY(`d1a&*?Bq.^0:u7dt='m
%3BVH$p>"A>fNFZW$bQ7`0C1"Yc*3hH[_jVniOeSoKjOlfYKrcOiJiiQ_slgAqI;M4et_3Rb$l]f^7N%LBBORsiS;gr,.p(n]a=-I
%G,N6)Z!fDX0?r@/%lU2FnBmc4'0\#r)r\ZZ^(ii^/l';s_rn#g7;"%g^:I[$_DF1fVf):t\9Sa:.,%>Qo%?SX>eT@HK^70JI/'[>
%)MDJ[[-_gJjmk:a3K.m1?Rt<CiPC\^4Vcg&%B$)8WVrg,eF_PG_UHKg<&D:f9uZt8%o_22Bm%SJpKKK!Pl88#467L,02/LNZu;g"
%k"BJgM;I@[<;PjT0U99)Z_hn`GFDJ+S*e+m_s4rnFj`Bi:Rr!@MGoi[%<ReM:/0O\_Y7!j(/8(Ah(bcFV_gYS\pHNh4n<bMc!^P#
%R@Yo#Au=amc)9esUO56G.lc;4\p<O7gN-tKg1uuMdq]Jpp$'E:o@7sF@/"Vd]:e8_oB.dmdml@;eo^G-4Z7^K*LWP6ot+/OV5$q,
%](T6>9g9SDcSWmgq]u+sh4I>(c:f6ren=-3dZ633]<.tKD0>;m`X\WLB)J.qf9qW3DKmM!dH>/Nc"(X&5C.4nS1O?bB?oNf>;J4]
%B1FbSQ0IV&qYo@#bf`A'37Ama`Fm)h_f_D[G4+?458tWghot?jV=puH84I7D%d#Z];d-jg]Cg:D1qUN3*gnUin\jeUeDOg0Y5.WL
%>CCBKZd8@V8$h#tV)9'lQE7XmQg4*GI'2"jZeVP1\WnE<H7mT90$lFr>L(pYh#>8cH`f?;Zp&\V]N(ORBankGZ"@@h[57"9\R@%0
%5!RX`O3P^[b89d$fkl+com$.A5.0"Ik'%:CebPu0NQq:j`^4nKDYUS'?[",to<%r9rVYS"YmG8,^TehdLtDT`"ikgf(=o+k_*U&h
%HEj\M3c^qH0$Gp&gls8re_P+lTpa?!KgBHl.PdWr<?fWNkY]:Ck;OTSGPubslS[.P*5u9bOc/&fH/tY4hMX3KMO5a]g@XaNg!"5R
%0g9eE^$+6`?5GQ0Xd@"DF/HBj4P)#6??U(-Mr_V-/A<rYY87G7qs.o@nou*2]ZtqIFaL,.brf\4keU/o)*QllkXA-CrRpE+^))h?
%VG?VSiR5UAFDAq=m2R[Z`B)UDfm^*/FBId'04!EUR7ieM1V;-d^RW?Ag;TC\Cj%$AF&uhm=RtDC4LWkCG@G4YN>[)Q3T#n2`(ut6
%_oF8Z*_fr/a.9b]1S/jV@[d)Kftr%4/AF(V0C><Ja.'^.k47$)\[EJ>3@QV.eS0@j4l!bU5$Stmb?(URGK[pbp@@Os?!1B68?Q[h
%l1BnBBpWkombhb^4+#2ACZT'Tf%Msc5.e._VeL8O+L8)P(EuZO:.a3l:HP_QQh>GjDf6_g)7-N+Ug^@N7u`L'[V>*)mk0TX`V>`r
%XVG+$2*X6B7P]\+kua&Q1Mo@HRR_71f=^ch''=97dBf^q&+PgX[6-uMXn=PqcJ#sj:0ABk1BX\$3RbJ6k"OZm^+9b1s4j0N\'jMD
%qfMWf@TR$"Rf0h)kW4W[WD1F^+1@_FC:W7::C?hk\[g(/?N&&-GO`[n>X)-2_8:'Fm9R57)ode?m<'3#IMKk7s7"fJgYV@EHg-dV
%?#?YaG`BDTZTil*0RTY(GN>[acFX!pp1_d$W6LFbHYZ8)MiGp?Q'L-(R+0aMf#hRkWOpS,Y%MF:eX=*_B@TUmj]41*q>P+`F.6O=
%T'st.%SGINR^OneY9hWCNO>OZb0F24]8<W&eup.GA"/hLoo6q*AGr1n<*?t#S(V$7mb6gCdah`C@m*c)h)O%kgtB3Pg'8"%F;s&H
%bucOqZFOu%]A5U9k)VDn\Y[M^Y?UQ2bD0<FM54q4-OL6fiC(*HdS5JbDI8Q=l+3#$<\GPYkE"g!jR[c`.5em6nso93LTT'4=6l^N
%;HqVLDQa\LC!uO(75LJknf-i1@'H-'Qab6q1DdrD`]ZHJB6FgGn]^Cr;_lgMfIpd%k;F73Pd_LOT&,-afu@Le1,j^^gs<)T5P_jB
%g<435HoU>.Ki]Ja>B\6&gY.K(@%+4Pfuj<FCGaJof)35RG35atZ@28-h:QTs2BR./ML-:(a[kK<kOc?KhKeh(HFo<5ENm&PRuZnP
%MGL^n:M7(p]nOAirndM%h:WhQg--t3`ZW%Soe,k%pBKJcaqs3(Mts9Wlf\5&*^8?9BVa)R`RBRHs.!7%+%4r*Vh:e/]fnEbV[j8@
%CH%[!pjR,R0QX-0LY#JBV8LpObP[Lm<16#)ft81Dh%/oXa5PeLnCYp,VN)2cKisl,\/oc:-O\*fg<$5fm%0_mbF9l]K@AYnEc(6O
%YdJjV0&.I:]#F0g9sj+!2qNpW.gq-Oa$ICd\l^t^5##>OXdi]4'$$o`ip+^TICHAOm6>IST@N,1cf^Ei!O'G5-QhZPk?$O,e9S73
%OhG_BDkAZmUC4+=O"^BqbNQj&H^VE-/RR@@)r=T)e>Q`V4QSN*MG#IjX&_-A^Xh`L`To\Yna<u7=5LHDXB37tl.O),btYa\E>uWO
%cd=SYWs:0:gXG1LrjGaA\p%2sRD(`k?e+T`mc*JZr:Dgm^U'TFpQ^Z7kX3;B)*XkNqTHe4oq53OfdYgC2A9`dV5qO3TetOb3\IV-
%*$(<jWb4i`hI?;ViZ/HQBUVPeY?t?lHTS((Zh4#t4g&J3C?t4I;R:O(]6:Q1Q)Z^jX!`%2qmB<d4MM`a?g7shd59(<a2>dLrSpPc
%'7M]tgT++?bH8+Kk"Do0Y\kYcNT8KQlULao&'+=q3NDF.(N,tLkO.BUqMRSiXM139P3u!C\Q`gOAWOOej\W.gVCl$kXi+D:e[dPW
%]C#CtJ%hJEf5KB.ASo,ejMhFqh/2bro2ORKlPeL9FSD_Qs3U.$_n.bMX7ri,^RjnYVKuZ,?L&os[qEDO7<bdSRB?AdB4Do%)\\@9
%jN^(0^8iG\.,D0U1FaL#:)&Hf3LlGs%_3p_<c(\!p!96KPpb+,I&gBLXD,+CY#R\C>o6Yf8JMF>a?/r6oD=sjMXZ7rRO;l.^'r>i
%c,7*Xkh>k/r+bJ*C"Jk:N270#Xk(tD@lq>m$SO*UV]2IWJ&XM)c8sE)M:8SdI;<mMIl"j3kRB%[/o0g#Z\55j:$ZG`1QP2_9OdZI
%^6i#,lLkni4_'nW8Z_'l]qEpD+SE6mS564h[/pM+)jO)Z56(CdY'fo*-?M&SfbO6rCQNhU9j(Q&-&T;)rT$^^n.a\tVMD^@205@8
%DU+m'1mtq`>Q/`O):u((B?/U_a^R;[p?Pj/gTB6Xem<C+M3WP&(!S;S%W`"^eN-FBprYbT*tC+"gN+1Yf#:6Eoe]3(\QAVHN',<q
%.XM(OYsrVu$q-$AVsb\q3qR.S'bOY0(%\#0P(hP1>8D3UWX`_]s*5bka]@cgL%LRO^Uf`$2<U^5K;Ag+C8\UaD7I)q[QFFU_+Ekp
%T,Q*n4oZd+le6C$m58Js<Z61oePpU5F$A05h@,VD_V?Y"&4rtk4s@jg<mPXsa`_70'j]^(?)CG?^%!Fc>gZ&/<\h;c1W#YD?ZXOf
%Xh)qO0:.L9qYp=XCoN_8\jn@*_e"9TOks6150kkW2PRn/cF#IAiMJ\\dC$=GonlV<^?'>ng9\/_%;0Z!A@Zm/S`;V)[?5cl3&/CF
%B@XYlhbNWQQ:l"7\T%2@LM7b+E6"_m':MB@:[M9^-+]4C;kMXdZ[:+a]p*r,d>U_.LH,&qMf*?AQ]0/Nj16/mI!ok>qL!8&e/YTX
%`]HlI_)0Xk[6%R/m<As6_YORBeLZI.iDes2d>dAHEitqq9!Xh0Nb7S"H`u+#BmqDjPY[@l[PRXsal661O?Au2lmI^G#o92,s)OPh
%<Ni\E&"CHKQ@sP@E9l?'GVlTAmqi:t]Bj(nKl!#O9&l3]d>dD@F.j49VJ3@1HLrb"?0p\d^#%5;[Bb:ra].it7aE4b/hTRk*WPOj
%2W&D#'(l:*KX_j+c<57;\<+ljooun#YL(%m["]!riKQE\e`'sd=kk#+5@X4)2()3B;#d7+"q6nYlS[Ni^.6`C`388<k.6]IPB1c0
%/Sf-[R9Hf'UlfLu*N_^`1."K[.s\n11XE2B*c_hF]m+/Pfe"X)+B8"@YH>M!iE^1_Q`fe'R_Dk+k0hf2-#:q)kcg=e3pYth_4<l`
%%.&.WHMuYDONXm]C584ZQe<;%FhG_n*Nd%rhYF\<p['I&Bkag%SLXMcFO`EsLQg8ZI]&cToG\:@cIhfP&XhM/*q*mP[PHGYR6HIX
%anDLq]2uV\XH,<9dnKU\2SZaZ\?E?(KnnL.EasM@-Nhl]\".&L^[mgP/+/XB=mu-;VHJglfp`RC]%Nq*JWZFC<\B3t6U+e#H(>=T
%?pSLm6qu!5cf[l$Y0SIkRbbs)G/pFr;MF_.Hh+N\:[VL(g2NS&)EhbQT.%9lL["_P;1E(B(?[IGjS[gQPAl].h+,=X]Fe&Wm2ChI
%?%2N`^]J3=o#C5oFC-<"]%+nT'eAU'aQ%=SnV`h!`k#[NY:9k233H_3@5KEFp@bq)\[ALZiEpjhO,Ijh?eeH$VOG,#*;$f`$``N0
%2AWF5=aA[`g>5'AbBKjUF"TS=2'Oi#BmhM&:Z0\+EOrlee]KD3qU.]VEs.+goX9r?AJi.YTHVe>PJ9/4]Q&m;f=CclL,<9e)(N04
%bIMdIF(3p3FgGbe"q?RcJ7M,jV9nL84HN6h$/^c*(bL5Ie74c5?o^`i-=-gu6N\WG1"`Jl)9W)5ML_i"B]EfON;$GkU-G-4^BR6H
%OG1.Lj\DlOPrH!/`hkT4l3*7:a492^&djTGd55X&],=Odj%K7JQl,9?6.<IkL3*L2`e3kP(fbK/ZHi=cJ*!@n;f@X3JRlP8Jo5tU
%G[HV&(<rI@qiY+&?PTJearWe*%5c@kp,2!!pRJ:-o1OJ5b?e>'!fX4AGE'UtTAfI6aO2mi1p4UJkm/jkDo^LX]:AN'0E:ldepoYg
%!M&);2l,7H1G:Zk16S8cbj&ku7jBl8XK$H-@pJT75=P=b,/.S+`]@3%\/YslnX2;rc&H9+Y;%9N6m6Da1]srP`:<K@+b(+;N:uNt
%BCS$^o4Lu>69j-uT%"kVaPkq?^9\p'in7X"QdBmQoq8G?Xa<Bm^#2S//ApN$[G:_R\<pCKNl'31fu8,BgL;rP5/r8Rn32f"C^5\a
%g`T?$=lnj8n>?'sd-RU!H1D7df=qa'gsrHQ/nr&DluJ?[G"Y[B+)n+.g""koCoM;`p,69[a_=ZI[H'okE1/<dG$<R4IX0o>YK^=h
%TBuh;a%9e]T#hC&f>ZA&@6/PLSrN<P>&S@I@4Jpr[sO\85hso4kt0=:ffdIDp(e`6)^&j5hsMcacB$pOX0nMD^23HQCH^bmk+*3S
%nsfD&["s2P>'q>lYfdW3()Y;=:N(#qRJLp<YhV4L-C6djRMKPk1o@FjNg>,3.a^):dF+CZYrN-/09V+$bk(XY](,,<YLZpaO6$-i
%l@bI_#M2,<G-JR1fPOM-DP;>;*XW=X7f.Zcn8K.5M1^f3@k=o71E;l'&*1MHcDR;/Qg*VO`qkRef3;4f#ut;fqr>5,Zj`K`8Va'X
%-3;A+:*[rD(Z&4U3jFiT`>iq<_X:no38/6on/-ocDe"EVV>;jQ]ejT*)U1G#Dtoa&9=IYnHe-Q&/SkCb\B!RLc+=f^EEY8fpu+22
%5E0QCf$7ic82VolaPe[DJhKa_DJeh'=7YJ8mVWi=F4p9V_3jn"?GHVX9/FcCSm0>*VN-]M[%#7iJP$%R05$Kh#DKKh-;k;%)"W,f
%:30csjWc@l=72(nl1`:+j6?fT8O)$a=/$X<p\+]<h8Y;1n\*GqIZtiPU\\);=-/]X9>)2.iUIGRKRpR0D)F3'PQN'+C7H)+;#&0!
%J+qI8JNB/4ibnZR\p7>&%;%$"M:K;_.1.f%_J]ZD9GY(:cU=8qSrkuAqb.5A_YV-rW.FL(qu_&pk#6cNPkL/0`R6Se,oWQ2ce`m=
%Ean]`5!G*.1[O8RC41@!S1L7t/np'*VO"hcR'`CNfLT)Y:N[ePf$&:%^Z$2\e?g'Kn`4@J'P$`/'(Tg0edNodQRQ.H_REu:YnDl_
%,8`HX3GP_Z1A6tFh71+'r&EaJZ2kX!jsS),Q+qfXP_(e4cL*A"5H2Z4-tQqqMU#2(SQ=E3@_l1@[F<2J?`YRUPg7mHT5&Q\5\XT-
%DC`&reEQe?%Ei[c>)+'p2u+fVOTR+V3&IfEh'`/;FO@'`R'8=>JYAU%kuTOCErOcpX`'OJ'.Xm0ae;+P98N&'Ob\Z+?X(*`[X%?K
%H`ifP$P^ks.R_1TeP*)lQtIMYREf$cJ/Ocgir7GPIeTq309YGOSB9W'mFt=JQpH<`]@>LU-LF4l3a4UZ7c&Df.\$5nqa0#eT5shP
%#A;.f4oos$@iq&P[ZK^lr*f0[AGLDFETbl/lK=(uc%O[np1\rCpa3aHDTg:=mXFhCq>ID7`bUJ\r>8"`;Jl=6kVZ%[jmHV`h`b7B
%0Hr=N[,T;F/@X!r,O^*1bP</g4N>J'@aPFc<3rFOM.p;!S;ifObJ\/If0=.J[:@oe;qF,!/H2pi2d*+\bHE"W>fAIeIl3ikf:81<
%0iQM!9lJb7N2>,q@cd*ha[DUt2BR1#:H-iT(Y9opRJl2<1%G+&6)OPD`qk-KZ'(S.3Le=5<r*qe[Q/@IS\X*lCQ6JZAuBZiPd8So
%_$B8_9o$iXBZIZ;h9EUII?PTu#?_Wo:@,FPXR==Yl^>fX>K^=:`m`uo2&=5"M*$O@lEq+Hms6Q@1OBWZ?d"b%YI\Z.E`nl5S=:tg
%m\f4T[);*%p?m3&iO%]:P\pr9jjYKs;-*Cck&mt3S.!)?RE_;M\9X@h;S8,.PoP1bq$!+$:Zp0J>OidJ43.oo1.t&_P\-0QqCfs,
%1$SN^O1t:KC=+q<g+Sr2/sHo?7:PY\ilGu333@G6q3"k7kalj@>[*]pA;j^WAU^kQZ7`%M\(>Q"q&f!(q1!<P=btu)1bUoq'V8hs
%P60qn3j=[W>]E>uCedn3ETN8%=OFhO5q[2'1e@%?lIC_ofCocTR;0oPH?8(3CKhpXJ,&Rof#FGI3tG-\KZK2!5",?=%m&%)]"d"D
%PSY:FIf?%MQ:j-j;k-4'a#%0)*!i\eUmH!TH[BPOiklYSKift.f,&HXaci]SWojb##`?gNH7lajEb;q,AuF.KrLf%:7hNV`m0OJB
%4L;LQKgaNS8Qo=:*aRn@g>JP.h_+*/Mb?+M\YnZP)^I`3"3KT#2_hJG\.Fc&e1J7U_=:T9p>$=P_S^,+@AfC_T5G.9F.&g%6>j5I
%Oe+S:4XSD&Pr0=LjW2aHZ/<M*JP!=)SPIW5[M*G]Gi\I1ct[G+8`gt,Pr1c5g[n.e>"G2r(]*5tkS3tY^9mmf'bc-D3-P,`BaX[#
%&ZHR2*CHIVXWk"+96Qm:(FMSNY=+\eIhWTG.0--UrAC2iJ6k^B<7ne8RbbRJLhU1M'9*7mgb#cr@YXgp53cZ#g.CXDieL<F'?n)I
%/9PukOX5dq,AWShNC8uV/6?V9j\26*3P22QH_&A\C`9k7V5\I)s,kbW9mO3OcRnL#q3.%TQ9DsM`Xg=)U"lbC5\W2VO/^]ppH7D"
%-+:Fh,Olc.)kQ3I>V!@ca+m1,_XQ(MBOL15AuF2CP9!<(BSfG2pTQmJs4St_>ZjFg/%o<7:Oc.2^sVZLc>k48mVKqXBigfd^Wi&c
%G,A0>khLj9*c]ne:U57b60)oWe,d3$D*e4elkK`%ISYXP?@4&CI-4mJUfj*LpZ=,LF2MlIAIVQP$;j&P&\<%Ieq-EW1nJQ]StD&V
%R@WX5+LA\aOMcA/Ngr3XS#$mI9\I8;:,nVe(WWSKppKqDS6P+6p84nK^89o\i]Yu=8kYdUcF^uF[WB-ip.d/jh2pAh.BXZGQ%uo*
%4/2sS1Il*L=-F'#?;"!p"%^(4@TIid-<kJpOK$QKVk(Z\?p/_kN%_r:VK'*;8/1;A\gr!P!`"uSmqH9$g*Sfd<[hb-cZad8HuD%0
%D=n.46Qem;Vf\'b7kUYoHb6bjRG-BNe<jn^&Nj0+[d.5I,WEol9)3GoVqobPVs%oC4*Np!NTCfE[GopS4br,f.@VGt3$N./Lcp#?
%iR6<.PukW?QA`lVbbI>QGc/YQ8hA=r,Ju)_99CODj?WA?N\]'Zf5%S#jADY`ZJQaIhI[EAk>h7P16ltG-*u6+Y./7Z[[+V,mpnp;
%9l<iOfe;DoX%GYqrUgqA0L=F?Q!8Xg?I!,:8Ntun-9#I!QH?Ouqd`Q^OjqS>>"lIYmtQ38AQK]aX5dY#d>Vhej/J7`ae@!,>@#?5
%:8gq<TK'&-XjD9\4R(oKS;l.Ab@Fui1oKKfo%Bko<1*M#X`6t"nO;%(V?*K0]IrVaaqqH!'"a.jXipV0""VTX)#XO5,6Fjgi]=(1
%=DljW*H,kZ6aTDlHg`i2CDs$KNT5]n\8'8K4fU,uaIY$GB(Z=bY)cAE1:uMV2Rs',gsqt%f6WT36uFpOY.P^$e/4^AS%Eu_BBl&B
%-mtHI9meJ9TCS(D/oD-Yh7Mb)<Q#i_!(mU\Z^'M!SThS\(4C7<G;XTZFLLah2ktq]g!2ZXrcXrio]&kf*bX]nRmiABkW2qic>.nI
%,pS25gW&@IS"oGW.Tk@USaDJ8n0ZdO-Js&42nq5>gMW#1-AnJABB#?8kd3K5F`T7#Xd#0P>aB>HCasC>C(Ab.LEj;%-:`ON-<BSE
%_dkLhhG[rgV*KDg<_@Ou[G6"L15`W(>YV<VSu1<::/T?m52Pkf[P'HNbJ@kf3f^3cLlF:Go,B>?bP.7@V,$RMS:C7kDGn)MRdhKG
%HaMGmKiGCEdaO3F2<kg\dDa7D7[o7Bg#UoHoV,)(6YhR2J^a0*d]Kjeq6k6]ZJ9>lB$b[KD6dbmZJ"!A,is>XTj?rT5N/<X9'P_A
%5f*-*6Ktu5rieCrFIT]!]=X%ELY;.S288s*C%1b3UOMSBjc&5dp-2llSG8SWn,Cu'/H/m'rlEPQ-iW0U5NF>E5uq':E#/I2Ccg_S
%pjXl+".1bAo,e@>;WS(3jTnXJk1a.A8Gi;NSc$s-9P>aEVLssr];H^JUJ$MIm61Ho/H<Q@Mr0.OTGt?\gN!"Lb/Q#RffY$S)Q%H:
%:.Y?oX_$d`qW#.Ope/.Ys/"M<l[,=m:4Z6?7D$Qhj]c&>_s_m$DY!Ct'tNf/M*G1epj;m>A3WLs9Fog&aKe-u)%-A11#l74C@Mi)
%))V=c\0PU1[\;q,I4ttm9N6G!9u=-6S$)RREG;sQgp^r"_q!bXCO<iG6*7YpgEFK+ijrXpTpTD<EPj]jOJriJ>W_Qs2)@rkY*kRf
%,4``fG*>d?R']<i'FF'FIFE3BEJ>@_*9qD*DVWWRoeH;N@N<RqikB&0TuoV"iAko0-B>?),ApW5;>:!um5d'<c"(U]))?TVKRkR(
%LHa)5W1U%LfKXm=mDa?:VErI3qI#^LNCb-bK/RJm&hVq#4!orDNYZ'MULo6n&s$d6aL'd5B@.W>)W/nU(T(us8ng"dgpT=K1&C^Q
%+%$jaMeeXAdBGGPfKEh+Ib\nI)T.KF6ls2d@=iHoLFClRKuSPX1dOhhDE6@-5t`s=4Yb-(j#V+od:lW*8'H--_?!GJ=>V-rlaSbW
%#&FoOGGl%.jS8AZj-V"GFlTt9&rO5mN).X."MG57Yi=%mY%pp.bsHn'UF0FfasT$a9Ue#WeH)H@22`#30LE<?l\uK;ig)/aMj`):
%"qkE(Z&QR%d?MR/(s(,2<??Y<D;#9J_(\UC2518c>:.VUcr`#ka93uLfk<tuoV^!C%]"R7dko6&ri3AW^DdAc+L9Yl+5=5Pri=U2
%rld5K+C\7'n1BHSmUK6@-.H?i:1Al1r'>.fK".'^b+_/%Ef'HU3[%SV#gIY7Uds2F3pD;q?lDk4aK2(lBt2)4fDrFu,!;?\8X%Uu
%9O\jZ`<VPSc_i\.&X+'IVMu/?M/\n6,?W0=Sjg:dc-D-nSe61__ks>qJC#DqX$QZ_feeCofl78X!RN1eZ&')/bpt9jT_WCpSE\I4
%GjUlP'q;XgO\CZmb4S/,nsC^&Q3JN(P[&jQF9o-`a)t0i-R`SYjKL2G19=&@mcrH6WA]uB(ad\@@gmj=oJ8p;bP+QT_+JCP@J`l@
%Y,=9R?s8m#!h0r3_3h<K.nB3E:R#5qCua3ecN\Bijt#HVoYpHZpDC6<Qfs&l(a95WYsrLTA2si'DYSlk96d%M5:I7BLVsRVdKp;I
%%a&Q.T`an2?qoWZZ>`3N67`8,1`RqV+s>!Z"tfoP>R7N)SDk1Y)SRAhCD)qI1X_=\:YeS?&J7_Y5U3^V!$MQR%IQtb5TE;ll4?ru
%9p'$1.5cnj$-Os"9NofOW>hO`-ipa>;0/fT$II>6)i:Jl6]?/N;r&&Il1h?Q83Q7fbg^=^4qTaYR0Vl!HaF#"WXT5S:#[nFK'!/g
%e?5[<KL_T!i&f;V=:?#^(psX3YV--U*eqR*oF9$;Rm\PC.KmYY4?g$Xm`R4mUrs$@-:)L3H&K:rK$po4K"5lRe1kYX>(N`\3?fG/
%!77/598!'Jl=mUldSIg1-<hpSfT%g)/WXPKKFlq(3*p7J7P^tGM(r[W;Pt#"cH!X.;OTEDrL4LR+oS(]8Kie0b\]]>)5Q+/QWC7&
%Q]\WgG(<7V#DGH@cV\aMnprSNZu*(]+XUe9"K<[sqk6fq]qV<[BM3G[7uU-JD>O1XKmM7fTs-\cY:N!c*b6QJ+sP]R(M\J3L(o=H
%qajm9CcfE>krhfe?8l951_>HOO:OGZia`(cf:f<\Tqq62fCT2=d/A\*dfPcDE-,bcZ:Uj!H.0\u-FB@11UDZ8B#&cS,EQ+qgXJe#
%I"rkuD/]K]Pc9>*LuQ66d"th0+;a=jnA1'Zi1OB^6<j-$66!9PZGtrkPAo_n7IVl(('Ge+[ier\$*`GWZj=Qc8\tG<7n/@aU!re*
%jT9LX-u+jti1]?:R5?/L':Y1Ok'lYF&@Ml%2L#s=dn(F=[+R)(-$_6+/RVcA*1bcSX<'),=O"_:LptGWU0_ZL#sgZ`@@Z\G!AB&o
%b*sW?],3>9P;lrG3jFof@j$Pod,F)%U>TMkm8E\G$9E%L2Ao%-i)4i8k:q!HCuYI+Hj9'tFFn'q2eW\eCUbW@`&+Ru;2BM%fT7#Q
%Rsc=J_G"0Qa^[;<-(;jC+i$,Nb;Z)\TUQ\rp_\Vf,IL,*hS^1>:aQCR)qGO;+pan"AL@\:>>t_;f4AM[XbB'/D?M/K9e3S>hT7@&
%bp.E<S(E3_LDEO;bI!L5lG+]"5^oEMr(e$(R;#!Y4Aj@2mGoZcP$L^/)X^5M,hiQrNEAj6.0uOa[LSYAJR!Vf`4t.*!HN<'$Hmtg
%:L!m.#:'"G^^(igDbX2i0&E#s-nN37I?AUT")G_#(_:/>ehABO#\G'-"<WB:'GE&-NBY#rD[`))Fp&hhDEQd#$Qo*ml>^h=_/C/L
%-0sOS8d@]F>uoAS'H8mE!Gjl'>tH2.2D>/.[K1<pYI:KRZjtn^ruk*q0hC78Fa[m(1tl7Se/gnm>J.!+E/Y]ZEa"Ap[-gT=na\6j
%7glC]g&n(OpCmp!]OE92S"6s,941cP+W+!fTCi)pL'GC%'9<q8D/)*KE4h5<fYidt^a%W.$opZ5Gk/>R*j'HVPjrY2[/3DToV\LO
%e:A[`^r,id?f;;SBF*Q)Cr[8T!<*^g:VP8GY`0aW:OrYnn?I4Hj-I+udHe`$0Oc"cNb7G1j@=4n_7huE"LcH`lklraT&;5O]g_N0
%CssjbemP6b&`C42DGJDmqXA`]Q&es[_&9Z5`>\-`1;G_bco_B+3A[EA1i>9>j*83:h/=VeeoOLp2b,ADb`S+W9l=JMRb[H>3f+h6
%g^&TULb*:bnJ$9no/B&dN$gBpL858@pr2T1)*eom"5*q:'2aNh_L,-5*h-Pj1JbTG2eIEZ*bhkUbkM\$)E*/N,ole$YX:=M-W/M0
%<cJ[]MYA4a4Cg\cJSOPCH@\#7iH->c@\-;pKo*d[F^)Db*o]Y4[TuIkLi:L/+L9dB%M$S&ZdBuH]C;[+i<*"54X=<G>DlKq]K)]I
%gLK4O2TGqTiE(gE,uSO<IM7rn4")snKa\7A9ZE]Yi10OqBM*P-0f\M<lVn=b2fl&-8Rj*OX"tt]1;=,63%B$#))hUC/N[EkMm]+4
%Q%7K._AFgZLlWQXFeo@oac!f^$-Zm9Qi21CZ&>M<iHi_Y"QFB[G73Sh#B\o\lg0]^,="D67"m?^^Ystg+?)jO16,caH$L+U:lK"k
%)6i$r&dV5pIO+?Z&<XqhA5cQD*eKOf_MAmM3sN<B6p@60m(o[_n/2^lWsa^u0s_&3+ju^i-]YW_`'CDDkXU^46!],M)f3`38'4'E
%i-+Ymam4$$^"&6:ZC!sB633,<&569_NnE&?D:P34D=UPt`Q1E24I/b1[OD?V+beMKj&hP4kQ]EX#GZ)oTjiECS!!7t/D_VnS7/[;
%1Z>WZ4,Pt6Lq,L>KFW1$3SWS5`Xo;7&.h7frPF&+*+"c&P=SCB6EVpsl&q??02enXSZDhRfJ3m[IU@B,OF<[>Cah\+biQb_q*`@:
%l>U<Wf(9qp."VQfEEn#>JL+0qj%3F3F,:mO0[.!DFZOnn?0NKq"cpVif9PZ_fmT/cj@O.og)WT(VLl)5+>1'T2#pQ&M_T-Qin?Xu
%3N'aVgfD\$;3"XS#0NjL,ZR2c`2h7.`1!!j<"o(:<_`pbh-fCm(;dbI>7eQA-LsZeS)L^IrM[BJOW5iXo"XO_e'OoJ(b<tM4sYjL
%!pLe6A"-5,dfoai_?j*"aBO1gLt?LkFi5O@ib5cG0G_;Q5bU70!RqY6_Bi/Xh%;T`(Ce2Wo&7O1YW7*=`JB?,#0=T;+FkGS$:kI*
%adQhJmY1r;@":et*)ebp+k%_!K(EE`)$a:mmV=64Li"*PX,t531,0C#Ym_i8`pk%mUS0HD$tVj5W/2Kp?:!tOXm)ls.%mH2TT62E
%_hgLq)YC+BWi;*9A<>sY+@R."):K"+fDU67*9>`0moW[%D3TZ<W+q[F=HEp_0F"Rm-kpZKEDQk-Trjdo0*I`*")XM`50VKGS<[7E
%;5,(-:!nup]L%32^,iA>W!(HUFk*(#./OU@Kc?n5g^pD3$2(E.ElZVYjMXe5U]YABEiO]'J1_3gFgeNg/uBK]EC3td17k'kU2MI5
%-\8`pk^4Z=n0;s;?Jmu.dM%0:<4j0%3gO5ac4<KjQe*2WQ01XEc8<O;6RI"WS-"c`Sl>[*j>o(JJIG2^/u2&Zah*YPTWp.a;*;^K
%U%-)3Oo[n<NdV!R*tG3q(C+0IR.F]"$TU^s%ZiCFacIZSP7+.(q+Ahmn)4%nIWl21k"$:J%Nj9caNfVYTc7GpF;T1`7b=<`a>o:h
%op?P_3!J@g#[+rtVTIjA*R"-kM+;0'\-H2f!uH`AXMke7l$Q)k30<)]9?oY1<q5>nGT/toMCKlE"hX6XnDhWuct(PB+dO*/q9%_#
%aFj2!SRs?!#km*7l#b18A0OMO%eMk*I'JqZkL+O=4p9O$<&B5i;Tt3;FoZYY"Z;+3!p&EG!9CMtJ?;UuMAbB1kdI2#Sk;/VaQn'P
%dj3OT5e7h)[!\[]`M-34CW[D`)*6c6O:<lpjTep$1(oN_`#$IO"ZidPM(NLp1Bu/c++X$W2;+i]e?T6KqTKdD<Na.QgG8mm6MWQJ
%;GH'pS9kEq-&/feBnHQ$.hOCJH+$[!'Y,k<OtZ!m"ERs8//;c[W!K@CFl&T0Jb>[Y^ru5<'LNMcZ,QOTTr(NFHFESnSiBIT,$W5e
%Glo;uAL7N=#qLp=K?p-M"96\("_PqEiUn@TbhZDg,Z!I;jsUE8fF(lP0FIp6OeA/YRcfW69:?PYSSn`]"BYft/K!8O/%<e?B+)R'
%Rkk*rKfl(_^-2:,Sf)JPid+hn09(BH(Na/95rP7@$mni&!D/ZP#>Qn!+"IVjF?)=49Bi^cC?3Ga5LE@P+^g$F0Xc[V*o<hbcB'-p
%&,S'5M*QlK$A!_]FGGhcXjE1T*i+/9`IhsgZ\`5=gCESak:*M<cd),-CkVqR6S:'\G]C0t?(\W6JJ>d":Zd>'QY]Tc!4\IIVI47P
%.4<M$'fQ-XCW^"gfLPGi<CkIHQO>;Fa:=q\$eD!qI=9F?o2qIP_DD`I!AZh"KkY;+5`+F#<XT[VqNaH*H-X."Xe;u1&-:I554'%#
%=K*'h_a4tiNs[?;((JMrgK0uO,7A]M3%"t<k,NS_EWX7Z]<?5R"X0`ZFS@r<%T5%Jr@goc];/RLgDfh:`PdsAY=n<>jOso[)JiW<
%&0\$Ei^_lJBgmh'Rj\IGP)9S^8&>rgHX/3p`P3<H1(s7_WZV@0@Tn?\>:=#iNMJptGl]m3ng19N72RNF0c41C%U)R[O=*s:HN`\k
%m$MN1^^SUr.,eP[V*hA"j5)tp!FU[72T$f*7ki7,KjE,cHl>5rYqZ*iVfW-8r=Y'2M\ilO3ZDh(M`RpUTn^Pl0*$of%`%l?m!(!D
%<@&=fZiZoBmOZ9JTYDeAa;L*M0P`M-/M7iiXot)%"78?2EiBPd9QmQBVN&2`JlU>&^]q.)B[j];DjnNh2M/_0EEhK*\t`^PG&*ao
%F:Rn:&7!e?,>^lE4:^"5@KSf%D$htDDh*gNg:di`*[K)5K.)QAi^oGf_58fEK+m=O&3O`%HK71O6Wk5]ecX7=L7bEGUW8/0j@Q;3
%N[oET<Wrg`E7iBsKjug_'S,c^/4]R;#MOk>4!]C;+A8Mb[117WE+[9,QmGBl=D.m9%'U=cGEg^4Ufl(#&`Z85_\dOj<*\o&4Eg6g
%<UqE1g7L\pG?!.g$Xs[<nl_c,X,JI4@6UU[E!0T?P)Jt=Y>hY0`@UU*4uFTUk)"SC:Rn1LiIi8Zi^*V[4kc'LnIQ>kP;b[#+^R%U
%E+2&iO8GMHX#.#!!$$3HXcbX:Lq#K5QW1%E$5^'W?;QUTMsMif8&I>:`CNiEWu[(%I6N_naRW=NJ97Q^k&=LB.q,nIpZX1Vnll*.
%U4=e#Ym!QG,D[f-&OJu\+?E.PEhX18_/F9mP*B+s66Uth*U!<IY(Y<+bFU&V7o"TVa`6:rgF/'P<C5?eQ!?)//SP4H%9RWN+B;7.
%MQf+$'F9:!gJZ85!*eP,Co"gg2$m@<0PE;Hbs%s5Mnq<5O*h$j(m=QOR=%2n@LhHc*:]AW\I"q;'M'uY:,\2P\&>Chp]T+,[$D&^
%4^U3,+2+!<k`g`!h[_;,65Sh$M9!5LA$1bEJhmP*2-[!]K)a'k:k[+]SKVgK@7\,\(RMuqOk1DoNtM^42R2BPqAPg449FV,*((#]
%(_N/qabXW-Uj3!H,Wu-G"djriei8Y,0S??n$RB7N0qqb\hC*+f3AndU*YeeH$4V(;[Y)nGW/OIJS-FM/j?eobTYd$P.RS'UY!bR:
%@>a$!_*a3?O&HZ_Om#[sne$kr3ft`uUF\BFAhH'30ol)7Fu2<\7^5.@e0g`$o&84MK]=[6/BQtIDU6,tf]tjV9UD+dk80:njoP\n
%%WDUqW'OhMHX+GOM!I=4K'>[T"No0pW^7DC#QgCW>6/_I)*g\OO.d1?GcDfr%.s_$6j`3TE&nn6(]HBU',oV2Pk)Xp@?:QcVW]Ha
%HT:"A:o*M6f1:1BU"PU\iHtm"B9HD<4Or;MQ4m?Q6s>V<!="c!BMHUb@lCc%1"6n?.RD$MAci2WmE3hEm""rXBNG\!T7GYL(b]-M
%W1Y@/SFDkm.A5`=ZKpKQ@lb)92$3lB[O&,q'H[A[Aql["S6i.Y!8!LHP%s!6AeZ6udr<qLh/<@H7(aKATVbAmnm(K,k+?le!tB6l
%/i!qHDSW/>Fd8aP0Wh+L`A!NN\uCTcbR7B*edPOnjp^?^+%&3]4p9$71K<"eCUqr"(7:6c>0tqh\eQ@H6\%jq7AXBVd&;[OW^93:
%8^='?dMF3@#VjPr5f$83A:Ri]fS@=agI(cjk%--_[?i:Bq^BVO:Bc+i`^FRkPj#qROVVp;`*XlA83mRdhQEn0m!4K(*&<pE,qVg9
%Q#T!C\m5O9P1+N7oi:WLe[\(;nAJ2IVBMSTaOF3-/!lic%nk2X&CLYqLlE`0(K(<FMZ3Z0P7(-.Gk4T^"/hi%o*"?h!E@HI=.(([
%)NnSsoo?k63f_Ha@A1U/YXq-oAt-Z;T%JI]i2@BR+0W$2"eZ*]NamQ!j-9[oe5IR)(9BrG`-4\ReWB,YNbhE9LH'6rV"DP:Esn'U
%L)%b<8A+LRSBWgJ6:Fi;#)9Fr1K;IXTH$Qp;5:8CW(UC8:t(W6H^kO[]Q2L6)P3cj6=q7'$VG\)38XuKW]Wp[GE=%uSQl5_(MIh1
%$!/d33177WML9g(3,,>_\M6>j6l[>o&Ja\+;H`\S)GLC#OH?0EW.&)/<rnQG7"uUP*C=i2CpQ7"VkE*F5&K7((OR-/gBd@]!#[9T
%$(G]kRVHNiI!nEj.km@41@\5;5*U?jQ*OPqA6130MOYhE&5dD=@An6&"$$OL#4$SS`hpSjnA1=KWDngfaFPTQrNa"g3oQ5%J2kTc
%M$k^n5'N/8*k4pi3A;?aCDaSB!L8Uc(RJt?`5e'DZ*-er:6W"CUT5&-*3A_i5!XjuO!kJn;7-,??7-_Zs75]XJYG`8o76Q9b7#)Z
%i)lc[r,$C]XJ8)s(b)U.Ks^>f$o2'Z9gI\i4(u\i&#\o=3GMO`&B_5"c8";EgJt9#AV6h77b8hLL#=LU.=-N?o"s;u$)o[8\CAJu
%q'At($CkqSmMH4(A6)p_,?ue"qDu&=!'@-6a6]O7XIqC1E+cjn#Ne`:jB0=83B(SG)<s#/?",<m"';4:T\*.+X<o=jBrMTn-1cgQ
%PL&s==320C5mkk,`YpHVj$oGUPC6)3KjuO@[@S%r<7qIW7"6=rqGVuA)Ej23OV#K#BspDI-E/+fK&fP`OF;RX,3;J)btOl;7Z^+6
%A3M#Z/m^'V93<%A.]0`6'KB5:?WHTl@[Hh'#&Db;WEP2<&d29fTZgX'>WE9$'uDP':r&i?N#a0FMG[2DD6Yqob,^/]U$KFeW\0Ej
%.Kj>fAf'<*:gi2=K*^TNh337Cdn"`hc)[7q-&'CuL^f%;&,a8P)3QQ"E2*nr#)H=c(A7hgKFtQnZtMAl75dKl(G>$]G[=Z]4[?__
%%QC*4jP5;R98@X28gYNH9&6h=^qQZ5s.0-82o_$I'l9<kV%Xu2B1iA:6W=ZnnG/n2+:SRgS;WJ<F!%ef;V$SERa+Y7Gb"*'!E,n=
%)MJ\Op]d#Q5>#]r\b*[=]-Q^%'6F?(L3U,/JG9<Tf'Gt&*;/CpFk6H":ZnZiK.C^G/uN1hf/<*(52#D^U4[kj8l1(lKuRd?-l[%h
%?&<(,0QO$#W.m?5J5j;gONrRr\Mt'-_-fmsJH&:llb]&DHqkf?O'"E22)$"0>Y[U&UhWL5BUbUc25T4M(X>-9AKF)=6mru2BuI)Z
%&Do7m*^Ndg7SmC]omid4+b6!gVTq+(-:eBk1<*/a/f6'Q9Mu25$J5[CPC7UR8(_73`7MdUJr?u]4tL+l-l['FGDW,W)OJ0;d*#OX
%>%LW[C!"0r4DM\1k#A\V)6T%9q2jq`8#D+(<.1i5D$>$@&UH!0>Z+d(S,q+IS6@KM9Y%9E1n_Q=L>"pt>ot62PS.4dI<Q;i#%-K_
%Koh$135e+e@A6dq";)Ob`8flQ8_2k+"qRW4JgUcuNg(9p44L&A*.BS'`#=4`2Jn8J=j7T,UbEMSNiW4JK3\_KT,FZ0<V&Ym!%>6@
%Q3r76:t#iGink,#L]pIV?0?n%kQ0BsP:H-7.;UCY6;klcS^HXM-&b+8Q^\:@\3`Q'I8pu;$X:t3!1B/BMK5-6EoGN0FGJ/L;7IF!
%qf4fUVTUPDed5r].1C?*cVQ.MB0Ju6/#\^!K?J['@M,^TkRZJ_[eN5mr=U$Y$@IT0XpM=Pp-ne`?_o8dOHO'$A!NaF)$(J-JO`PA
%VU%1i\?$b>2.&d20GM^(.H)_2&fR6*?uZ5]P(ABmT^b0?Uuo1g$?r1HoCKU="LsM08/?g;'kIHfh9g%Id3&Qk*Y@X6.F?)J3HYNK
%;!'Hdg7qqH;3=,/jo^hULZITg&n9?n3l9t!&jY"*qPH6`Q7J(<$^W/%9-DXI.#HN>+E3=9alg.L=<(MKluEFRF"/OD5_JB4H$c2&
%5U'5+huIHp5fCEHVH-7rJHjiQ=/@#JQ!/-]WiZ;:"T9@;kY:_2!N>#1*9TYu6r[!Ubs$`SNe:HeWl#`MH&79,&'_T!;=5W2)9ia.
%_E3mdC#"lV77;FE;D>'n^W>%OeAqYOmM[nD9eRn$"=OQ@)9VP+e/I^W)mqNp0oVku\9t=?&S,le0j1qifg*ZJk6AASDd0IAARCom
%@XN06cENS=1ecJl[^ri$_)PFCgcAW2;VD,.QG\Ft`W!H[mA2N.M(J[63JJU0%p,p!BNT1G!VqG-!8.545C?2.\QHp`+hr`<LF(R(
%/1H%g8KaKC9,p'6pAEj_!(&_NSU4HgWF<?;8-mgrfmj06YWgE5"[>%_QFc&N(+?@DkdDI;=X`>83d#ZLHsb1mjQOk8<Vjs,;V@7<
%dTcpoK>D7UA2&I$6:q`)h!+HM[FVSD]*m0Y&SIBDVns=jTksZY%<6p7+WVB(o$%C@>"DY=_<i%(q#2)tIS-T7L>+^tW47Rb(<Paf
%*.p&\OJ.?%^s,PCXqb\L'S:5$9p/^sE5ZJj\;kLnMQC'YM*j)-o+n@n'E`]L>!PJ?iX]*Z21V(8jPX'k'6LQ33=W@bIKSfu8-G)g
%QBA0^bN1Z*8.mJQR>tEtU<Jo-pYJVqkc2XnWsR17c]pMMNDtii,A@F=F]IpK\a55/VK=5'*XhG*YjP#P#^=a/a'?Oi_i;\SFJMeW
%l0Q2fI'$Bp\V"#=_ODu<?YiaA4W)L5EAOb=F5US3*")6L;"c(LQVlG>M&2"("Bh&qX[tcWS#P_,>`/rbnaSgd^*Dl2^*M#`Dt"AA
%g^/XSZ3[6VXO'I,97Os0'0ZPQ&fsu<0P[7]Zm@CrjM6u.>6Gq9Op6ha75E00\Q6eg4U>-6KRf4?TNdT4cL\&)'3e"h!/[l<?<hCk
%_T7E:#,p:j\/qIMGO.:H7JN"n#7SK4-kr"`Y&HOu7.DCmYkU7->[1XkE.3hf<R:N__13[h8YRnVeF8)1`1ulkLER]\k=nK=$YuCJ
%K!5*I3o(@$`5gsDr&T31Nh'PeVS$i"]AptcitT:pmg`u;/7Mr*#g2hI+9eW7]e-B>jtn$;h[Epo5&J@;4-%CC0"5QIqbT_5%.lQ)
%OK9'*A[0)1$Z'QPS/)oUER8.1I8O'0=lr*u3.b-q3#)OOL<R=i;Rn4M<f'265PfE,d?7-caPLs6,i<`tHMG9kkth(Mn`DpTD2BuD
%kYPk9rs!./>pQLRL`^bK0D59/kqA(os,qqe+5f\-'DXEElrsgs:Vca)g^B!kE6MqSbp)&/&iu=M^.Z;VL=dkK,g*C%:/7Zs:b<V]
%L)LXa(V])6%d('APimlr@;uaEKA6/\[U?8X`<ScSp3W_VOVsPnO'3936nXT7h/)>=1.GW+K5A_QUbDlqntS<FR13o2&RetA_M'XG
%ir"nA:.XIWBl/+sj9$1t-C_%\b7p+KEC\Gd8/^Z4b)(Hl#1&@a?!06ENS#MZ:DcuVYKLDqSFFMnUn\^j8[@!![q?(S3QVHOpaIW;
%'F=r-hZ[FEc:J0JVi,X>GNnV0Lpb0:)40dmC,+!6jYu<%Oq8!D#AuRfL)oo/%7sHmhH]5i0FLnCW\tqMATR,Mb)WNF_,'@4",Dpb
%adDV+0EEkZ0HM%LZP>me#,3$#k4qVfE_qL"41UdcFj"Jq2P7E=LLDL1;Co=>TR#P0fa8&,cas8,7&9r1kF?ehaj\aCi%Q'YD0=K'
%oJKTo);JqQ/-7fm[0)3((7g*3DF]Qbi;C`$3+8th1-9sM6V!!$'jURaiVc\sUi%+PAD#$bn9df*1Xq*>#@C]85gGY\/FOH3rK0St
%lnZ^@,\d<,fs[-Z0U2$k=dgh*jK%TE%1b(5q=Q@7<ABt6P"M.0S8h._=6_!6D)_bqE%?SP$^"+>jeaQNH2*@5*.c6!(4]@=4:W)d
%lig5KVjCfWIC]#Z9=6I6,1St?/jS`[!iDpu8B]GW>).M^?*6kOUjQ@"ia`?nj_Z[;Q`HTYjWb*A4?Yt*ap5HtJ.gb,]&[ZrV4l$5
%eZ#ud30ZFZ>K+#(L+oMXAfW!iUs?u40d/!eAl%2?7O>uL\sE+1W(5f<*VC6ihK>U_gLNm=)]f"L.2TR!6+nL1H"XW$-$RF,\Us`B
%WiHS9Q=c)]9d$9sM;kX#>Ed8_6[`qbEF]7Ha-2+H!)->)0rPdG8jdF:6@aauE=WV*Yk[6N,TjK<3c^<5qh-3CTCSu@if>;@;KbOg
%8(j^9>Grc12aC7D#@Gb6P\PJ&i`F_/6h-bZcXHEfE-]BRMr.fhc4?:sQ@\9e>+MDr)`KHYSoh-:n@5.=P?VM-,`DJm^+F88Yebbr
%V6QMaF#@POgJOA8H!3gH'%HCdKZ?"+jIE+7ne5e:C1iGoNY1HsRh9IB<K>C[!41@1q1;`$E7U_fIBMqpdE"u/A@-PGl9M+a"X@)a
%Er?rC@`^]Y"OVq;+7]*V:qnO9UTO-VETlGmMY=cq\SWPpjsU[Lilsd'FGV1P#Wj(gOr)ctco3r<,3CYWH5',ajH>$oP:O[j]E\]Q
%So:,\67=6E8A2.)ZZ"T!#9dn'q9:rnX\kFT2IFk;K5EreTq*>aYW2A5)*)XSCdAjbR<^BaY_Ooj3!U+$S6E0#foF&jaHi>4J_5jL
%b4djQB>eW;n#@F&a0Sm`+]@.?13g$dfn5nI@J_D?&Mb;e:)B68-Y*:cE@K$=g&.![(5rM.RKM`=>d09#W4O%8'I5J&"f`>QWd+!B
%)[Y6&1>o"''[W&A68cad^I]P?60AZ1%5HsJ10Zn2#?5b9bsqt0J&X@0#1;LRJ1ZH9i.oK$E3cO#UT''51R1d.2V0t*2$cNiXP,tG
%7!I-d5gYT[E97I3M(h=C\KFo`Y&T#kHmm*<a]QjX^m\.f!-4ML5k5@eJ38,*'](QL&3tX=Xs8q#k4<+7SAOll//cH?Wp$C$&i#0R
%'=ad"nK8r,>G02*"o&(:,nXJ/i_0t-VCUll$XG"2=`.VhEAkeRiOooMJ09-[d0\Z>jif'd4iVpg'UYaq4CE+u2?5UcS![#fEZ`B2
%<S8$N)INHJnT^'dD)0TTWH@2F%"iXp273-q10qV]WdKb<'G>CW3d[lS*Jk"V7(f5/*PmQ6?>8L!_gQ(pibC>gLnl24$d[(<?KWQ*
%V*F'*`LCdHfTHuleVB7faM3N,P!Hn/2H_;'A?PpbFsd=,N,SNJk>\YONg+kh*RI9h$m;!0Z[*AL';#,e4[hLoCJ!VLM,"kc7$G3P
%Xu5<0<lAb>N:GFE5+FGD`5)0jl6Ugt!TbIcWI<sb43J'7.%Dh2X,L#:]E,fle4b.aduq<X\h9_9UD\?=dH5(4ANX=*\Q,l2]G)hk
%c.LANI-?/EPGhO<'1/IK_M.8e+]T7h\:;?,J?lMXMB3K`b'--o+5qgt/U]uHJY"/@K>'^E=AMnI=H^`.LY7ig(FZnSJ6Lr#n66m(
%4>Z*YR+(2!0Qf;SnI[]$,;QfIf7He7b#G;R0ZBYO8HEi:9mIB*QI*cqj>no#/<S/O01QlC.VFj/YNdjlJ9$OHTL(%?-Bb8MD]^gp
%pLC"e/,+fn4r7bUf=1OK5@>814RoM=+g3A(_d'Rgd1.8t3U2#h8Y!S!d^Y8*!t#c\@K+pGi>@)<cW^ELU1Za1"6*B&j<[!#j)&oQ
%DArV4cX'Is,5Mdt[F'C3S0]VeE"0?__/J81=BW>kJi@N@LemS^-A*;k"Qut)?QS!7+<s_aGs##Z)L26S*\mB<l+P%H#_7n3E?KO1
%]Mtqg$lF@V9pe>(R;&[14\,&R\A6#.JfF"A*%;3G@F,5f$>NEb.@2n(]5$X0BRpAk(,/]nL%.<)>r6&V,hG?bOFuRmIO&#J3?jJ\
%cVBn2-,t]8JlC'E'a@Ztbi5R;U!>?aP4:s*STCIRe$0pYT@[nU%N&pc5Za?(KdSK6%%0pjmQ('4ZfN^$32=D$<49@Rh_YoE(HZeG
%i=Y`n"RfGo;6,Po1^omqBY#rs-D)C>[.PXR'lriUP:fW4i"@oRXT1B%+?-?4-416YKUHaj\?:uS.A_\\kHe<]ds1HO(%/=uOpt2;
%R&onp(63@%O/"Ec8E4`=&gDTmZkt4gArruELuFIa>G$-f?:+,]as.+'qKSQ;MNj2`nH4k8@IN/4=4R]Ub_%B61[s'u[gXi'SO'+L
%;F-0r7_\,^#6BI6[tXe=n`Mi%']a:P=6&QpGQsbZq-ISJFnKdGr0JKPiYNJPW9pWYa11,hgB*o1$@lB=k!?QS^3[&*"Ms[L^+W!H
%'2VqB:j"'bO>et[[M_e#!hh:!=<Q+\BP?<l$,PkN\.NCph@Xk:^<pVh4aboIhbdFP7YN(B;HuRG0IlY6!.Ku+&)qrbAF+T)VW"FH
%[,;uXT[*SpgtAd]Z=M(&hU(_1-8j!or82oNV-5!4O9V0/OXR6uD$g&\M5j$3Dm0,-/WY_3]sDFO&nlHLh45-!*Zk<eQ7]F.`tibp
%I9D^!pC*lR65$^aJ<$YFqZZA9nJ+jl0kulnH>tsaaA`bcD[Wi5fHnMKKkBhaq"K/tV.+Aj)2;%0[iU"j`CA_75m6Chi#D=Bc>n5:
%-$Pu9p<DISSP!m<2bP_FH-4P'CctspMbj"l`#EgaM[M[0mC_0'[HCiAGAsuZEPh[ggmE>Jo=^_+H[GQa"6BFBYdkbW<OUI]Afhu<
%a8R6A4fBd1-P3RDs!"\QbT[AN'[jb!]HQ19=oIR`_r3u5m;coDbjN.4H[M3DeYD.7Z_l+!d:o4Qe*NJ9qUFaGg>)JXjc1@$]^@:^
%aSsrM5]TKEjEQP>cPFRMDFAuaHfb+Wm^h^^B,?'/-05q\mb,#nn)g3;E'a4g4jg<+cHBKVp[i48P$ehArT&)dXJj8g!l@M:7FC3J
%Vq/35mB`UGUlhfV[gp9sq8:6^Ce^U68/hN08MaE/YGbB)DmZgV<KV3W)7!BW75bRqOf?c`h)[h<+RtsY.<@u/VQCrcmW(b+VMVDk
%S&M>6CWVM@P^Kb>UEGj=5"Lu$>QT;lcY2nRiLoL!K*$<Q@8^Y.a"E/G=E*anp#3Xug!c!Vd6bA01m]V!0#Kkd7tIcD7BBh-,F;T]
%5=L(9U7@5sXL!:G(@%.Kfm,;d?*V)oaItS;;Q0'!4C$B7`09%M=.dmBJq.aRhppLuBG`Q/4:92?lW5e.F@tf@;EhhSYYp9-BlhcW
%ZR9Rl$Y,dVC[6"fM93F>PrEbLOJJ>B`N!UrpgH%cbp5-BN8:?Wo\/9@8-rWm*Ua*4SC\gWOHYFPN`&?0QV(SRh-3GH0ad4Al$c)h
%"%'u0)BA+>U9o_.)=B%DNa+HiZK!9jQ_Qr%F/83I!C]!POkCSa*6re?;2=^!>2EVHU&4bZ6o&8"Z35Jo(JchjeOo$Mfcu'kd+2f(
%FYSA5Xt`KP(Jq(k+'RV\,U6:!-u58+,#XaR2oknu;3_$Y\<_M17>h,2EX<K=Q`X.j22*qS7o7#^E_goT3gV`g4r2[([Tnjgja*sg
%d045`L"VQN`nBEhOU4U*RH-s5N*J3&?:mh*cn/$Ym8AH]:FgH-m7UXg0T#_+dh5di'dI>9IVLaA(%$iu2GG-iPgm.Q'FPX[!BP2$
%4nn1\,B44F60?)W&RJ>+mJPH"!L;'uc2O8#e9\rg%N+J[kL,@EIp5q:%en*)h4uB.pd3AgV8#hn8X]^X9;2<n.Y:;3ZE*f8dD98p
%=T%OWn9]X+OWSS+p^b]79rpR_B:uFmr=8bmq1Egsqd9/X5QCH;FW=2YWkiSd5E8DhHX<UfYa2)M2/1t)9\Oml'0.<B_;jYek*7IE
%F0YT"j#2sZO][r,8rCfo*pDT#k0j%(T.LB/CQgtg3!@m69;%GCfl$P9A@4,9]7WV5I0%afW1\QVji:_`3mn;GYTIR'm42*p<.+ij
%lD2d$QHra"HHYh2k)>KPf_R=hlp`$X.kNcB^IFUdGW]9`#B&,JKpdiQ'`m"1o$X)^[rYF65^(Y@+Qtr<_kd)j;4t;SlNf_J3R;`J
%%>hF!FtrYZ#CJX,\3(m2=U&JYf!5I:;RqOKQ(g=47ju'50<bf(M38Zq*M=+q+A1LaCbZ-"&_&:Hag&gGNV^,.PT#&G&4U'Qq_X_K
%/BQ6\o5#'1[S/U=7-#HNFsM<'k`kK!e*DI40a'[H@scU4GdKeCEK\e(k(*a25qs<Fc_7S>B`,01V)T+D-k!VE3LRgUqmpo5$UG:i
%-!f9N)T(nm9NF)pTD/i4ikKPmY/'%$cF?'Iopb24%jk&VoHK<([3!$d<$rNg+^jcDLf9mZL0;[=*k0`9mV%A)j%@ML:E`m:+E5*^
%Et^a_=O'(Krtql!SVX/11kP6mPB=+bSP?]-T+mE*ToH%BND=gn+mE]LoV=k&e;j;[<"qfm1Q6eTrB1'QZBpM%F;',I)J-A0d7m,@
%qI=,6Tpg.LN^,MRUVg2m;-r#;FYakjMZ\d,2!6<hru!UGTLmN6QRJ4EI*o/&WXdH$R=+BHDtRJI>AC]7Q9$MPWERd(K/%)\JeTK7
%?Z[8nhRgOFGiI;)PX>o?iNZOC3h.I*"PGh6IbK#F<1X>WlrH,(1#h3beR;YI0-i*I6kF'a']s3&aC"q]234QsUp&j<6<d2o<)pYO
%>0N`6^G:<:MbH_L.6hsPEd-.n38(D#V!RcEpRP_`oo"MRI!3ES'FRspMRqZ0d'<e^IY%"GU?G1-:V'UNA*9a$73M]3+,4^lgZ'tt
%5+MtQiJ58bRBN7:lr_'(+nX5]@9'k+T%Q(OqR+1\Y03mtL2&dJEB;6mhS1R!Yk-"<hW9!ES\f+6,Uk,mjr,$a,!).k5PZWg_4;(V
%l*RarT3+fABms/.YltBC7^]9+"#spB:p.JoVpEBj/8=#f*LAI@OIi[W<2H4'laKlF,h%&*nimk`8=`hfWX^c0+?2Zi[%8soAV\eO
%RDtCW%@hAh^kHX\%`%&BO=f2@KAAfk@*TNd8Km/;]=SL%G')k]-jLWT+C*5[AgHb6DTel+O$C6;Kt:bkT!+`dl8d$3W.U!hG\j(9
%ODZ6!3E7Lh6AUM4L*dlQa?Dj@K'e[G+o/)G*>t`M9"1q6MNl(V\u%n*?^&I"CElDp=r""2_9)XXR"K#iiQ(1EcGO+:b5TdDB`Y.6
%Kf%rBI['urp>]j,]q6`QC%SVN6h=/TI)7*O/#b,fDHY^.Z's@KWXu>C."oD^QA:W7/%C!59!SAYoP5G$4!Nak1/?D5K:!3\E2kE?
%)^`[*8h`,f1oh2MBV"aO.Q2:26%Xa;O[M)ta)rm%;Ad72,ijZck6hC=(FGh/X@/]Y7\;8(?TOO&Yr@(h5lJ\MorFSIZf11"?e/le
%egH7)=#R;/B!JNZARCmGL>`C_KucmC;C!0oD!Su;KDHqf.Gr.2ba+!Bo$]@eZ+,Vt$6o.Mp9A4M*!'f:R$UW9Pn4=lhb&GEi8fp_
%km+Jh+-ucmk%mUb3%=T/akM^Km!A9b!_"q4UoI-qqs`/j/$_RAieTCkG-sARO;+]-ZhX)?>mWE[+KEX1;cN-TGOO]a?1N&]G9JA,
%>,W=X6Tg,tTV4(#q"hnKMt6!+rZMN!(\`?-fpZ-pK7U_9Zku,[SIDo:H&*H6.[m*iQ3maUX%<_O:FUuV1e<aEEcUM<8.D7$p/6j'
%(#nOgO0@pmUmf:>RgWD+6J"j-(X9AaTue=?'A7'V4Z1YCY)Sic6OQrX.6KmGU3:ojU>F',,U!A#g(]tS_fT3O?IH!LU;cIj$b7je
%)+;AV3IFD?gC`!tgpV;!UEupJ&Be@"W2e1oI*Y8Tn"'?mp9fc<;8FFl#gq1r"LUebc`c[5eN<C2IaP2\GH\T>ic*0$k?\m]qR^b"
%6bj,qKQR"a>FQF-Wc8S(J,M:c=F,EBP.7%pFk6!@B@PfLd1R^O`QBUP(^>un"[s@n^(bCmH5,9"l<,ufj+Og.SqI'k70?t*a8Ef/
%G=UVgrhhKhH6sM).,#$'A$8D<s/D:PYF9q;U6%?umWb"g]0CbhO[QEQktlfRLUeWFVZm?2bQO6<r6N!!O)g]:46$%)p[T7m&f!nT
%*M!JplFiHp;o@c'rki+4^s[KCaS=,0J;#A?OeT+[2)8<)P7M>/^>uLTpLAT<d]US#Y@LZ'l0`'-l=rFo2>/_"I<Z2DHQN\C*$f2@
%ZNAOWLMinmRu1)-D_b3NgluB<bih/U:.GqN8T+,LTDL=<X<4)\T+qieBNN_(>;j:s:]i^B3If1q_@]'RZOn\+?Q6Ue_G@'$3i#]X
%k!!X[e'KdmS-l\ui5(3&_?;dhP#;b?!o+YJPB;noU1oM0XE>c1rq#R<*RqiCn+0,N$BhltIRmEAmTD8Y=[/FZEn%YlCf"#`mF2NJ
%Q/V<Zro.Q<2fln=5)R+%)?8r'5t@L6gdrGG>9V-Dj01R/Y)qmi\+kp5bD=%m8Pl$l<.Z?ngTaA+"%A,%p)B@-a,'cQpIn'DJD?p"
%<]2O9lkag#l*;5p;fq)Hr*tP\e%EaN1erS:b9$YcCo@oRgocTV8.eJq_kl^q1eB.Q'73D7CCoT(*(lKPWct/HD)SB&F^#OC)<;p;
%''U=?]W1PN%OdOWQ_ZL%J?%-IiKM+g'6FX'R7=gk5uVNU/UU'>RcX*tj`\rHEouF2SEa.`4SX:X.T#u.$9]2<<L\:"09Lusj>@fi
%7Adgi$irjcSMfLe_M2u4k:pCc)CJF`dJH)J[9Dlt32pmU'P!5l]Ci#.]ZPK%P6'JtgsaDJDsX@5<B"](i#W_UF5*a,"dZ:Fi!_EH
%4SAFlrgm*Q>pZXB9_B+SiE-"dmJmhA3@ghOFL9:M[tYQI@co$s?k8N:0sr"PlH58#j!c,u8?e5m/dVs'qlV3s%]Q"(>ni50Y#Dk[
%nbXI,aHe=dT3F>Bq6U%p/'uFFfN(d0-&/.qEcA)jH2F$9Akm#?EgAt^Ht\\L"'2@ZcjOUZj4NY3?(i-,Me94l[5u/?G!j`=2")3X
%&%!$439k5oi0@YDo53;C<fsM8Il.Eep11X5_\96Uq"8TJ]0srIDV1$U((tu&$oi_CT?D[%>gXI/3JYPjH11Lcbd^FDD!8oog\u=*
%ALk[$-EY7qLPFLBl+-!X>I%YC3NZ[p,'\:KmN$V/GLn4s)n5\`\i&dP/lcJ!og^d)h+o![os[TR8`[:bs1FAUq6@g*BmKo_9=ldZ
%cB7c^#2`dJbWF,OpB,bf8]NI#R(V--]a2[Wd/1<"N230%rH<b)#K+M]DWf>jq(?n>!`:noAQh-"[1Vr<e:u$J%8\uVU6DS-RA>Ye
%:r;A+[s@^GRNqGcQ\eOQ7VN>/a&sZ[J&C\-pk%0KR<5)j7,L\Gp'^W'0d.KpI!VYp9`ja0.&JD]e)$j%q(`sf`5=S$2G-,ZE^T9;
%Zcd:%N#*^A/+#CC(O0k[]Vea[%=4J"c4CdRJ,A1FBH-]$>UhX7pR\mfH_9-@h7Hq9D*D=Do+68bVn8kRhDjS2e^;5m7M$JaEnQtK
%8GB.f_7UkA*bAu2l=EE&+leh`Z;4KE<b:\t*#4L6CNHJ$$4DbZ.s#k*b9XW/9m%Br8XZZ6\!.<hZnBc>f,'%0G/i%Y7J*#P`prD3
%F'Y%KCFO[XhLBn9*@h#lWpSac.H,-Ge0N(]#l'IZHDMA1is]dZ[A#:mhqI56PL^5IGXBSVFXkN7cI9s:)\b>FenntY#iG:smR$(r
%0c3p<.l-Wm/gPTh2*r31b=GqYk@M!#6G;OI;oO]\aA7M?m<7^T>q!CjVX<JigoS)Ro`LeJKMY<4@[Ju@/"8-*M"S3<SL.3rjB+[a
%HcGSiZ6S<njb8@^P'<f:M>(3Ggp/mkZ,MpEnlQ\'@3F0=jTXBcKt.qp--@>o^p75MVc</l<pqk'>=YP?SDY(_%?T"c&d\[Y@c(O0
%lQBV0SP.$0ZD#2eYjO[7f,!e)^jURIF;*0:iflG8O.*s74KD5+=`#gNm9%ea.UNl4k2=cZFV/X4hLP1N7/N43Z^+G@!&9_hgl@'c
%C$[0GZJs==0ks,cdWW!]@>%#CG4_$=hR#L+<@L(Kn^t(DBQ-_90eAB3)(+#b:gD>&O,FZ%(.=mBd^`r8?ul1P>2F<b71,eK7h4Ti
%Od[dIj^E##_/p]+<glR4K^OLK[&RuX(rYW&348*>HcR^Co&>VlE7W=C.HaZqD(3^d'TOYj[ET]HOf`d8K.f.kZVS4/OB7PsXA'BR
%.m[sZIJ;]P1>+rP1M44.itB?bRt=M4\.4'Rp[lV:jWWnq@X$%f8eUYi*Hb,2T/kLp[90#[X8.n7\SS<dgbY6Q*p&2mU43P(XAWNj
%-Mh>='>B;IW<=Fn%mkD3Srp9\Qbp*rMBfR37p$%?9*ED5"Aue?^5\T':O:XG6`=)ieN"l5fh@i]ZQ?`R#NRsE']I^$ji,-K>Mr2`
%llUFUlhkjY=UK^pfd.qa1L6?i0t6o>dQQ=rnK)EZP>O7"SLeFPU3mOfKf(!,+\3]B'8/6*VYc1WKbGqK?[*!bp,F$Q5^29Zfjn-;
%#V)#fG=;W_4=c6>aWW(QJL,"ddnLe[nusi.rbA>jGoG=0YaPUc1Zld;\i88n2RoQ)\D-2MGj<ftT8FalY_WamibH99m?"=NYl-&n
%IT*8M>;$pX;Q%,EcM$`a[B\EIq'5)*iT]raLJ9-&O*f>W,9GefK]V+-2qhMW-KVn"XK-,qn5keL((KX\$CBGDRLD+/5#OLe;lk1R
%3L^P%Z-Y!hVTb87MNm?8Hg'-\R3*b-))?j=\W$rfESC47CNJI_^!5KSnCG<U'tLVlpM%]H^2BhOEP.F1l@.KnB5"inW#\QniNP9[
%@7(4P<3u$6rNH:6Y';p9l9hAW13e2MD;WjEB<_W(<QMiK"j_V'2[Om/G+.!0)1b6%JlUbBfm.3ZU+9g9U/`[.NE?QTm,lhN(WRa/
%,O&;$TQA3C_i=(o':ct*:#*EiLm'j+rAcs4*#?ZMR^hRd>4[Z*CcZsc(3'H/IPuCr/-n19`o2\SBmBR?YTJUQ3;'1(RKSV.2u_;k
%+5cFG26ugq*`iU2>o;!ApP[n$9ifH?[TA3YD5OAEgLPO*l-W[TI.UPrb\\>7leF;"m#Puse`:_G6W2Si\ql86OW7#eW@Z+?WbEuO
%WGau#c87&jVa8&+oGE4F`4O.nnIMb..p/d^o?nK_=n?<4\tTaC3[Y-)U3u65f$$*C]ZIf\_bX5<?8>gm_^*=fW&]r4Xp?\>]rOPq
%bWb9UA82#ek'Gb9BU32q/2+0FF/_@.a.T[\/na"m@)'+o[?Y'G\(lu]/TM#/MGc,ibE:u/FrSg4CC#c9j4l5E']pc"Y=VR/fffFb
%f+^FCbPks.dG*2u=epA9:oe55l@[>#l7*bZc]AmMkW+U"$&M3*p,sV>8&Y;1h&(Ipc8*=-VO*[trU4ff'ZJ441U&f5lY\O=XdGE+
%DIG<0aF6R#H/&7BbTf5DcM:(udLj""S=[pTSs.!X^DcmuNam5'4l9W@dDoV,>(7"r]Vl&0q/<G@+:Sj&?@R?UB(tTmKAXDV(NRVU
%HHDV:41-'Is(k:r_&TNgh<f(iWHbJHkei.C5oRMg*da@k77rObYc6ut''4mEmJ,f#(bAe!_lRZ7W>U:iX$p<rFfZXFZK.N(-5mk]
%a+#YS(JDRbB4c;&Hc[GP.@8>662[F6fj]Zr?i75_Q8URc:?ZB-OnE?bU(B[V>W+^k/g5;,cgU4eD_!f]5$#<N3PMOpS!cc:/rNc0
%M5D\N(mDDg%9(M><LgukJ&5$f,0r,?LRC>u-4)N*a$7[ZWohe9ms"c.`24m)F$$BM+:48^U:p>C77A,U/OArbOEeU&1I<K-1XSht
%?!"*C<#FTt=YSJ,-2e_QmoFf<_I0_[<,Ygo)#?sa9#3hA.F*-3#+Wa?Pp&2h6\PuW<E_HooiUI#`*jOd'U9jVNuT2I4p]R*.>NFq
%@NWTheL,/XKC)@TY+GSGa8Bmg11p\k9J*YLB2@UN6lr*h7/W\6]akH"iK:i"4;C?XcN#9`KG&<PF9TH'n]_mS+GpE8oZ-RrbL3"0
%I6b^]."mSsMW`an[:d>W/)&/E6_]E"fON*W=E6CZWSjtZ`k\k[AH'qe)i#k(g*Z&?J+p#ZC';IH6W9t`+OqpjA>6"p>O97p6UL*F
%Q?/>B4?)fB:#+?GMfOA\fhFN]PQQdmZo]D'.Zk97+jfqGCdhKm,bD\2X(Y@(PbU6_El-A0E;4GKR3Z0:m8CL=,k*RT"i2["']&XT
%rgb57hNa/LeVguUF;!P;U1&S/O:n<cEe2Y%LAB<*6'B$'4tV;Rp3Xu:&Mda1Z:*51-F4keqr07n!e8UrD!]DXU?l\-l`&*n09dr=
%\gSb)jEjGbh&oSuc/F<p.UN^$6-dY*W9\IpjHeuDrZG7]fAFY*d&cX+;KqJNdlY43G?s`dLsHV.LOZ/U4:t@\dU$9E=T<JH=X(bD
%>lTljJC<&u7MXJdi!1#@%\)(li5buO:r1&#B<ssRLCCDlrmCbo(3`5A>kZ8#!^H%!\K&5R%_`HXl&\dX"V^uI"cf&=@CQrbY0)c\
%Ajq>(d`1tq%^5_1r:")@Mf==YI5O!Z85rJ%H93TL;s9"7;/i"<YK5oYnqpno#g,4]6K$,DQRHA[b=-_Jk09:,:d_"J<TpNXXo$Hg
%FDlA3?SntH9AtUN;b9/$\c4,Y5bpZ^pA&`('"VV5Qhtr1j7"O*27>H!j(-\K;O]Z5#PgJAG3\O1aF&nP2<P7;FqImls7mP+QDimb
%p1o.?ICBe'>K4QhR`bG_:@InBd5_eR)FqUU)%u%4?1riVn$!\([jNbbf6Pj;!OE;A,'ft^:SJe/X?#@5P,o&/fST9lF1pYT$S#at
%>"5RBK79@uT()]t;r7n<]-prp/h"Fe#NG>.?^DGsEI3J;Zk1Ub)!O7Z\&d^$(C,SoZSob"m[/d^\['k;WOMXTj\)?o"SLP"Nfq51
%*%-RXjk),hrBK;_L)lPf3LmT/)cE"5KNY"-9N9C^:,:Z[3@MU"#IQMWbYbN>/MEma25gpXh-Nl#$TTpT_.Y;$_sOBl85@23d4*\5
%+BUh+^K]Db`X(q?VQ1cV2.HcSP$JJ=h$apHjTsU84M&LT=>$4$X'Q$%Oc[Z"p$E`iUjEr.M=L,@lhGO$W\-:PUd>[8b,YTAX6Q9:
%=?VP?R-T,J?W(,8?,Gr[)k#W<I#b$'dpjnl2Y2cN<*L0TgA@lAB:(<k#drJ(7^+C[U2q^nEQl_R&!M:i+."$j&]K'e81Db2NZC&/
%)sbgSZ1h+1H[eH'7=.RWrQ[)k1h<ULFCeXU56]RW7EX:Y;bXga\:A>*T]kri<fhmT4bOU`neXd;`feqK>=8coT"@=uc4a_A\LQ)$
%<e=^\,?m'XpVf);Nnqeh]l1/&,(;;t)cN=a$DJP=q`CPM:SlW6eDb#Bd.d<Y2;X"DEZjE)VLf.3?<)&*_Dp4UGeO+Mo6:6)*I?s4
%OhdAZ\LJ>4r!ZC3NrIesV/b/47j5QbH&EZ3]&\ZIM)2n[a3rBmN<,T.Y/FH]qZTjaHA"_poWA=2H7)K*]-=h/B?odFY0n<*hr)NZ
%[<bE]Vo2e-g-pc=8US/2YdgY'%9"4J+L9B&L-kE?pp6Y3.DE#_$Hc5bXE8NnT0j,DB2$T>B+Z@EPs:)8Mmgb+Vk%4pGmhS;k9FB1
%7VS.MNN*Ng9G9W#PC7@0/4b5s.#aDk;K?GD>P_.tWYSoQ\[Ql?@J<.R8XR=(_kl>i^K*k!*EMTB/m_rUYqA#s*YV_68X.K29OSs>
%J??B!*$[<q%_fgHd-;bnfARY<2oaE_ffK-c['T.U77>EV_PBu'(W1XRmIQ5FjP4;Jk&3TRSACZG$YX!l(DRpGSs/apVH2dC,uL`b
%UMEH<G%beD2tUO&C"83^#6n:&nUe/j9rc%:3)X`gR%%6R\BG>=_<=f=?KHhW!iQH#E[t=#QJGfO*Ij%?#d5f0!djGWVKd9B'62,=
%q$d,]$i\",;@76Wa<=+tJIK9_dTCo>*SZk9+i6bC;hE9=;Yb5:/Wo+,G_Zt0)i<.ObaAqE9SI#,Ydmb/%OJ!<(!8<]k$>I6hI\7I
%Uk%rmB)Qbu<m:nSWmSqsLJaOD_jeejMCY)Z:6`&<c_t)-?"c"%?CoR<"ba2$43$AS+nlAhlO,1`@A23Nj\KRdN)Cfs=.n8JS>]E"
%5,%<cRYi;(br:TGa_-k'56`bU9p2Ti:ejKPclPSg:^Q]!W&j:*Wbb(G6V+>d$Z)j)\j/S0`1Ep<&1`hSW$2YW`T:-l,.31=F%Z=_
%#=pc]%-+R<Ga5+A.7YB(+9`)R]ju,a)dV&HU/@L!>BsY;A+Fm#2m5t'StLN=(hGn4Eu]2]PL6/L6m-FC%aMsL*ba(FU$DU\N*i<u
%l3F%g-_G"L'!&ua6_:2AOeU[<CG2g7$tVfs\U/NPPH+rS@7eqB-jd'_Nf.XBn.\d>c>iF1g&&q%9"%g[6"=l00;*ne8QBk)c@8r<
%HLOSuX[eBV0Xs<!lj0EYT<jF_A]SE82t90^+OlNZBe16?@U_-.Q`*/X[r\npgVZV)jGd?cp6_`_Eg>If*VZEWq)2uk1>(be!%)g@
%O%#<OJ^(jT>.pO?g:*Wr]GdGXe52sTI_&,^NU%?`0Lj*k`Ot#C=cOG4P&Q1FE;Qj^2mMQ;&XL*jKoUQXXaOulCc`sdFDg!N9kK`R
%[naV:`3Hs-e9<-f;#?*p/P+\A+(Qg>Rg^'26NYO.Zi`GE#r]C"<qAI5C)9%OrbaYFn\?]>WEcB?f$(bYW5[9>LU;(cRRQH$_`?$i
%fX+rX?(kF0>&D*@L2C9V)Tq-Y'mCV)"Le)oGI5D/[u-8Df<9,p5&P%mO_Mk^5[1ah@N<n[L%[e/Ximft$EC:UUX`i$\9;.Rd8]^j
%7q]Df8=2<sjE'%38k5>&F?6%q=j%aNI_J9XeAJ$1&S6/Ue`G<;#6e,+6BDlhVKKMfM/KB[>0MO6#iFtM2&7km)HV^IWih5#Gn&ts
%@O(LB>DZYK0/pMUj$//Z\$(eYAq6GNSU&79e[Z?@YMoHMfo<]I19BU&)P+mK"G!WUdTh8qDXY*KFF2/]Na!I>7TRQrX)kW),dFOn
%)ba;p-Sg.!4YCFN?2_?PN<8-NNmU>Nf(Ko^@&%0&Q@1YU59IQrZKH(1kcoWLDSt7Q-??3$9j-1!9:+h_\!]O[.T#YXpFJ);LL=C0
%V%63STI[&@`!"%<RbmsU_R8V0R?CrCCEg4h3b5;_dq'iP'k')ph9L(iWDT2reEl(K5>mF:<#;l*%P#rj;a<DKeU!kc##!ZN]$\A9
%O(Chs]W5da%]hI(XHkj8BV].j0ochrX_*KG[L%%nPV%f],6SUeB=iaWG1RnkmELmBAlftnBV((.-'dT>gZ(%iTaTA)gKfh"S<=eu
%BaR@j#RU[U]KjhYc675`m=]/P!0M+>V=a'(6!-gXS1%)?T*Vbt<B7sG6%ao!1^bcW%md;Rp@U'!&M1%J0IsSa%?XEm-K]J\O`M:S
%Aaj+ueIbkWZ??o64VJZsH,nR&Q\+mq#RrF2d5*<S1F?[/<jEoiUT2$?Sn%YB<-?1c%MJqL9_:h_[Vc3=Y%;!m'Edbt!k(.%&(6_l
%r,-'bie0sUKHeTWB)Ta`?7[4,f9ctE5*:/rK=B*GaT<fMk+ZWYln7"d+BY@QGW=+JMP-#E4pe>7\r^cd+B#^TSkj%?M>Xj%HW#t-
%<)]K[8.9.]Lhl4,3JJPbg9.M/nue2Y_/^;ZDaq^be<dN9P*]X;3`C2g8+UHen:1bd>=8/.0f8/IT+@jWU1^!U_tB^;X!;O=UO\N;
%_$nZ$W:090PPr0Y>-cUm+$L"RMF>pXT&("QI-pB2$.0bj4>'dB4sNFF8@FB%BQbE0a&bONLZHfO-%rnF"!rp!-'FdS_j=am3Y06;
%D-p;^Y7I=LqhV8aWgM7&&`c(l<B`7j*jm3P0u&VY3&Jq0\1qcPNBH5_U23t2l@=NLU-eHqMT+Vo*](8r?eOK7kU;e\!FUg%'cUP.
%"?\5,-TGD9laI%1KhTiC;G!91)5p(>5dpodgF8)CYi_IiA><QD/"rDJ=*ROE>2)M^]Qd7M=c?ff`gj&`G0(8&k(D9H<k%L8`a8,T
%^%kZLZ7B/>[ROeLC^9G;hG`t$PR4c)daPCr0k%TL@&MueMmUl`%1=qS7G"$8<6"KhV"X(Zq#eY-f+DR3T4o<#'3HD7jYd<C&q(-N
%bg"5rG]VLM!JZd$+!"gRdV[-0.APX1Z4skKS?m2nI!EO)Gl8)"&*p!#q)+(onuWf6*F_RnI2*p%fVs.]&\ClV07@3!#WWiY<@lc"
%nbUDc_eKNk-Tg+HM'd5DVPokLP$^lcH^(:_WoX8)bhcri?7BURa46+$Sfb-hrB9Lb)'M+Gl1NnWW"4XKhWDp#aPF_4:IgXZg`h!K
%Y1]t\En:57II6K32.fHAV0g\#2&tM2dVtYsACRr4VDp[.k2MU'W/:SAY_ZS+:RBCorZ65e;!cN_i91I"C\AWG*,[Te`]5#='R9fj
%\$b$/Bk])Z/+2B:lO/1QX!OKIca`'KeQjXEE.OuDaDoL&F[HVCjC3G'>OiWAk/s"&8+Z>+^PCX.@2=e;:'GLa'!/L!-%*&L+SJ]D
%U9#k*@m-$&6B\M><b22SII6K3WMLU!msNID8;3NgU2hC"6>8+.W4T)m(GV8"^3Wl&;"\)5er#lhpA'Fr8@(Va!n9M#3NS>rcYF>*
%O\m!C,:W"XP>5@6Nc;*9:D30G'b`CG>;/'%pQ.^a]mdr4feXZ<2JJ*cVMuA&OR,c*V2%BIN(05"f])7bcHoMi/anDf(hX3"PC1KA
%s'A*,j?>P,p)PfNhN7q@WXZKLZUNq6E5\KsGtQ5nO3\'u&RVfc(kSM\[F(H&.SZHX6$UGp^:qP[=)[f&X0N*:<#)\dE2eKJ,ui*d
%pkTMbLRj&eCgg:<-qPb(?Rh%=6/1tm"oeSM0hpXB,.3,IKMS]]%^'K<O._j?*irEEpL[:.P@CBX@eXIEC:4Ph3&-i0SLM^'EY?oS
%d+YF!^ZLWcGJe9$qiG:%QM-*Y0n,RFH#1;%7'(cpV$m/qnK18Y_r]PC+qe$OV4K6AXdn)=@N0k'4JM=7nb1T=Q)u.Od7C<f8&F@#
%G?Vg")LOr!Qc6ti%g3f[)n\31#SYNoVgTlIWVtP50,H25-G=76j&'\:,=u:q&<P`^eQP'!)>c;9dGF5JnEcF)^)hGL77p$5%RfpU
%PW>VSR8p&]-cW!+T=!r'U*Y96b<^NekR1P.-?:Eq-g_6O;7rHa,j-[`)V'IU+#iQ:pt-:(R'fg=l7?d%Rno@#;f8$1ah(/Vq%WBi
%j&)(f_T_+nFenF+'5b^<5-3aXGj@9gGEisPm]jM]*8oQ9-nBO5%iEP:F+0IXE8J0J=LQ87,ZPm&,N*[=)A.T*:-,T%3m/%6ZPeY;
%<q`0GR1P4'KRVFE-+#).`+8m&R_$[EG%&JP"P.u:18-$V8,[t-X[P(2qM:k`dR,f_POaa6aQ5mLY/h(%<%D__*\/S3VY%g^le03)
%#(l;A=hIDV`7%CP.-\6niXuKNM82PZ-p::G+5_Tqb9R`p2WQmZdKHiu_^Jc:=eEh.6HC;4=dg;9bnlQe<lQVGqC.W1(<c2WcB+L]
%)eL=++3]g?Q<YZdhF"&/)bb%O_>r'8HWc:>2A@X,qV(B3<tDVZOq\VfR?GGQ>jJ()6V1bmSG*HHEnD('gu:(\3PRP5DsJPZDMlA!
%&6^<W;K?1a5u/D/n)9jUr[n!$hLE'o)-TspMs.NS_T&Kl[hKT=Xi3t.Wc?]r2&-@j6JM@n+3L-EC9'/7&R>SLbDuZ"E(SL0]>)*s
%dr)8"`@8YN<Yg/)1+(BG8*FQf]ks*r\T=&!B)@VU>l8^#mHe=)5R;U0$Ws"E0/iM>j^#jJ9HPo,oe#IXe-Z^1k*5.=9%aF.196:q
%:@frHC3AX;B\>Zi_Om`UamsY3cS@iIi5>A&jfXJ51.B0.r9]^dcj[<AN.QfV+:jChBW<.\@SW#c_'(%<K.pkn$nV9gjUDJiNufig
%W$9GG;URebUTCB<SiVY;;ZWofOs=!N6AW7i,`/Zj>=Am!X&87*gGWmgZ??^NfbWE:"cVILdq$jV?#/2C%C%sqo,T#8,@(&%UAHNQ
%,:&H\JT=80-$)23IF6>MPPBJn@u01Ck.2_YC^J1"Ht'>c3K9^T(:b+%>:fS4cOaV#jq4<CRb4'-npC?c'\/JIW%M.<3Pckp__n2U
%:Qr-2kd\LY.>K'`C3u0<1e,5KJ$[>"[p8<^%^h)!WiL7$-f`Jg!7[4'`+<gu2o'MPl7=k@g4CeW0(arV-G(lX@oYtA\>+L<2pp<+
%26-gPO[ar3,KP."Q0fQrPN@\???NWSEhnZtUeo*k,PAWF<VCsoSR3R%Q+V7!;D"PUH/_$3SJKbs_/U0qe(,?g+_Um+ZhG!*`VChP
%nti?[Y$L!Vp;[NJ.+'(pWT5YV/"37A3eO.-3c.\:M=\ej.4MH1')_KD>c>/h6Ha7F2;pfLg6'?I=*0uehjbYAf]K[lV]X/Z50!de
%mBbVOrf*VGlkGfYTf,s,GDI[8IW(T]dS=LPT:c82!cqJDJQ?WgnE1W)(jXjom:[JQpNR6*F2.O*b%<DTD!D5'P81)sM9C&u)=:Ya
%0$o@=1:,i`h^s'E#'9"nPo^DC6L2XK*MDM"+8L9WLkj_W-0`G'fR^08;tA;blP],BX&nD=T[$(-+`!0*C=RO'm#j<2VEO],LK2qi
%!qdC!`FJ7Y144,Lj`dr+5ik#,ct$J7'o'aS=er]WH:6*\Q"50Q"M4N6&Xb-GgRV3L?<-Bsa85]q-ZX!YNs:sqA_X<`)e]_dCmP'H
%U(NH]>^GfbbajIm4keSB8A%01qfu,"OHGMjE(bO_E8GUfR*H/05hb'1Uln59"$ibu!_RO3o;]udJ?<(fY+TmMck^__Zm(6#:h-Za
%#q,PH$le:2RbY@tL=>S0[?JotZ!=64Fs\u(q5WfjBF'T0;:3"riJNRM)?+&Bi_HpI"],ep_Cg;@;QogD88-ZhntkO@mP-G*FrL5!
%69VcaU[K"6!f8I/:/"hK&sI3[Am?KL!R%4?lUaMO1jWE?gAMA"&E,N^2?`4*F20A/Op`#\m6lSCEk>=+IAAs*[8F8jZ96k41HNkH
%D-?MRA=&VQ1RcUCm6[jb,u1fP[3i(=C:['OkUo4#\:nVa]Ulu6TOK;+'@dnfo>OqFF\Od7qWpZ\3Him9p;BN=8ES[!DeB6CWTSQ$
%Epj-YCn`O5Dm8(fdKk_0]aq=);MjDG0iL'i?/7\s<]>*#h>4`DH-O^nlnM=Fcj]75bFlF@$fqUsVlr-5%^OKe\RS.C#-DrqRW'q(
%;m4%Vf,L[:NRF&@Rg@.lO,ufkqJGbU$sKh^L]rX3/R8Ih<4@d^n`lO*2MnVtlO)<o/r45kgLN&ZH`_H;fP'n/H8jHV[=Z$;I(^QJ
%J]'r]WLU^t+pMc5FPSJO'+k97lbd_-K6Cn:k,'9`75/?"W8555elk:8diQE0GGF#nZ4fC(ccO>#,&a(/$Rp2tp,I7>1Gi'eSZd*I
%2BC$Y>2/`)km'E=FnUA<76esj(qH/G>1>E,OY%5V`H4*Y@C3E^iSf_l<$p3LP>n*7V&>)VB%i"K1m*U3,,8\>5)LU;#sqa$?!ti(
%Rt)6[;]TCqln&s(mLijZf7[UQ\<mk[QYKog4bc&7P\Ek1Wah2K7oklROBk\;*jcp\/8A$8%9Bk?"-\M>0Zc<Nc\\_9[lZ-?+9=od
%WdDkXBr!1:2JuFb(.2DAD?UQej,@.Sc?:g'SY*LOY.]KrWG6ua<uuu72VD7q4^B1'7@Ic=OXP=]<!8@/=PX9t=4R&WjLafS-+&9#
%Zg`&rfeFh1WTuOq@jaTnIOQh/^R@@L@%:GV]V3orm-@&o0%]#%;_Lbm4?62Bb`R62);GkP%9At"R@s+!_;DV+aKD@a)m>IeN!t_D
%.G@,DM&iFp7X2&.RL28cSkZsgSY[QVe6IF9,BpBT3p[>J2""=Ejqph+'E/#BqnblfPM4%;Eu7&=6IS0KGPBKMeIm/jaM-O+44(+2
%6#i@a$[!;oWWYaj:",8g\jd>6D5i]-oFi/rA:j+,j$n(_)+[];NWoft!hpIZFeq,7.O;%Z7an:NZf60G1F<4pJQ=A^NaiIYUnLU_
%S9K)Q>%I2#m+h9W3Y_3#`FSP(oN"MZ^8,AbX*j2epQqEa]r&qG.Z_\ne@GN7),,qZ&;T-dXC@YCilrph!qIPuZXNU^A)SeK-uY%a
%;T7.]or3fj9(sn9R[f<[I[\G?f?(6<9G@Y)F_j6d1hA<2%L%],87^ZbJJY)+WQD."0Jc7uR(@Zg,W@[5/aOj#Qo!qoZq7F`#]snV
%)f>bKT9.T1-d`0WZt)Ok<[.-/qS5N@j;,`QDkf?jh_*FRI9CYBm!^_8K(S4Bnf@Lph0=#qY,XhYgS;\>.HEGb8]?BG'!^b:?>G(K
%oZ5m<DX3c1mQsE*[GZrY-cL'2>P7cf6:+[Y2q&P7d&VjolYoKZ9qFT5k(Po<@VhEL&p'7k"_I=BTTsHXCmUEGl$fiSZ>Vkm<%Sn^
%HWCl0m=OfBhh##S$R.42ojF22[D#$%fk^a7XB*]+$;R:NW7<<7T)%G<I(AI]-U4OV<JIXDVV5\tKds?78W0E9na"BWP`!G'=AaKS
%R*;;pK<T=!1+!#T(;:RI9S@)$k8#+D)#C6fOYlFq_VJf'9rB[#IAOYhN,%"Q[Pb1:=-p7O9u1!3&+cB`V-4pP:nn7:qn<kBq(;GI
%4=GR4&JC!dNFg`ZPIRrK3`X[)hl8^k'VUCK`t94CQq-IQ:;E=l9R3p+-=;Y,D'9BUfMEPl:U<i6p]cZ=.dot)C0P=l7<li(..m-C
%[E;1jX#k25R+RoZa3-cUMsq<><jHJ\qNC)o%Ei^ehpWT1?=VBm`h!O8QJP?G!n9\1"p7_^,AZL74u4M.[sZgIH9G<c6rb1hAWkYk
%r3JG#-D<'c&>H?BVb<ZNq=+n2%=ILVXg+V<AMio(_kCTTM>W4)MJ+F)$mMU/A%4EaBZ:Y0RH36nSUhm$#uF[nd\E!2pXOtiDu9&6
%\A^l2T;qQPQ73pD8\D>P+ebc4,/QKSTe$eTmZi8g@d$.U]r5l7;q!p'n"4^%Xu$b(:4iZaTHq4I2ojc1jX=_WUnZ>s6G]5CBU#qB
%Ul7.5<hbi(`V!HP/YWj!K&ZG+--t2S*TfP<`FbMG.Sg_@XScr.1HKM#FE\3j._lhS8&31)*PYkU$BXsFs7Ytd6,pJ\>cf$<<)<#D
%ebf.PgnaHu[[4%([XOunRl71'Q6UFFJB<i4os=_9mU#d4e$!e*c!f%W_%RM2;ToRcEE=kW#;<G&TC2UUW\JCjj<)ong@pu28:0El
%Z'N?peOD_sbnr&a!p`]6LLY!YOnhB:f#L-E3E:_EEXr9Dq0)51g(8+2_BcfX_nP0/Rj$<JfX;B;"qtJKN^NFZRqG?_MZ^g<E>N&,
%I,aFVEBZaUn`b5c0:HkW@bZ^->\Z0So>\EPWOGI;Jn5:@!8LkU;E63c3Uf0QJ2Bh'4>l1&88th8Q*?],<qPS+,t<tj%^>=u:LGUc
%gV(#$4FjS*clFjZ.!rm[C?7D,Dq;"rL7J1*2&).RS#'=@:9efGk]@l.T($7K5YQm8>#StYY,@!nJ&ZFPQc7)rA%tG*OlIu+V`ln^
%q1]/"d,T0Uki42S2fQeEYLL@_j_Q+8W!$c::FiQc`>^T<9M&jR3Gf*cQ6f"uQn=B"hus\fQJ'CRrfAfXX#kYa+uMMdg0naVJE7d9
%/6;(H[r_%*)M6J1[5ml;VPKDLdk!#K;#47nKQpsg!KouLN4q"e/RkYnNs2fMnR<'9iW.Cdi&**NVA\TYMM2$gp@/lejX[5']e@q>
%</Ra[n6O<^%`[$6:gO`T-VRs"<`7"/e(Bpb/:(V_dKOJ?=.?!*o$C*c-rSKH@ef!3.a6%>k\a0@o&DU9VqdPh_C2DDn9RT8:V8LE
%MJ(QK$"W_u04PCfo]P+_ln"St78d*b76pp"Z=^GJ@8Bbt\_(+Cm4<FZ&`l9C:EX0%RtIXmY5'Yq:.)PqiE0'temjaOKu&LO6PaHW
%:[)tZd5-CFh)P5+*.69kp8%P,fl'`66Vd0;a6fec1h]+bDTJ.,nQ(4(a`01C2<g[mM`/#tcCHVeU%[&PHu,n8,N^*bdV1eY.Tu_Z
%#][g3-25r;f+G8ai`c1lKIY-unCb$&1dZ28ZPni8U!Cm-352?o8t&b>LRj\p!];9.5tWf16Hf@Fo`-k:2Ak1U"hX-E"a^/'/$gZU
%]EsS///%RXPDUmkpT@b7gD>ijMnloZ6\uFlTnXgs'Th])!;Cd?(iPtM&nBm&>;Cp=DsZF*Q`-/&BOkG&pAIr>h0ti:;ia'r$.XqM
%\t<B%m,h`;a,O8LT5SN3(UK)JD92"'&2Y@P,U%D=<jEtP2a]rGF*DhL2)^muo_`9]gQ-V;[E!,RA,q;9#6FJ,rA$F,4),@@>J!VC
%?B6RU4JBobS`o3e[s@jfg>/JcD4jbRkLa(Pd+tuge(J'n8-utIk+ZmYc>Ut0B=F,[37)pp#jU$2YlKFcW?Yjqe4$^:mCHMY:.T.2
%:M@*3*N!i4/!'Y=.7sl!ee(tCY,BN"n[%36q+I&5=b#_J=)rjc%Vb;Dp!Yhr`GO+"4HPKAeVV==)m.^,%MquohKgNIXXo"qC9Ea'
%6A'V-e9k_9d3<l`oI05DEhYSA[*eKW@8YZQ;;8h>#Z?u8A%-Z8P::0JqedYN;hX9r;[c>!#gK\_=%N4t3M[0NkLr]T]onApUe9>4
%T%#0Ofl&:0ZeDW!V9iN<.b&'rdYCM/)s$'ko[pi@U**[*(&R2@eEsA]RFnIi8JJSX=_399RF$'3c#TbUA*p)nbsoHB%XQ`La4N#+
%IGTE7p>(&0H@>F6\$k#d'Vk%GZs1_D,SQWMhANS]<;VkreAe)Q26RD4ESYYRfksp6(KBG@9=eHk8@rqa]=Qe?%%uiCS4;5A8irV`
%S@5Ypf4,g%*W6ne,K>1TWo-:+-l?9LV118Sf/?'"ja*p7Sa5RYDD)":I#[;.RduBoNcr+*laf6R#u-!V8H29np')"D<&pQoI\*;Y
%+K>(,_gN"J%@K8t.@$8kk"LVWf!/]uZ3k#qM]i[\Zg^b'qSr66.kJcK23[tS>H%?Ll,?NC`J->&Zm@)r;P$.1IXMaHqn]##*V$cD
%Qh7\Gn?+)gYkDKA6jl,:RE^,W<2(Z(@tV)Zc<EPS9cW>sQ,b1"!4%tJ#]4,sU-]QE;amh;gb3iR+(l/`j59n(hu)p"rMTAHrr/Pi
%iT'\4kLVr3]fgo'rKlFAj0/LU:VZoOs7GWLrq::0n^"uM?bcU8rBL>R+91Hss75LUI/L/is7iL!s84O"r6qi6rqt[RpqK,iU[o"F
%pUe3?ci<NRs5s=_EtIC/~>
%AI9_PrivateDataEnd
